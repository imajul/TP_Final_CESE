
Mis_programas/TP_Final_CESE/out/TP_Final_CESE.elf:     file format elf32-littlearm
Mis_programas/TP_Final_CESE/out/TP_Final_CESE.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000eb5

Program Header:
0x70000001 off    0x00017cd0 vaddr 0x1a007cd0 paddr 0x1a007cd0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000b7c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00007cd8 memsz 0x00007cd8 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a007cd8 align 2**16
         filesz 0x000009f4 memsz 0x000009f4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007ccc  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009f4  10000000  1a007cd8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
  6 .bss          00000184  100009f8  100009f8  000009f8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 11 .init_array   00000004  1a007ccc  1a007ccc  00017ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a007cd0  1a007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000209f4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 18 .noinit       00000000  10000b7c  10000b7c  000209f4  2**2
                  CONTENTS
 19 .debug_info   0002ac06  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005c35  00000000  00000000  0004b5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000b074  00000000  00000000  0005122f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000c70  00000000  00000000  0005c2a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000cd8  00000000  00000000  0005cf13  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000eaf0  00000000  00000000  0005dbeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00017360  00000000  00000000  0006c6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00028d8d  00000000  00000000  00083a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000ac7c8  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000ac830  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002a80  00000000  00000000  000ac864  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100009f8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a007ccc l    d  .init_array	00000000 .init_array
1a007cd0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000b7c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 rtc_DS3231.c
00000000 l    df *ABS*	00000000 eeprom_24C32.c
00000000 l    df *ABS*	00000000 DS18B20.c
1a0005b0 l     F .text	0000003c pauses
1a0005ec l     F .text	0000011e owCrc
1a00070c l     F .text	00000068 owPresence
1a000774 l     F .text	00000158 owCmd
10000000 l     O .data	00000001 bit_resolution
10000001 l     O .data	00000001 high_temp_alarm
10000002 l     O .data	00000001 low_temp_alarm
00000000 l    df *ABS*	00000000 main.c
100009f8 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 system.c
100009fc l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board.c
1a000f60 l     F .text	00000044 Board_LED_Init
1a000fa4 l     F .text	00000040 Board_TEC_Init
1a000fe4 l     F .text	00000040 Board_GPIO_Init
1a001024 l     F .text	00000030 Board_ADC_Init
1a001054 l     F .text	00000038 Board_SPI_Init
1a00108c l     F .text	00000024 Board_I2C_Init
1a007758 l     O .text	00000008 GpioButtons
1a007760 l     O .text	0000000c GpioLeds
1a00776c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a007784 l     O .text	00000004 InitClkStates
1a007788 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0011bc l     F .text	0000002c Chip_UART_GetIndex
1a0077fc l     O .text	00000008 UART_BClock
1a007804 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001358 l     F .text	00000014 Chip_ADC_GetClockIndex
1a00136c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001420 l     F .text	000000a0 pll_calc_divs
1a0014c0 l     F .text	0000010c pll_get_frac
1a0015cc l     F .text	0000004c Chip_Clock_FindBaseClock
1a001840 l     F .text	00000022 Chip_Clock_GetDivRate
10000a00 l     O .bss	00000008 audio_usb_pll_freq
1a007818 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a007884 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001c4c l     F .text	00000014 Chip_SSP_GetClockIndex
1a001c60 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_sleep.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0078cc l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000a08 l     O .bss	00000004 callBackFuncParams
10000a10 l     O .bss	00000008 tickCounter
10000a18 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a00213c l     F .text	00000030 i2cHardwareInit
1a00216c l     F .text	00000040 i2cHardwareRead
1a0021ac l     F .text	00000040 i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00223c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000a1c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_convert.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a007b90 l     O .text	00000010 blanks.8678
1a007ba0 l     O .text	00000010 zeroes.8679
00000000 l    df *ABS*	00000000 dtoa.c
1a00591c l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a007cb0 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 impure.c
10000050 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a007cd0 l       .init_array	00000000 __init_array_end
1a007ccc l       .bss_RAM5	00000000 __preinit_array_end
1a007ccc l       .init_array	00000000 __init_array_start
1a007ccc l       .bss_RAM5	00000000 __preinit_array_start
1a0003b6 g     F .text	00000032 RTC_reset_alarm
1a007610 g     F .text	0000002c .hidden __aeabi_dcmpun
1a001664 g     F .text	0000001c Chip_Clock_GetDividerSource
1a001c18 g     F .text	0000000e Chip_I2CM_Xfer
1a002f9c g     F .text	00000012 .hidden __aeabi_dcmple
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a002ed8 g     F .text	0000007a .hidden __cmpdf2
1a0021ec g     F .text	0000000e i2cInit
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a002ed8 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002594 g     F .text	00000088 int64ToString
1a002a48 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
10000a54 g     O .bss	00000020 eeprom24C32
1a001104 g     F .text	00000008 __stdio_init
10000b58 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00017a  w    F .text	00000002 HardFault_Handler
1a001d20 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a001412 g     F .text	0000000c Chip_ADC_SetResolution
1a003da8 g     F .text	0000000c __malloc_unlock
1a002110 g     F .text	0000002c SysTick_Handler
1a00123c g     F .text	00000040 Chip_UART_SetBaud
10000b5c g     O .bss	00000001 __lock___arc4random_mutex
1a0008cc g     F .text	0000005c owInit
1a000eb0  w    F .text	00000002 initialise_monitor_handles
1a002516 g     F .text	00000008 printString
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a006940 g     F .text	000000ce memmove
1a002694 g     F .text	00000088 uintToAsciiHex
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a006a10 g     F .text	0000004c _Balloc
1a007cd8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a002ec8 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a0021fa g     F .text	00000028 i2cRead
53ff69da g       *ABS*	00000000 __valid_user_code_checksum
1a007cd8 g       .ARM.exidx	00000000 _etext
1a002f64 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0018e2 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a003bc8 g     F .text	00000134 memcpy
1a002f54 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003ee0 g     F .text	00001a3c _svfprintf_r
1a0029d0 g     F .text	00000022 .hidden __floatsidf
1a001ecc g     F .text	00000030 Chip_I2C_MasterStateHandler
1a002ed0 g     F .text	00000082 .hidden __ltdf2
1a003078 g     F .text	00000000 .hidden __aeabi_uldivmod
10000b7c g       .noinit	00000000 _noinit
1a002066 g     F .text	00000016 uartWriteString
10000a88 g     O .bss	00000004 SystemCoreClock
1a0011e8 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002554 g     F .text	00000024 printUIntFormat
1a007be8 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a001960 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002506 g     F .text	00000010 printInitUart
10000a50 g     O .bss	00000004 __malloc_top_pad
100009f9 g     O .bss	00000001 flag
1a001144 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0029b0 g     F .text	0000001e .hidden __aeabi_ui2d
1a006894 g     F .text	00000008 _localeconv_r
1a006b9c g     F .text	00000012 __i2b
1a001e9c g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a0030a8 g     F .text	000002d0 .hidden __udivmoddi4
1a00272c g     F .text	00000000 .hidden __aeabi_drsub
1a000f40 g     F .text	00000020 _sbrk_r
1a007754 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00049e g     F .text	00000018 eeprom24C32Init
1a002f88 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
10000a48 g     O .bss	00000004 __malloc_max_sbrked_mem
1a0029f4 g     F .text	00000042 .hidden __extendsfdf2
1a002cf8 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002738 g     F .text	00000276 .hidden __adddf3
1a000502 g     F .text	00000044 eeprom24C32WriteByte
1a007cd0 g       .ARM.exidx	00000000 __exidx_start
10000b60 g     O .bss	00000001 __lock___env_recursive_mutex
1a002aa4 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10000b64 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a007024 g     F .text	0000036c _realloc_r
1a003608 g     F .text	00000048 __libc_init_array
1a007bc0 g     O .text	00000028 __mprec_bigtens
1a0029b0 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a006e34 g     F .text	00000038 __mcmp
1a0010d4 g     F .text	00000030 Board_Init
1a000f3e  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000b7c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000eb4 g     F .text	00000088 Reset_Handler
1a002094 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001c26 g     F .text	00000024 Chip_I2CM_XferBlocking
1a006afc g     F .text	00000040 __hi0bits
1a001e64 g     F .text	00000038 Chip_I2C_SetClockRate
1a000928 g     F .text	000000cc owWriteScratch
1a00763c g     F .text	0000004e .hidden __fixdfsi
1a00037c g     F .text	0000003a RTC_read_control_registers
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a001618 g     F .text	0000004c Chip_Clock_EnableCrystal
10000b68 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002738 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a002ed0 g     F .text	00000082 .hidden __ledf2
1a006ce0 g     F .text	000000a0 __pow5mult
1a002a38 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a001e40 g     F .text	00000024 Chip_I2C_Init
1a003654 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002520 g     F .text	00000010 printEnter
1a000b74 g     F .text	00000040 My_IRQ_Init
1a0017d4 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a000326 g     F .text	00000056 RTC_read_time
1a007914 g     O .text	000000e6 gpioPinsInit
1a00204c g     F .text	0000001a uartWriteByte
1a001c78 g     F .text	00000012 Chip_SSP_SetClockRate
1a002fc4 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0068a0 g     F .text	00000000 memchr
1a0003e8 g     F .text	0000001c decToBcd
1a00341c g     F .text	000001ec _free_r
1a0018bc g     F .text	00000026 Chip_Clock_GetBaseClock
1a002fb0 g     F .text	00000012 .hidden __aeabi_dcmpge
100009f8 g       .bss	00000000 _bss
1a0013e0 g     F .text	00000032 Chip_ADC_SetSampleRate
1a002734 g     F .text	0000027a .hidden __aeabi_dsub
10000880 g     O .data	00000004 __malloc_sbrk_base
1a002a38 g     F .text	0000006a .hidden __floatundidf
1a006d80 g     F .text	000000b2 __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a007470 g     F .text	000000f6 __ssprint_r
1a001c8a g     F .text	0000003e Chip_SSP_SetBitRate
1a0009f4 g     F .text	0000005c owSetBitResolution
1a001c4a g     F .text	00000002 Chip_GPIO_Init
1a007780 g     O .text	00000004 OscRateIn
1a0024ac g     F .text	0000005a delayInaccurateMs
1a001fd0 g     F .text	0000007c uartInit
1a006bb0 g     F .text	00000130 __multiply
10000b7c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0073fc g     F .text	00000072 strncpy
10000a20 g     O .bss	00000028 __malloc_current_mallinfo
1a006f64 g     F .text	000000be __d2b
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a0029d0 g     F .text	00000022 .hidden __aeabi_i2d
1a002270 g     F .text	000001ac gpioInit
1a000300 g     F .text	00000026 RTC_turn_alarm_on
1a001fa0 g     F .text	00000004 sleepUntilNextInterrupt
1a000546 g     F .text	00000020 eeprom24C32UpdateDataAddress
1a003378  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002cf8 g     F .text	000001d0 .hidden __divdf3
10000478 g     O .data	00000408 __malloc_av_
1a002aa4 g     F .text	00000254 .hidden __muldf3
1a00241c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a003d9c g     F .text	0000000c __malloc_lock
1a001efc g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a007568 g     F .text	0000005e _calloc_r
1a00261c g     F .text	00000078 uint64ToString
1a001680 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003650 g     F .text	00000002 __retarget_lock_acquire_recursive
1a003cfc g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000566 g     F .text	0000004a eeprom24C32ReadRandom
1a000bb4 g     F .text	000002fc main
10000a4c g     O .bss	00000004 __malloc_max_total_mem
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a005a40 g     F .text	00000e54 _dtoa_r
1a003658 g     F .text	00000570 _malloc_r
10000a90 g     O .bss	000000c8 globalStrConvertBuff
1a0075f4 g     F .text	0000001a __ascii_wctomb
10000a74 g     O .bss	00000013 time
1a002a48 g     F .text	0000005a .hidden __aeabi_l2d
1a001fa4 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0018f0 g     F .text	0000003c Chip_Clock_EnableOpts
1a00337c g     F .text	000000a0 _malloc_trim_r
1a00169c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000484 g     F .text	0000001a eeprom24C32I2cAddress
1a001754 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001f4c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002ed8 g     F .text	0000007a .hidden __nedf2
1a000f3c  w    F .text	00000002 _fini
1a000404 g     F .text	00000080 RTC_set_alarm_time
1a003db4 g     F .text	00000044 sprintf
1a0013a0 g     F .text	00000040 Chip_ADC_Init
10000a8c g     O .bss	00000004 g_pUsbApi
1a00110c g     F .text	00000038 Board_SetupMuxing
1a00127c g     F .text	000000dc Chip_UART_SetBaudFDR
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000048 g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001fbc g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a001b18 g     F .text	00000100 Chip_I2CM_XferHandler
1a002578 g     F .text	0000001a printHex
1a0075c8 g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
1a0004b6 g     F .text	0000004c eeprom24C32GetCurrentAddress
10000b7c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001cc8 g     F .text	00000038 Chip_SSP_Init
1a002530 g     F .text	00000024 printIntFormat
1a001f14 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a002222 g     F .text	00000018 i2cWrite
1a0010b0 g     F .text	00000024 Board_Debug_Init
1a002f74 g     F .text	00000012 .hidden __aeabi_dcmpeq
100009f4 g       .data	00000000 _edata
1a001d00 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10000b6c g     O .bss	00000001 __lock___at_quick_exit_mutex
1a0019c0 g     F .text	00000158 Chip_SetupCoreClock
1a000b60 g     F .text	00000014 GPIO0_IRQHandler
10000884 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a0019ac g     F .text	00000014 SystemCoreClockUpdate
1a006e6c g     F .text	000000f8 __mdiff
1a00763c g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a007a5c g     O .text	00000101 _ctype_
1a000a50 g     F .text	00000110 owReadTemperature
1a003378  w    F .text	00000002 .hidden __aeabi_idiv0
1a007610 g     F .text	0000002c .hidden __unorddf2
1a00017e  w    F .text	00000002 BusFault_Handler
10000b70 g     O .bss	00000001 __lock___dd_hash_mutex
10000b74 g     O .bss	00000001 __lock___tz_mutex
1a003e00 g     F .text	000000dc strlen
1a00192c g     F .text	00000034 Chip_Clock_Enable
1a002f64 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a002ec8 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0029f4 g     F .text	00000042 .hidden __aeabi_f2d
1a002438 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a002734 g     F .text	0000027a .hidden __subdf3
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a006b3c g     F .text	00000060 __lo0bits
1a002fd8 g     F .text	00000000 .hidden __aeabi_ldivmod
1a00207c g     F .text	00000018 tickPowerSet
1a007390 g     F .text	0000006c frexp
10000888 g     O .data	0000016c __global_locale
1a00271c g     F .text	00000010 uintToAsciiHexGlobal
1a001864 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001f84 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10000b78 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0011b0 g     F .text	0000000c Board_SystemInit
1a006a70 g     F .text	0000008a __multadd
1a006a5c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 b5 0e 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a da 69 ff 53     }............i.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	11 21 00 1a                                         .!..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	1d 24 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .$..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	61 0b 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     a...............
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a007cd8 	.word	0x1a007cd8
1a000118:	10000000 	.word	0x10000000
1a00011c:	000009f4 	.word	0x000009f4
1a000120:	1a007cd8 	.word	0x1a007cd8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a007cd8 	.word	0x1a007cd8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a007cd8 	.word	0x1a007cd8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a007cd8 	.word	0x1a007cd8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100009f8 	.word	0x100009f8
1a000154:	00000184 	.word	0x00000184
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <RTC_turn_alarm_on>:

	i2cWrite(i2c,address,dato,5,TRUE );
}

void RTC_turn_alarm_on(rtcDS3231_t* time, int32_t i2c, uint8_t address)
{
1a000300:	b510      	push	{r4, lr}
1a000302:	b084      	sub	sp, #16
1a000304:	4614      	mov	r4, r2
	uint8_t dato[2];

	dato[0]=0x0E;
1a000306:	230e      	movs	r3, #14
1a000308:	f88d 300c 	strb.w	r3, [sp, #12]
	dato[1]=0b00000101;
1a00030c:	2305      	movs	r3, #5
1a00030e:	f88d 300d 	strb.w	r3, [sp, #13]

	i2cWrite(i2c, address,dato,2,TRUE );
1a000312:	b2c8      	uxtb	r0, r1
1a000314:	2301      	movs	r3, #1
1a000316:	9300      	str	r3, [sp, #0]
1a000318:	2302      	movs	r3, #2
1a00031a:	aa03      	add	r2, sp, #12
1a00031c:	4621      	mov	r1, r4
1a00031e:	f001 ff80 	bl	1a002222 <i2cWrite>
}
1a000322:	b004      	add	sp, #16
1a000324:	bd10      	pop	{r4, pc}

1a000326 <RTC_read_time>:
// READ OPERATIONS
//-----------------------------------------------------------------------------

// Read time registers
void RTC_read_time( rtcDS3231_t* now, int32_t i2c, uint8_t address)
{
1a000326:	b530      	push	{r4, r5, lr}
1a000328:	b089      	sub	sp, #36	; 0x24
1a00032a:	4604      	mov	r4, r0
1a00032c:	4615      	mov	r5, r2
	uint8_t lectura[7];
	uint8_t dato = 0x00;
1a00032e:	2200      	movs	r2, #0
1a000330:	f88d 2017 	strb.w	r2, [sp, #23]

//	i2cWrite(i2c, address,0x00,1,FALSE );
//	i2cRead( i2c,  address,(uint8_t*)0, 0, FALSE, lectura, 19, TRUE);

	i2cRead( i2c, address, &dato, 1, FALSE, lectura, 7, TRUE);
1a000334:	b2c8      	uxtb	r0, r1
1a000336:	2301      	movs	r3, #1
1a000338:	9303      	str	r3, [sp, #12]
1a00033a:	2107      	movs	r1, #7
1a00033c:	9102      	str	r1, [sp, #8]
1a00033e:	a906      	add	r1, sp, #24
1a000340:	9101      	str	r1, [sp, #4]
1a000342:	9200      	str	r2, [sp, #0]
1a000344:	f10d 0217 	add.w	r2, sp, #23
1a000348:	4629      	mov	r1, r5
1a00034a:	f001 ff56 	bl	1a0021fa <i2cRead>
//	now->sec = lectura[4];
//
//	now->MSB_temp = (int8_t)lectura[2];     	  /* temperatura byte superior */
//	now->LSB_temp = ((uint8_t)lectura[3]>>6)*25;		/* temperatura byte inferior */

	now->year = lectura[6];
1a00034e:	f89d 301e 	ldrb.w	r3, [sp, #30]
1a000352:	7023      	strb	r3, [r4, #0]
	now->month = lectura[5];
1a000354:	f89d 301d 	ldrb.w	r3, [sp, #29]
1a000358:	7063      	strb	r3, [r4, #1]
	now->mday = lectura[4];
1a00035a:	f89d 301c 	ldrb.w	r3, [sp, #28]
1a00035e:	70a3      	strb	r3, [r4, #2]
	now->wday = lectura[3];
1a000360:	f89d 301b 	ldrb.w	r3, [sp, #27]
1a000364:	70e3      	strb	r3, [r4, #3]
	now->hour = lectura[2];
1a000366:	f89d 301a 	ldrb.w	r3, [sp, #26]
1a00036a:	7123      	strb	r3, [r4, #4]
	now->min = lectura[1];
1a00036c:	f89d 3019 	ldrb.w	r3, [sp, #25]
1a000370:	7163      	strb	r3, [r4, #5]
	now->sec = lectura[0];
1a000372:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000376:	71a3      	strb	r3, [r4, #6]

//	now->MSB_temp = (int8_t)lectura[17];     	  /* temperatura byte superior */
//	now->LSB_temp = ((uint8_t)lectura[18]>>6)*25;		/* temperatura byte inferior */

}
1a000378:	b009      	add	sp, #36	; 0x24
1a00037a:	bd30      	pop	{r4, r5, pc}

1a00037c <RTC_read_control_registers>:
	now->LSB_temp = ((uint8_t)lectura[1]>>6)*25;		/* temperatura byte inferior */

}

void RTC_read_control_registers( rtcDS3231_t* now, int32_t i2c, uint8_t address)
{
1a00037c:	b530      	push	{r4, r5, lr}
1a00037e:	b087      	sub	sp, #28
1a000380:	4604      	mov	r4, r0
1a000382:	4615      	mov	r5, r2
	uint8_t lectura[2];
	uint8_t dato = 0x0E;
1a000384:	230e      	movs	r3, #14
1a000386:	f88d 3013 	strb.w	r3, [sp, #19]

	i2cRead( i2c, address, &dato, 1, FALSE, lectura, 2, TRUE);
1a00038a:	b2c8      	uxtb	r0, r1
1a00038c:	2301      	movs	r3, #1
1a00038e:	9303      	str	r3, [sp, #12]
1a000390:	2202      	movs	r2, #2
1a000392:	9202      	str	r2, [sp, #8]
1a000394:	aa05      	add	r2, sp, #20
1a000396:	9201      	str	r2, [sp, #4]
1a000398:	2200      	movs	r2, #0
1a00039a:	9200      	str	r2, [sp, #0]
1a00039c:	f10d 0213 	add.w	r2, sp, #19
1a0003a0:	4629      	mov	r1, r5
1a0003a2:	f001 ff2a 	bl	1a0021fa <i2cRead>

	now->control = lectura[0];     	 		/* registro control */
1a0003a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
1a0003aa:	73a3      	strb	r3, [r4, #14]
	now->control_status = lectura[1];		/* registro control/status */
1a0003ac:	f89d 3015 	ldrb.w	r3, [sp, #21]
1a0003b0:	73e3      	strb	r3, [r4, #15]

}
1a0003b2:	b007      	add	sp, #28
1a0003b4:	bd30      	pop	{r4, r5, pc}

1a0003b6 <RTC_reset_alarm>:
{
1a0003b6:	b570      	push	{r4, r5, r6, lr}
1a0003b8:	b084      	sub	sp, #16
1a0003ba:	4606      	mov	r6, r0
1a0003bc:	460c      	mov	r4, r1
1a0003be:	4615      	mov	r5, r2
	RTC_read_control_registers( time, i2c, address);
1a0003c0:	f7ff ffdc 	bl	1a00037c <RTC_read_control_registers>
	dato[0]=0x0F;
1a0003c4:	230f      	movs	r3, #15
1a0003c6:	f88d 300c 	strb.w	r3, [sp, #12]
	dato[1]=time->control_status & ~(1<<0);
1a0003ca:	7bf3      	ldrb	r3, [r6, #15]
1a0003cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a0003d0:	f88d 300d 	strb.w	r3, [sp, #13]
	i2cWrite(i2c, address,dato,2,TRUE );
1a0003d4:	2301      	movs	r3, #1
1a0003d6:	9300      	str	r3, [sp, #0]
1a0003d8:	2302      	movs	r3, #2
1a0003da:	aa03      	add	r2, sp, #12
1a0003dc:	4629      	mov	r1, r5
1a0003de:	b2e0      	uxtb	r0, r4
1a0003e0:	f001 ff1f 	bl	1a002222 <i2cWrite>
}
1a0003e4:	b004      	add	sp, #16
1a0003e6:	bd70      	pop	{r4, r5, r6, pc}

1a0003e8 <decToBcd>:

uint8_t decToBcd(uint8_t val)
{
// Convert normal decimal numbers to binary coded decimal
	return ( (val/10*16) + (val%10) );
1a0003e8:	4b05      	ldr	r3, [pc, #20]	; (1a000400 <decToBcd+0x18>)
1a0003ea:	fba3 2300 	umull	r2, r3, r3, r0
1a0003ee:	08db      	lsrs	r3, r3, #3
1a0003f0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0003f4:	004a      	lsls	r2, r1, #1
1a0003f6:	1a80      	subs	r0, r0, r2
1a0003f8:	eb00 1003 	add.w	r0, r0, r3, lsl #4
}
1a0003fc:	b2c0      	uxtb	r0, r0
1a0003fe:	4770      	bx	lr
1a000400:	cccccccd 	.word	0xcccccccd

1a000404 <RTC_set_alarm_time>:
{
1a000404:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000406:	b085      	sub	sp, #20
1a000408:	460d      	mov	r5, r1
1a00040a:	4616      	mov	r6, r2
1a00040c:	461f      	mov	r7, r3
1a00040e:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	dato[0]=0x07;
1a000412:	2307      	movs	r3, #7
1a000414:	f88d 3008 	strb.w	r3, [sp, #8]
	dato[1]= decToBcd(second) | ((alarmBits & 0b00000001) << 7);
1a000418:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
1a00041c:	f7ff ffe4 	bl	1a0003e8 <decToBcd>
1a000420:	b240      	sxtb	r0, r0
1a000422:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
1a000426:	f88d 0009 	strb.w	r0, [sp, #9]
	dato[2]= decToBcd(minute) | ((alarmBits & 0b00000010) << 6);
1a00042a:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
1a00042e:	f7ff ffdb 	bl	1a0003e8 <decToBcd>
1a000432:	b240      	sxtb	r0, r0
1a000434:	01a3      	lsls	r3, r4, #6
1a000436:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
1a00043a:	b25b      	sxtb	r3, r3
1a00043c:	4303      	orrs	r3, r0
1a00043e:	f88d 300a 	strb.w	r3, [sp, #10]
	dato[3]= decToBcd(hour)   | ((alarmBits & 0b00000100) << 5);
1a000442:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
1a000446:	f7ff ffcf 	bl	1a0003e8 <decToBcd>
1a00044a:	b240      	sxtb	r0, r0
1a00044c:	0163      	lsls	r3, r4, #5
1a00044e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
1a000452:	b25b      	sxtb	r3, r3
1a000454:	4303      	orrs	r3, r0
1a000456:	f88d 300b 	strb.w	r3, [sp, #11]
	dato[4]= decToBcd(day)    | ((alarmBits & 0b00001000) << 4);
1a00045a:	4638      	mov	r0, r7
1a00045c:	f7ff ffc4 	bl	1a0003e8 <decToBcd>
1a000460:	b240      	sxtb	r0, r0
1a000462:	0124      	lsls	r4, r4, #4
1a000464:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
1a000468:	b264      	sxtb	r4, r4
1a00046a:	4304      	orrs	r4, r0
1a00046c:	f88d 400c 	strb.w	r4, [sp, #12]
	i2cWrite(i2c,address,dato,5,TRUE );
1a000470:	2301      	movs	r3, #1
1a000472:	9300      	str	r3, [sp, #0]
1a000474:	2305      	movs	r3, #5
1a000476:	aa02      	add	r2, sp, #8
1a000478:	4631      	mov	r1, r6
1a00047a:	b2e8      	uxtb	r0, r5
1a00047c:	f001 fed1 	bl	1a002222 <i2cWrite>
}
1a000480:	b005      	add	sp, #20
1a000482:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000484 <eeprom24C32I2cAddress>:
// MANAGEMENT
//-----------------------------------------------------------------------------

uint8_t eeprom24C32I2cAddress( Eeprom24C32_t* eeprom )
{
	bool_t a0 = eeprom->A0;
1a000484:	7903      	ldrb	r3, [r0, #4]
	bool_t a1 = eeprom->A1;
1a000486:	7942      	ldrb	r2, [r0, #5]
	bool_t a2 = eeprom->A2;
1a000488:	7980      	ldrb	r0, [r0, #6]

	//                0b1010               A2        A1       A0
	return (EEPROM24C32_CTRL_CODE<<3) | (a2<<2) | (a1<<1) | (a0<<0);
1a00048a:	0080      	lsls	r0, r0, #2
1a00048c:	f040 0050 	orr.w	r0, r0, #80	; 0x50
1a000490:	b240      	sxtb	r0, r0
1a000492:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
1a000496:	b240      	sxtb	r0, r0
1a000498:	4318      	orrs	r0, r3
}
1a00049a:	b2c0      	uxtb	r0, r0
1a00049c:	4770      	bx	lr

1a00049e <eeprom24C32Init>:
//-----------------------------------------------------------------------------

bool_t eeprom24C32Init( Eeprom24C32_t* eeprom, int32_t i2c, bool_t A0, bool_t A1, bool_t A2, int32_t pageSize, int32_t memorySize)
{
	// I2C port connected to EEPROM, example I2C0
	eeprom->i2c = i2c;
1a00049e:	6001      	str	r1, [r0, #0]
	// Use this if fixed address
	eeprom->A0 = A0;
1a0004a0:	7102      	strb	r2, [r0, #4]
	eeprom->A1 = A1;
1a0004a2:	7143      	strb	r3, [r0, #5]
	eeprom->A2 = A2;
1a0004a4:	f89d 3000 	ldrb.w	r3, [sp]
1a0004a8:	7183      	strb	r3, [r0, #6]
	// EEPROM capacity
	eeprom->pageSize = pageSize;
1a0004aa:	9b01      	ldr	r3, [sp, #4]
1a0004ac:	6183      	str	r3, [r0, #24]
	eeprom->memorySize = memorySize;
1a0004ae:	9b02      	ldr	r3, [sp, #8]
1a0004b0:	61c3      	str	r3, [r0, #28]

	return TRUE; //retVal;
}
1a0004b2:	2001      	movs	r0, #1
1a0004b4:	4770      	bx	lr

1a0004b6 <eeprom24C32GetCurrentAddress>:

	return retVal; // Byte writed
}

uint16_t eeprom24C32GetCurrentAddress( Eeprom24C32_t* eeprom)
{
1a0004b6:	b530      	push	{r4, r5, lr}
1a0004b8:	b087      	sub	sp, #28
	bool_t retVal = TRUE; // True if OK
	uint8_t addressToRead[ 2 ];
	uint8_t readedByte[2]; // 2 bytes for memory address

	addressToRead[0] = EEPROM_ADDRESS_HIGH( EEPROM24C32_HEADER_POINTER );
1a0004ba:	2400      	movs	r4, #0
1a0004bc:	f88d 4014 	strb.w	r4, [sp, #20]
	addressToRead[1] = EEPROM_ADDRESS_LOW( EEPROM24C32_HEADER_POINTER );
1a0004c0:	f88d 4015 	strb.w	r4, [sp, #21]

	retVal = i2cRead( eeprom->i2c, eeprom24C32I2cAddress( eeprom), addressToRead, 2, FALSE, readedByte, 2, TRUE );
1a0004c4:	6805      	ldr	r5, [r0, #0]
1a0004c6:	f7ff ffdd 	bl	1a000484 <eeprom24C32I2cAddress>
1a0004ca:	2301      	movs	r3, #1
1a0004cc:	9303      	str	r3, [sp, #12]
1a0004ce:	2302      	movs	r3, #2
1a0004d0:	9302      	str	r3, [sp, #8]
1a0004d2:	aa04      	add	r2, sp, #16
1a0004d4:	9201      	str	r2, [sp, #4]
1a0004d6:	9400      	str	r4, [sp, #0]
1a0004d8:	aa05      	add	r2, sp, #20
1a0004da:	4601      	mov	r1, r0
1a0004dc:	b2e8      	uxtb	r0, r5
1a0004de:	f001 fe8c 	bl	1a0021fa <i2cRead>
1a0004e2:	4604      	mov	r4, r0

	eeprom24C32DelayMs(5);
1a0004e4:	2005      	movs	r0, #5
1a0004e6:	2100      	movs	r1, #0
1a0004e8:	f001 ffe0 	bl	1a0024ac <delayInaccurateMs>

	if(retVal)
1a0004ec:	b914      	cbnz	r4, 1a0004f4 <eeprom24C32GetCurrentAddress+0x3e>
	{
		return ((uint16_t)readedByte[0])<<8 | (uint16_t)readedByte[1];
	}

	return 0;
1a0004ee:	2000      	movs	r0, #0

}
1a0004f0:	b007      	add	sp, #28
1a0004f2:	bd30      	pop	{r4, r5, pc}
		return ((uint16_t)readedByte[0])<<8 | (uint16_t)readedByte[1];
1a0004f4:	f89d 3010 	ldrb.w	r3, [sp, #16]
1a0004f8:	f89d 0011 	ldrb.w	r0, [sp, #17]
1a0004fc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a000500:	e7f6      	b.n	1a0004f0 <eeprom24C32GetCurrentAddress+0x3a>

1a000502 <eeprom24C32WriteByte>:
	return retVal1 & retVal2;

}

bool_t eeprom24C32WriteByte( Eeprom24C32_t* eeprom, uint32_t memoryAddress, uint8_t byteToWrite )
{
1a000502:	b510      	push	{r4, lr}
1a000504:	b084      	sub	sp, #16
	bool_t retVal = TRUE; // True if OK

	// Check memory address
	if( memoryAddress > eeprom->memorySize ) {
1a000506:	69c3      	ldr	r3, [r0, #28]
1a000508:	428b      	cmp	r3, r1
1a00050a:	d203      	bcs.n	1a000514 <eeprom24C32WriteByte+0x12>
		return FALSE;
1a00050c:	2400      	movs	r4, #0
	retVal = i2cWrite( eeprom->i2c,	eeprom24C32I2cAddress( eeprom ), dataToWrite, 3, TRUE );

	eeprom24C32DelayMs(5); // Twc - Write cycle time (byte or page)

	return retVal; // Byte writed
}
1a00050e:	4620      	mov	r0, r4
1a000510:	b004      	add	sp, #16
1a000512:	bd10      	pop	{r4, pc}
	dataToWrite[0] = EEPROM_ADDRESS_HIGH( memoryAddress );
1a000514:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a000518:	f88d 300c 	strb.w	r3, [sp, #12]
	dataToWrite[1] = EEPROM_ADDRESS_LOW( memoryAddress );
1a00051c:	f88d 100d 	strb.w	r1, [sp, #13]
	dataToWrite[2] = (uint8_t)byteToWrite;
1a000520:	f88d 200e 	strb.w	r2, [sp, #14]
	retVal = i2cWrite( eeprom->i2c,	eeprom24C32I2cAddress( eeprom ), dataToWrite, 3, TRUE );
1a000524:	6804      	ldr	r4, [r0, #0]
1a000526:	f7ff ffad 	bl	1a000484 <eeprom24C32I2cAddress>
1a00052a:	2301      	movs	r3, #1
1a00052c:	9300      	str	r3, [sp, #0]
1a00052e:	2303      	movs	r3, #3
1a000530:	aa03      	add	r2, sp, #12
1a000532:	4601      	mov	r1, r0
1a000534:	b2e0      	uxtb	r0, r4
1a000536:	f001 fe74 	bl	1a002222 <i2cWrite>
1a00053a:	4604      	mov	r4, r0
	eeprom24C32DelayMs(5); // Twc - Write cycle time (byte or page)
1a00053c:	2005      	movs	r0, #5
1a00053e:	2100      	movs	r1, #0
1a000540:	f001 ffb4 	bl	1a0024ac <delayInaccurateMs>
	return retVal; // Byte writed
1a000544:	e7e3      	b.n	1a00050e <eeprom24C32WriteByte+0xc>

1a000546 <eeprom24C32UpdateDataAddress>:
{
1a000546:	b570      	push	{r4, r5, r6, lr}
1a000548:	4606      	mov	r6, r0
1a00054a:	460d      	mov	r5, r1
	retVal1 = eeprom24C32WriteByte(eeprom, EEPROM24C32_HEADER_POINTER,     EEPROM_ADDRESS_HIGH(address));
1a00054c:	0a0a      	lsrs	r2, r1, #8
1a00054e:	2100      	movs	r1, #0
1a000550:	f7ff ffd7 	bl	1a000502 <eeprom24C32WriteByte>
1a000554:	4604      	mov	r4, r0
	retVal2 = eeprom24C32WriteByte(eeprom, EEPROM24C32_HEADER_POINTER + 1, EEPROM_ADDRESS_LOW (address));
1a000556:	b2ea      	uxtb	r2, r5
1a000558:	2101      	movs	r1, #1
1a00055a:	4630      	mov	r0, r6
1a00055c:	f7ff ffd1 	bl	1a000502 <eeprom24C32WriteByte>
	return retVal1 & retVal2;
1a000560:	4020      	ands	r0, r4
}
1a000562:	b2c0      	uxtb	r0, r0
1a000564:	bd70      	pop	{r4, r5, r6, pc}

1a000566 <eeprom24C32ReadRandom>:
	return retVal; // read correct
}

// Random Read
bool_t eeprom24C32ReadRandom( Eeprom24C32_t* eeprom, uint32_t memoryAddress, uint8_t* readedByte )
{
1a000566:	b530      	push	{r4, r5, lr}
1a000568:	b087      	sub	sp, #28
	bool_t retVal = TRUE; // True if OK

	// Check memory address
	if( memoryAddress > eeprom->memorySize ) {
1a00056a:	69c3      	ldr	r3, [r0, #28]
1a00056c:	428b      	cmp	r3, r1
1a00056e:	d203      	bcs.n	1a000578 <eeprom24C32ReadRandom+0x12>
		return FALSE;
1a000570:	2400      	movs	r4, #0

	eeprom24C32DelayMs(5);

	//eeprom24C32DelayMs(1); // ??? - Read cycle time (byte or page)
	return retVal; // read correct
}
1a000572:	4620      	mov	r0, r4
1a000574:	b007      	add	sp, #28
1a000576:	bd30      	pop	{r4, r5, pc}
1a000578:	4614      	mov	r4, r2
	addressToRead[0] = EEPROM_ADDRESS_HIGH( memoryAddress );
1a00057a:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a00057e:	f88d 3014 	strb.w	r3, [sp, #20]
	addressToRead[1] = EEPROM_ADDRESS_LOW( memoryAddress );
1a000582:	f88d 1015 	strb.w	r1, [sp, #21]
	retVal = i2cRead( eeprom->i2c, eeprom24C32I2cAddress( eeprom ), addressToRead, 2, FALSE, readedByte, 1, TRUE );
1a000586:	6805      	ldr	r5, [r0, #0]
1a000588:	f7ff ff7c 	bl	1a000484 <eeprom24C32I2cAddress>
1a00058c:	2301      	movs	r3, #1
1a00058e:	9303      	str	r3, [sp, #12]
1a000590:	9302      	str	r3, [sp, #8]
1a000592:	9401      	str	r4, [sp, #4]
1a000594:	2300      	movs	r3, #0
1a000596:	9300      	str	r3, [sp, #0]
1a000598:	2302      	movs	r3, #2
1a00059a:	aa05      	add	r2, sp, #20
1a00059c:	4601      	mov	r1, r0
1a00059e:	b2e8      	uxtb	r0, r5
1a0005a0:	f001 fe2b 	bl	1a0021fa <i2cRead>
1a0005a4:	4604      	mov	r4, r0
	eeprom24C32DelayMs(5);
1a0005a6:	2005      	movs	r0, #5
1a0005a8:	2100      	movs	r1, #0
1a0005aa:	f001 ff7f 	bl	1a0024ac <delayInaccurateMs>
	return retVal; // read correct
1a0005ae:	e7e0      	b.n	1a000572 <eeprom24C32ReadRandom+0xc>

1a0005b0 <pauses>:

/*==================[internal functions definition]==========================*/

static void pauses(uint32_t t)
{
    DWT_CTRL |= 1;
1a0005b0:	4a0a      	ldr	r2, [pc, #40]	; (1a0005dc <pauses+0x2c>)
1a0005b2:	6813      	ldr	r3, [r2, #0]
1a0005b4:	f043 0301 	orr.w	r3, r3, #1
1a0005b8:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT = 0;
1a0005ba:	4b09      	ldr	r3, [pc, #36]	; (1a0005e0 <pauses+0x30>)
1a0005bc:	2200      	movs	r2, #0
1a0005be:	601a      	str	r2, [r3, #0]
	t *= (SystemCoreClock/1000000);
1a0005c0:	4b08      	ldr	r3, [pc, #32]	; (1a0005e4 <pauses+0x34>)
1a0005c2:	681b      	ldr	r3, [r3, #0]
1a0005c4:	4a08      	ldr	r2, [pc, #32]	; (1a0005e8 <pauses+0x38>)
1a0005c6:	fba2 2303 	umull	r2, r3, r2, r3
1a0005ca:	0c9b      	lsrs	r3, r3, #18
1a0005cc:	fb00 f003 	mul.w	r0, r0, r3

	while(DWT_CYCCNT < t);
1a0005d0:	4b03      	ldr	r3, [pc, #12]	; (1a0005e0 <pauses+0x30>)
1a0005d2:	681b      	ldr	r3, [r3, #0]
1a0005d4:	4283      	cmp	r3, r0
1a0005d6:	d3fb      	bcc.n	1a0005d0 <pauses+0x20>

}
1a0005d8:	4770      	bx	lr
1a0005da:	bf00      	nop
1a0005dc:	e0001000 	.word	0xe0001000
1a0005e0:	e0001004 	.word	0xe0001004
1a0005e4:	10000a88 	.word	0x10000a88
1a0005e8:	431bde83 	.word	0x431bde83

1a0005ec <owCrc>:

static uint8_t owCrc(uint8_t code[], uint8_t n)
{
1a0005ec:	b082      	sub	sp, #8
	volatile uint8_t i, j, a, b, cy=0, crc=0;
1a0005ee:	2300      	movs	r3, #0
1a0005f0:	f88d 3003 	strb.w	r3, [sp, #3]
1a0005f4:	f88d 3002 	strb.w	r3, [sp, #2]

	for(i=0; i<n; i++)
1a0005f8:	f88d 3007 	strb.w	r3, [sp, #7]
1a0005fc:	e06c      	b.n	1a0006d8 <owCrc+0xec>
				a >>= 1;
				a |= 0x80;
			}
			else
			{
				cy = a&1;
1a0005fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a000602:	f003 0301 	and.w	r3, r3, #1
1a000606:	f88d 3003 	strb.w	r3, [sp, #3]
				a >>= 1;
1a00060a:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a00060e:	085b      	lsrs	r3, r3, #1
1a000610:	f88d 3005 	strb.w	r3, [sp, #5]
1a000614:	e044      	b.n	1a0006a0 <owCrc+0xb4>
				b >>= 1;
				b |= 0x80;
			}
			else
			{
				b >>= 1;
1a000616:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a00061a:	085b      	lsrs	r3, r3, #1
1a00061c:	f88d 3004 	strb.w	r3, [sp, #4]
			}
			a = b;
1a000620:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a000624:	b2db      	uxtb	r3, r3
1a000626:	f88d 3005 	strb.w	r3, [sp, #5]
		for(j=0; j<8; j++)
1a00062a:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a00062e:	3301      	adds	r3, #1
1a000630:	b2db      	uxtb	r3, r3
1a000632:	f88d 3006 	strb.w	r3, [sp, #6]
1a000636:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a00063a:	b2db      	uxtb	r3, r3
1a00063c:	2b07      	cmp	r3, #7
1a00063e:	d845      	bhi.n	1a0006cc <owCrc+0xe0>
			a ^= crc;
1a000640:	f89d 2002 	ldrb.w	r2, [sp, #2]
1a000644:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a000648:	4053      	eors	r3, r2
1a00064a:	f88d 3005 	strb.w	r3, [sp, #5]
			cy = a&1;
1a00064e:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a000652:	f003 0301 	and.w	r3, r3, #1
1a000656:	f88d 3003 	strb.w	r3, [sp, #3]
			a = crc;
1a00065a:	f89d 3002 	ldrb.w	r3, [sp, #2]
1a00065e:	b2db      	uxtb	r3, r3
1a000660:	f88d 3005 	strb.w	r3, [sp, #5]
			if(cy)
1a000664:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a000668:	b12b      	cbz	r3, 1a000676 <owCrc+0x8a>
				a ^= 0x18;
1a00066a:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a00066e:	f083 0318 	eor.w	r3, r3, #24
1a000672:	f88d 3005 	strb.w	r3, [sp, #5]
			if(cy)
1a000676:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00067a:	2b00      	cmp	r3, #0
1a00067c:	d0bf      	beq.n	1a0005fe <owCrc+0x12>
				cy = a&1;
1a00067e:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a000682:	f003 0301 	and.w	r3, r3, #1
1a000686:	f88d 3003 	strb.w	r3, [sp, #3]
				a >>= 1;
1a00068a:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a00068e:	085b      	lsrs	r3, r3, #1
1a000690:	f88d 3005 	strb.w	r3, [sp, #5]
				a |= 0x80;
1a000694:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a000698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00069c:	f88d 3005 	strb.w	r3, [sp, #5]
			crc = a;
1a0006a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a0006a4:	b2db      	uxtb	r3, r3
1a0006a6:	f88d 3002 	strb.w	r3, [sp, #2]
			if(b&1)
1a0006aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a0006ae:	f013 0f01 	tst.w	r3, #1
1a0006b2:	d0b0      	beq.n	1a000616 <owCrc+0x2a>
				b >>= 1;
1a0006b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a0006b8:	085b      	lsrs	r3, r3, #1
1a0006ba:	f88d 3004 	strb.w	r3, [sp, #4]
				b |= 0x80;
1a0006be:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a0006c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0006c6:	f88d 3004 	strb.w	r3, [sp, #4]
1a0006ca:	e7a9      	b.n	1a000620 <owCrc+0x34>
	for(i=0; i<n; i++)
1a0006cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0006d0:	3301      	adds	r3, #1
1a0006d2:	b2db      	uxtb	r3, r3
1a0006d4:	f88d 3007 	strb.w	r3, [sp, #7]
1a0006d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0006dc:	b2db      	uxtb	r3, r3
1a0006de:	428b      	cmp	r3, r1
1a0006e0:	d20f      	bcs.n	1a000702 <owCrc+0x116>
		a = code[i];
1a0006e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0006e6:	b2db      	uxtb	r3, r3
1a0006e8:	5cc3      	ldrb	r3, [r0, r3]
1a0006ea:	f88d 3005 	strb.w	r3, [sp, #5]
		b = code[i];
1a0006ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0006f2:	b2db      	uxtb	r3, r3
1a0006f4:	5cc3      	ldrb	r3, [r0, r3]
1a0006f6:	f88d 3004 	strb.w	r3, [sp, #4]
		for(j=0; j<8; j++)
1a0006fa:	2300      	movs	r3, #0
1a0006fc:	f88d 3006 	strb.w	r3, [sp, #6]
1a000700:	e799      	b.n	1a000636 <owCrc+0x4a>
		}
	}
	return crc;
1a000702:	f89d 0002 	ldrb.w	r0, [sp, #2]
}
1a000706:	b002      	add	sp, #8
1a000708:	4770      	bx	lr
1a00070a:	Address 0x000000001a00070a is out of bounds.


1a00070c <owPresence>:

static int owPresence(int port, int pin)
{
1a00070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000710:	b2c4      	uxtb	r4, r0
1a000712:	4e17      	ldr	r6, [pc, #92]	; (1a000770 <owPresence+0x64>)
1a000714:	f504 6800 	add.w	r8, r4, #2048	; 0x800
1a000718:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
1a00071c:	b2cd      	uxtb	r5, r1
1a00071e:	2701      	movs	r7, #1
1a000720:	40af      	lsls	r7, r5
1a000722:	433b      	orrs	r3, r7
1a000724:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a000728:	f504 630a 	add.w	r3, r4, #2208	; 0x8a0
1a00072c:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
	owOUT(port,pin);
	owLOW(port,pin);
	pauses(480);
1a000730:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
1a000734:	f7ff ff3c 	bl	1a0005b0 <pauses>
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000738:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
1a00073c:	ea23 0707 	bic.w	r7, r3, r7
1a000740:	f846 7028 	str.w	r7, [r6, r8, lsl #2]
	owIN(port,pin);
	pauses(40);
1a000744:	2028      	movs	r0, #40	; 0x28
1a000746:	f7ff ff33 	bl	1a0005b0 <pauses>
	return (bool) pGPIO->B[port][pin];
1a00074a:	eb06 1644 	add.w	r6, r6, r4, lsl #5
1a00074e:	5d73      	ldrb	r3, [r6, r5]

	if(owREAD(port,pin)==true)
1a000750:	b953      	cbnz	r3, 1a000768 <owPresence+0x5c>
1a000752:	0163      	lsls	r3, r4, #5
1a000754:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a000758:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00075c:	5d5b      	ldrb	r3, [r3, r5]
	{
		return -1;
	}
	else
	{
		while(owREAD(port,pin)==false);
1a00075e:	2b00      	cmp	r3, #0
1a000760:	d0f7      	beq.n	1a000752 <owPresence+0x46>
		return 0;
1a000762:	2000      	movs	r0, #0
	}
}
1a000764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
1a000768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00076c:	e7fa      	b.n	1a000764 <owPresence+0x58>
1a00076e:	bf00      	nop
1a000770:	400f4000 	.word	0x400f4000

1a000774 <owCmd>:

static void owCmd(uint8_t cmd, void * buffer, uint8_t n, int port, int pin)
{
1a000774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000778:	b083      	sub	sp, #12
1a00077a:	4604      	mov	r4, r0
1a00077c:	460e      	mov	r6, r1
1a00077e:	4691      	mov	r9, r2
	volatile uint8_t i = 1, j;
1a000780:	f04f 0801 	mov.w	r8, #1
1a000784:	f88d 8007 	strb.w	r8, [sp, #7]
	pGPIO->DIR[port] |= 1UL << pin;
1a000788:	b2dd      	uxtb	r5, r3
1a00078a:	4a4f      	ldr	r2, [pc, #316]	; (1a0008c8 <owCmd+0x154>)
1a00078c:	f505 6100 	add.w	r1, r5, #2048	; 0x800
1a000790:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1a000794:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
1a000798:	fa08 f807 	lsl.w	r8, r8, r7
1a00079c:	ea43 0308 	orr.w	r3, r3, r8
1a0007a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
1a0007a4:	e021      	b.n	1a0007ea <owCmd+0x76>
	pGPIO->CLR[port] = (1 << pin);
1a0007a6:	f04f 0a01 	mov.w	sl, #1
1a0007aa:	fa0a fa07 	lsl.w	sl, sl, r7
1a0007ae:	f8df b118 	ldr.w	fp, [pc, #280]	; 1a0008c8 <owCmd+0x154>
1a0007b2:	f505 630a 	add.w	r3, r5, #2208	; 0x8a0
1a0007b6:	f84b a023 	str.w	sl, [fp, r3, lsl #2]
			pauses(60);
		}
		else
		{
			owLOW(port,pin);
			pauses(60);
1a0007ba:	203c      	movs	r0, #60	; 0x3c
1a0007bc:	f7ff fef8 	bl	1a0005b0 <pauses>
	pGPIO->SET[port] = (1 << pin);
1a0007c0:	f505 6308 	add.w	r3, r5, #2176	; 0x880
1a0007c4:	f84b a023 	str.w	sl, [fp, r3, lsl #2]
			owHIGH(port,pin);
			pauses(10);
1a0007c8:	200a      	movs	r0, #10
1a0007ca:	f7ff fef1 	bl	1a0005b0 <pauses>
		}
		if(i==0x80)
1a0007ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0007d2:	b2db      	uxtb	r3, r3
1a0007d4:	2b80      	cmp	r3, #128	; 0x80
1a0007d6:	d021      	beq.n	1a00081c <owCmd+0xa8>
		{
			break;
		}
		else
		{
			i <<= 1;
1a0007d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0007dc:	005b      	lsls	r3, r3, #1
1a0007de:	b2db      	uxtb	r3, r3
1a0007e0:	f88d 3007 	strb.w	r3, [sp, #7]
		}
	}while(i != 0);
1a0007e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0007e8:	b1c3      	cbz	r3, 1a00081c <owCmd+0xa8>
		if(cmd & i)
1a0007ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0007ee:	4223      	tst	r3, r4
1a0007f0:	d0d9      	beq.n	1a0007a6 <owCmd+0x32>
	pGPIO->CLR[port] = (1 << pin);
1a0007f2:	f04f 0a01 	mov.w	sl, #1
1a0007f6:	fa0a fa07 	lsl.w	sl, sl, r7
1a0007fa:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1a0008c8 <owCmd+0x154>
1a0007fe:	f505 630a 	add.w	r3, r5, #2208	; 0x8a0
1a000802:	f84b a023 	str.w	sl, [fp, r3, lsl #2]
			pauses(3);
1a000806:	2003      	movs	r0, #3
1a000808:	f7ff fed2 	bl	1a0005b0 <pauses>
	pGPIO->SET[port] = (1 << pin);
1a00080c:	f505 6308 	add.w	r3, r5, #2176	; 0x880
1a000810:	f84b a023 	str.w	sl, [fp, r3, lsl #2]
			pauses(60);
1a000814:	203c      	movs	r0, #60	; 0x3c
1a000816:	f7ff fecb 	bl	1a0005b0 <pauses>
1a00081a:	e7d8      	b.n	1a0007ce <owCmd+0x5a>

	for(i=0; i<n; i++)
1a00081c:	2300      	movs	r3, #0
1a00081e:	f88d 3007 	strb.w	r3, [sp, #7]
1a000822:	e041      	b.n	1a0008a8 <owCmd+0x134>
			pauses(3);
			owIN(port,pin);
			pauses(12);
			p[i] >>= 1;
			if(owREAD(port,pin)) p[i] |= 0x80;
			pauses(55);
1a000824:	2037      	movs	r0, #55	; 0x37
1a000826:	f7ff fec3 	bl	1a0005b0 <pauses>
		for(j=0; j<8; j++)
1a00082a:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a00082e:	3301      	adds	r3, #1
1a000830:	b2db      	uxtb	r3, r3
1a000832:	f88d 3006 	strb.w	r3, [sp, #6]
1a000836:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a00083a:	b2db      	uxtb	r3, r3
1a00083c:	2b07      	cmp	r3, #7
1a00083e:	d82d      	bhi.n	1a00089c <owCmd+0x128>
	pGPIO->DIR[port] |= 1UL << pin;
1a000840:	4c21      	ldr	r4, [pc, #132]	; (1a0008c8 <owCmd+0x154>)
1a000842:	f505 6a00 	add.w	sl, r5, #2048	; 0x800
1a000846:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
1a00084a:	ea48 0303 	orr.w	r3, r8, r3
1a00084e:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
	pGPIO->CLR[port] = (1 << pin);
1a000852:	2301      	movs	r3, #1
1a000854:	40bb      	lsls	r3, r7
1a000856:	f505 620a 	add.w	r2, r5, #2208	; 0x8a0
1a00085a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
			pauses(3);
1a00085e:	2003      	movs	r0, #3
1a000860:	f7ff fea6 	bl	1a0005b0 <pauses>
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000864:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
1a000868:	ea23 0308 	bic.w	r3, r3, r8
1a00086c:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
			pauses(12);
1a000870:	200c      	movs	r0, #12
1a000872:	f7ff fe9d 	bl	1a0005b0 <pauses>
			p[i] >>= 1;
1a000876:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00087a:	b2db      	uxtb	r3, r3
1a00087c:	5cf2      	ldrb	r2, [r6, r3]
1a00087e:	0852      	lsrs	r2, r2, #1
1a000880:	54f2      	strb	r2, [r6, r3]
	return (bool) pGPIO->B[port][pin];
1a000882:	eb04 1445 	add.w	r4, r4, r5, lsl #5
1a000886:	5de3      	ldrb	r3, [r4, r7]
			if(owREAD(port,pin)) p[i] |= 0x80;
1a000888:	2b00      	cmp	r3, #0
1a00088a:	d0cb      	beq.n	1a000824 <owCmd+0xb0>
1a00088c:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000890:	b2db      	uxtb	r3, r3
1a000892:	5cf2      	ldrb	r2, [r6, r3]
1a000894:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000898:	54f2      	strb	r2, [r6, r3]
1a00089a:	e7c3      	b.n	1a000824 <owCmd+0xb0>
	for(i=0; i<n; i++)
1a00089c:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0008a0:	3301      	adds	r3, #1
1a0008a2:	b2db      	uxtb	r3, r3
1a0008a4:	f88d 3007 	strb.w	r3, [sp, #7]
1a0008a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0008ac:	b2db      	uxtb	r3, r3
1a0008ae:	454b      	cmp	r3, r9
1a0008b0:	d207      	bcs.n	1a0008c2 <owCmd+0x14e>
		p[i] = 0;
1a0008b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0008b6:	b2db      	uxtb	r3, r3
1a0008b8:	2200      	movs	r2, #0
1a0008ba:	54f2      	strb	r2, [r6, r3]
		for(j=0; j<8; j++)
1a0008bc:	f88d 2006 	strb.w	r2, [sp, #6]
1a0008c0:	e7b9      	b.n	1a000836 <owCmd+0xc2>
		}
	}
}
1a0008c2:	b003      	add	sp, #12
1a0008c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0008c8:	400f4000 	.word	0x400f4000

1a0008cc <owInit>:

/*==================[external functions definition]==========================*/

void owInit(gpioMap_t gpioPin)
{
1a0008cc:	b410      	push	{r4}
	uint8_t port,pin;
	port=gpioPinsInit[gpioPin].gpio.port;
1a0008ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0008d2:	4b11      	ldr	r3, [pc, #68]	; (1a000918 <owInit+0x4c>)
1a0008d4:	4418      	add	r0, r3
1a0008d6:	f990 3003 	ldrsb.w	r3, [r0, #3]
1a0008da:	b2db      	uxtb	r3, r3
	pin=gpioPinsInit[gpioPin].gpio.pin;
1a0008dc:	f990 2004 	ldrsb.w	r2, [r0, #4]
1a0008e0:	b2d2      	uxtb	r2, r2

	/* Init cycle counter */
	DWT_CTRL |= 1;
1a0008e2:	480e      	ldr	r0, [pc, #56]	; (1a00091c <owInit+0x50>)
1a0008e4:	6801      	ldr	r1, [r0, #0]
1a0008e6:	f041 0101 	orr.w	r1, r1, #1
1a0008ea:	6001      	str	r1, [r0, #0]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0008ec:	eb02 1043 	add.w	r0, r2, r3, lsl #5
1a0008f0:	490b      	ldr	r1, [pc, #44]	; (1a000920 <owInit+0x54>)
1a0008f2:	2490      	movs	r4, #144	; 0x90
1a0008f4:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0008f8:	4c0a      	ldr	r4, [pc, #40]	; (1a000924 <owInit+0x58>)
1a0008fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0008fe:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
1a000902:	2001      	movs	r0, #1
1a000904:	fa00 f202 	lsl.w	r2, r0, r2
1a000908:	ea21 0202 	bic.w	r2, r1, r2
1a00090c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

    Chip_SCU_PinMux(port, pin, SCU_MODE_INACT | SCU_MODE_ZIF_DIS, SCU_MODE_FUNC0 );
    owIN(port,pin);
}
1a000910:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000914:	4770      	bx	lr
1a000916:	bf00      	nop
1a000918:	1a007914 	.word	0x1a007914
1a00091c:	e0001000 	.word	0xe0001000
1a000920:	40086000 	.word	0x40086000
1a000924:	400f4000 	.word	0x400f4000

1a000928 <owWriteScratch>:
	low_temp_alarm = alarm_low;
	return owWriteScratch(port, pin);
}

int owWriteScratch(int port, int pin)
{
1a000928:	b570      	push	{r4, r5, r6, lr}
1a00092a:	b086      	sub	sp, #24
1a00092c:	4605      	mov	r5, r0
1a00092e:	460c      	mov	r4, r1
	int rv = -1;
	uint8_t crc = 0;
	uint8_t p[9];

	if(owPresence(port,pin)==0)
1a000930:	f7ff feec 	bl	1a00070c <owPresence>
1a000934:	b118      	cbz	r0, 1a00093e <owWriteScratch+0x16>

		owIN(port,pin);
		while(owREAD(port,pin) == false); /* wait for end of conv */
	}
	return rv;
}
1a000936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00093a:	b006      	add	sp, #24
1a00093c:	bd70      	pop	{r4, r5, r6, pc}
		pauses(400);
1a00093e:	f44f 70c8 	mov.w	r0, #400	; 0x190
1a000942:	f7ff fe35 	bl	1a0005b0 <pauses>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1a000946:	2601      	movs	r6, #1
1a000948:	f386 8810 	msr	PRIMASK, r6
		owCmd(0x33, p, 8, port, pin); 		/* READ ROM CMD */
1a00094c:	9400      	str	r4, [sp, #0]
1a00094e:	462b      	mov	r3, r5
1a000950:	2208      	movs	r2, #8
1a000952:	a903      	add	r1, sp, #12
1a000954:	2033      	movs	r0, #51	; 0x33
1a000956:	f7ff ff0d 	bl	1a000774 <owCmd>
		owCmd(0x4E, p, 0, port, pin); 		/* WRITE SCRATCHPAD */
1a00095a:	9400      	str	r4, [sp, #0]
1a00095c:	462b      	mov	r3, r5
1a00095e:	2200      	movs	r2, #0
1a000960:	a903      	add	r1, sp, #12
1a000962:	204e      	movs	r0, #78	; 0x4e
1a000964:	f7ff ff06 	bl	1a000774 <owCmd>
		owCmd(high_temp_alarm, p, 0, port, pin); 	/* WRITE TH BYTE */
1a000968:	9400      	str	r4, [sp, #0]
1a00096a:	462b      	mov	r3, r5
1a00096c:	2200      	movs	r2, #0
1a00096e:	a903      	add	r1, sp, #12
1a000970:	481c      	ldr	r0, [pc, #112]	; (1a0009e4 <owWriteScratch+0xbc>)
1a000972:	7800      	ldrb	r0, [r0, #0]
1a000974:	f7ff fefe 	bl	1a000774 <owCmd>
		owCmd(low_temp_alarm, p, 0, port, pin); 	/* WRITE TL BYTE */
1a000978:	9400      	str	r4, [sp, #0]
1a00097a:	462b      	mov	r3, r5
1a00097c:	2200      	movs	r2, #0
1a00097e:	a903      	add	r1, sp, #12
1a000980:	4819      	ldr	r0, [pc, #100]	; (1a0009e8 <owWriteScratch+0xc0>)
1a000982:	7800      	ldrb	r0, [r0, #0]
1a000984:	f7ff fef6 	bl	1a000774 <owCmd>
		owCmd(bit_resolution, p, 0, port, pin); 	/* WRITE CONFIG BYTE */
1a000988:	9400      	str	r4, [sp, #0]
1a00098a:	462b      	mov	r3, r5
1a00098c:	2200      	movs	r2, #0
1a00098e:	a903      	add	r1, sp, #12
1a000990:	4816      	ldr	r0, [pc, #88]	; (1a0009ec <owWriteScratch+0xc4>)
1a000992:	7800      	ldrb	r0, [r0, #0]
1a000994:	f7ff feee 	bl	1a000774 <owCmd>
		owCmd(0x33, p, 8, port, pin);		/* READ ROM CMD */
1a000998:	9400      	str	r4, [sp, #0]
1a00099a:	462b      	mov	r3, r5
1a00099c:	2208      	movs	r2, #8
1a00099e:	a903      	add	r1, sp, #12
1a0009a0:	2033      	movs	r0, #51	; 0x33
1a0009a2:	f7ff fee7 	bl	1a000774 <owCmd>
		owCmd(0x48, p, 0, port, pin); 		/* COPY SCRATCHPAD */
1a0009a6:	9400      	str	r4, [sp, #0]
1a0009a8:	462b      	mov	r3, r5
1a0009aa:	2200      	movs	r2, #0
1a0009ac:	a903      	add	r1, sp, #12
1a0009ae:	2048      	movs	r0, #72	; 0x48
1a0009b0:	f7ff fee0 	bl	1a000774 <owCmd>
1a0009b4:	2300      	movs	r3, #0
1a0009b6:	f383 8810 	msr	PRIMASK, r3
1a0009ba:	b2eb      	uxtb	r3, r5
1a0009bc:	480c      	ldr	r0, [pc, #48]	; (1a0009f0 <owWriteScratch+0xc8>)
1a0009be:	f503 6500 	add.w	r5, r3, #2048	; 0x800
1a0009c2:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
1a0009c6:	b2e1      	uxtb	r1, r4
1a0009c8:	408e      	lsls	r6, r1
1a0009ca:	ea22 0606 	bic.w	r6, r2, r6
1a0009ce:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	return (bool) pGPIO->B[port][pin];
1a0009d2:	015a      	lsls	r2, r3, #5
1a0009d4:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
1a0009d8:	f502 2270 	add.w	r2, r2, #983040	; 0xf0000
1a0009dc:	5c52      	ldrb	r2, [r2, r1]
		while(owREAD(port,pin) == false); /* wait for end of conv */
1a0009de:	2a00      	cmp	r2, #0
1a0009e0:	d0f7      	beq.n	1a0009d2 <owWriteScratch+0xaa>
1a0009e2:	e7a8      	b.n	1a000936 <owWriteScratch+0xe>
1a0009e4:	10000001 	.word	0x10000001
1a0009e8:	10000002 	.word	0x10000002
1a0009ec:	10000000 	.word	0x10000000
1a0009f0:	400f4000 	.word	0x400f4000

1a0009f4 <owSetBitResolution>:
{
1a0009f4:	b508      	push	{r3, lr}
	port=gpioPinsInit[gpioPin].gpio.port;
1a0009f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0009fa:	4b13      	ldr	r3, [pc, #76]	; (1a000a48 <owSetBitResolution+0x54>)
1a0009fc:	4403      	add	r3, r0
1a0009fe:	f993 0003 	ldrsb.w	r0, [r3, #3]
1a000a02:	b2c0      	uxtb	r0, r0
	pin=gpioPinsInit[gpioPin].gpio.pin;
1a000a04:	f993 3004 	ldrsb.w	r3, [r3, #4]
1a000a08:	b2db      	uxtb	r3, r3
	switch(res)
1a000a0a:	3909      	subs	r1, #9
1a000a0c:	2903      	cmp	r1, #3
1a000a0e:	d816      	bhi.n	1a000a3e <owSetBitResolution+0x4a>
1a000a10:	e8df f001 	tbb	[pc, r1]
1a000a14:	110d0902 	.word	0x110d0902
			bit_resolution = RES_9_BIT;
1a000a18:	4a0c      	ldr	r2, [pc, #48]	; (1a000a4c <owSetBitResolution+0x58>)
1a000a1a:	211f      	movs	r1, #31
1a000a1c:	7011      	strb	r1, [r2, #0]
	return owWriteScratch(port, pin);
1a000a1e:	4619      	mov	r1, r3
1a000a20:	f7ff ff82 	bl	1a000928 <owWriteScratch>
}
1a000a24:	bd08      	pop	{r3, pc}
			bit_resolution = RES_10_BIT;
1a000a26:	4a09      	ldr	r2, [pc, #36]	; (1a000a4c <owSetBitResolution+0x58>)
1a000a28:	213f      	movs	r1, #63	; 0x3f
1a000a2a:	7011      	strb	r1, [r2, #0]
			break;
1a000a2c:	e7f7      	b.n	1a000a1e <owSetBitResolution+0x2a>
			bit_resolution = RES_11_BIT;
1a000a2e:	4a07      	ldr	r2, [pc, #28]	; (1a000a4c <owSetBitResolution+0x58>)
1a000a30:	215f      	movs	r1, #95	; 0x5f
1a000a32:	7011      	strb	r1, [r2, #0]
			break;
1a000a34:	e7f3      	b.n	1a000a1e <owSetBitResolution+0x2a>
			bit_resolution = RES_12_BIT;
1a000a36:	4a05      	ldr	r2, [pc, #20]	; (1a000a4c <owSetBitResolution+0x58>)
1a000a38:	217f      	movs	r1, #127	; 0x7f
1a000a3a:	7011      	strb	r1, [r2, #0]
			break;
1a000a3c:	e7ef      	b.n	1a000a1e <owSetBitResolution+0x2a>
			bit_resolution = RES_9_BIT;
1a000a3e:	4a03      	ldr	r2, [pc, #12]	; (1a000a4c <owSetBitResolution+0x58>)
1a000a40:	211f      	movs	r1, #31
1a000a42:	7011      	strb	r1, [r2, #0]
			break;
1a000a44:	e7eb      	b.n	1a000a1e <owSetBitResolution+0x2a>
1a000a46:	bf00      	nop
1a000a48:	1a007914 	.word	0x1a007914
1a000a4c:	10000000 	.word	0x10000000

1a000a50 <owReadTemperature>:

int owReadTemperature(gpioMap_t gpioPin)
{
1a000a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000a54:	b086      	sub	sp, #24
	uint8_t port,pin;
	port=gpioPinsInit[gpioPin].gpio.port;
1a000a56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000a5a:	4b3f      	ldr	r3, [pc, #252]	; (1a000b58 <owReadTemperature+0x108>)
1a000a5c:	4418      	add	r0, r3
1a000a5e:	f990 4003 	ldrsb.w	r4, [r0, #3]
1a000a62:	b2e4      	uxtb	r4, r4
	pin=gpioPinsInit[gpioPin].gpio.pin;
1a000a64:	f990 5004 	ldrsb.w	r5, [r0, #4]
1a000a68:	b2ed      	uxtb	r5, r5

	volatile int rv = -1;
1a000a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000a6e:	9305      	str	r3, [sp, #20]
	volatile uint8_t crc = 0;
1a000a70:	2300      	movs	r3, #0
1a000a72:	f88d 3013 	strb.w	r3, [sp, #19]
	volatile uint8_t p[9];

	if(owPresence(port,pin)==0)
1a000a76:	4629      	mov	r1, r5
1a000a78:	4620      	mov	r0, r4
1a000a7a:	f7ff fe47 	bl	1a00070c <owPresence>
1a000a7e:	b118      	cbz	r0, 1a000a88 <owReadTemperature+0x38>
			rv = p[1];
			rv <<= 8;
			rv |= p[0];
		}
	}
	return rv;
1a000a80:	9805      	ldr	r0, [sp, #20]
}
1a000a82:	b006      	add	sp, #24
1a000a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000a88:	4626      	mov	r6, r4
1a000a8a:	462f      	mov	r7, r5
		pauses(400);
1a000a8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
1a000a90:	f7ff fd8e 	bl	1a0005b0 <pauses>
1a000a94:	f04f 0801 	mov.w	r8, #1
1a000a98:	f388 8810 	msr	PRIMASK, r8
		owCmd(0x33, p, 8, port, pin); /* READ ROM CMD */
1a000a9c:	9500      	str	r5, [sp, #0]
1a000a9e:	4623      	mov	r3, r4
1a000aa0:	2208      	movs	r2, #8
1a000aa2:	eb0d 0102 	add.w	r1, sp, r2
1a000aa6:	2033      	movs	r0, #51	; 0x33
1a000aa8:	f7ff fe64 	bl	1a000774 <owCmd>
		owCmd(0x44, p, 0, port, pin); /* START CONVERSION */
1a000aac:	9500      	str	r5, [sp, #0]
1a000aae:	4623      	mov	r3, r4
1a000ab0:	2200      	movs	r2, #0
1a000ab2:	a902      	add	r1, sp, #8
1a000ab4:	2044      	movs	r0, #68	; 0x44
1a000ab6:	f7ff fe5d 	bl	1a000774 <owCmd>
1a000aba:	2300      	movs	r3, #0
1a000abc:	f383 8810 	msr	PRIMASK, r3
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000ac0:	4a26      	ldr	r2, [pc, #152]	; (1a000b5c <owReadTemperature+0x10c>)
1a000ac2:	f504 6100 	add.w	r1, r4, #2048	; 0x800
1a000ac6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1a000aca:	fa08 f805 	lsl.w	r8, r8, r5
1a000ace:	ea23 0308 	bic.w	r3, r3, r8
1a000ad2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return (bool) pGPIO->B[port][pin];
1a000ad6:	0173      	lsls	r3, r6, #5
1a000ad8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a000adc:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a000ae0:	5ddb      	ldrb	r3, [r3, r7]
		while(owREAD(port,pin) == false); /* wait for end of conv */
1a000ae2:	2b00      	cmp	r3, #0
1a000ae4:	d0f7      	beq.n	1a000ad6 <owReadTemperature+0x86>
		owPresence(port,pin);
1a000ae6:	4629      	mov	r1, r5
1a000ae8:	4620      	mov	r0, r4
1a000aea:	f7ff fe0f 	bl	1a00070c <owPresence>
		pauses(400);
1a000aee:	f44f 70c8 	mov.w	r0, #400	; 0x190
1a000af2:	f7ff fd5d 	bl	1a0005b0 <pauses>
1a000af6:	2301      	movs	r3, #1
1a000af8:	f383 8810 	msr	PRIMASK, r3
		owCmd(0x33, p, 8, port, pin); /* READ ROM CMD */
1a000afc:	9500      	str	r5, [sp, #0]
1a000afe:	4623      	mov	r3, r4
1a000b00:	2208      	movs	r2, #8
1a000b02:	eb0d 0102 	add.w	r1, sp, r2
1a000b06:	2033      	movs	r0, #51	; 0x33
1a000b08:	f7ff fe34 	bl	1a000774 <owCmd>
		owCmd(0xBE, p, 9, port, pin); /* READ SCRATCH */
1a000b0c:	9500      	str	r5, [sp, #0]
1a000b0e:	4623      	mov	r3, r4
1a000b10:	2209      	movs	r2, #9
1a000b12:	a902      	add	r1, sp, #8
1a000b14:	20be      	movs	r0, #190	; 0xbe
1a000b16:	f7ff fe2d 	bl	1a000774 <owCmd>
1a000b1a:	2300      	movs	r3, #0
1a000b1c:	f383 8810 	msr	PRIMASK, r3
		crc = owCrc(p, 8);
1a000b20:	2108      	movs	r1, #8
1a000b22:	eb0d 0001 	add.w	r0, sp, r1
1a000b26:	f7ff fd61 	bl	1a0005ec <owCrc>
1a000b2a:	f88d 0013 	strb.w	r0, [sp, #19]
		if(crc == p[8])
1a000b2e:	f89d 2010 	ldrb.w	r2, [sp, #16]
1a000b32:	b2d2      	uxtb	r2, r2
1a000b34:	f89d 3013 	ldrb.w	r3, [sp, #19]
1a000b38:	b2db      	uxtb	r3, r3
1a000b3a:	429a      	cmp	r2, r3
1a000b3c:	d1a0      	bne.n	1a000a80 <owReadTemperature+0x30>
			rv = p[1];
1a000b3e:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a000b42:	b2db      	uxtb	r3, r3
1a000b44:	9305      	str	r3, [sp, #20]
			rv <<= 8;
1a000b46:	9b05      	ldr	r3, [sp, #20]
1a000b48:	021b      	lsls	r3, r3, #8
1a000b4a:	9305      	str	r3, [sp, #20]
			rv |= p[0];
1a000b4c:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a000b50:	9a05      	ldr	r2, [sp, #20]
1a000b52:	4313      	orrs	r3, r2
1a000b54:	9305      	str	r3, [sp, #20]
1a000b56:	e793      	b.n	1a000a80 <owReadTemperature+0x30>
1a000b58:	1a007914 	.word	0x1a007914
1a000b5c:	400f4000 	.word	0x400f4000

1a000b60 <GPIO0_IRQHandler>:
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000b60:	2301      	movs	r3, #1
1a000b62:	4a02      	ldr	r2, [pc, #8]	; (1a000b6c <GPIO0_IRQHandler+0xc>)
1a000b64:	6253      	str	r3, [r2, #36]	; 0x24
}

void GPIO0_IRQHandler(void)
{
	Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT, PININTCH0); // Borramos el flag de interrupción
	flag = 1;
1a000b66:	4a02      	ldr	r2, [pc, #8]	; (1a000b70 <GPIO0_IRQHandler+0x10>)
1a000b68:	7013      	strb	r3, [r2, #0]
}
1a000b6a:	4770      	bx	lr
1a000b6c:	40087000 	.word	0x40087000
1a000b70:	100009f9 	.word	0x100009f9

1a000b74 <My_IRQ_Init>:
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000b74:	490c      	ldr	r1, [pc, #48]	; (1a000ba8 <My_IRQ_Init+0x34>)
1a000b76:	2201      	movs	r2, #1
1a000b78:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
 */
STATIC INLINE void Chip_SCU_GPIOIntPinSel(uint8_t PortSel, uint8_t PortNum, uint8_t PinNum)
{
	int32_t of = (PortSel & 3) << 3;
	uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
	LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a000b7c:	480b      	ldr	r0, [pc, #44]	; (1a000bac <My_IRQ_Init+0x38>)
1a000b7e:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
1a000b82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000b86:	f043 0364 	orr.w	r3, r3, #100	; 0x64
1a000b8a:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
1a000b8e:	4b08      	ldr	r3, [pc, #32]	; (1a000bb0 <My_IRQ_Init+0x3c>)
1a000b90:	625a      	str	r2, [r3, #36]	; 0x24
	pPININT->ISEL &= ~pins;
1a000b92:	6818      	ldr	r0, [r3, #0]
1a000b94:	f020 0001 	bic.w	r0, r0, #1
1a000b98:	6018      	str	r0, [r3, #0]
	pPININT->SIENF = pins;
1a000b9a:	615a      	str	r2, [r3, #20]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000b9c:	23a0      	movs	r3, #160	; 0xa0
1a000b9e:	f881 3320 	strb.w	r3, [r1, #800]	; 0x320
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000ba2:	604a      	str	r2, [r1, #4]
	Chip_PININT_SetPinModeEdge(LPC_GPIO_PIN_INT, PININTCH0);
	Chip_PININT_EnableIntLow(LPC_GPIO_PIN_INT, PININTCH0);

	NVIC_SetPriority(PIN_INT0_IRQn, 5);
	NVIC_EnableIRQ(PIN_INT0_IRQn);
}
1a000ba4:	4770      	bx	lr
1a000ba6:	bf00      	nop
1a000ba8:	e000e100 	.word	0xe000e100
1a000bac:	40086000 	.word	0x40086000
1a000bb0:	40087000 	.word	0x40087000

1a000bb4 <main>:
{
1a000bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000bb8:	b090      	sub	sp, #64	; 0x40
	boardInit();
1a000bba:	f001 fc3d 	bl	1a002438 <boardInit>
	gpioConfig( GPIO2, GPIO_INPUT_PULLUP);
1a000bbe:	2102      	movs	r1, #2
1a000bc0:	201f      	movs	r0, #31
1a000bc2:	f001 fb55 	bl	1a002270 <gpioInit>
	gpioConfig( SENSOR_TEMP_SUCIO, GPIO_INPUT );
1a000bc6:	2100      	movs	r1, #0
1a000bc8:	200c      	movs	r0, #12
1a000bca:	f001 fb51 	bl	1a002270 <gpioInit>
	debugPrintConfigUart( UART_USB, 115200 );
1a000bce:	4ca4      	ldr	r4, [pc, #656]	; (1a000e60 <main+0x2ac>)
1a000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000bd4:	2103      	movs	r1, #3
1a000bd6:	4620      	mov	r0, r4
1a000bd8:	f001 fc95 	bl	1a002506 <printInitUart>
	i2cInit( I2C0, 100000 );
1a000bdc:	49a1      	ldr	r1, [pc, #644]	; (1a000e64 <main+0x2b0>)
1a000bde:	2000      	movs	r0, #0
1a000be0:	f001 fb04 	bl	1a0021ec <i2cInit>
	debugPrintlnString( "I2C initialization complete." );
1a000be4:	49a0      	ldr	r1, [pc, #640]	; (1a000e68 <main+0x2b4>)
1a000be6:	7820      	ldrb	r0, [r4, #0]
1a000be8:	f001 fc95 	bl	1a002516 <printString>
1a000bec:	7820      	ldrb	r0, [r4, #0]
1a000bee:	f001 fc97 	bl	1a002520 <printEnter>
	eeprom24C32Init( &eeprom24C32, I2C0, 1, 1, 1, EEPROM24C32_PAGE_SIZE, EEPROM24C32_MEMORY_SIZE );  // inicializo la EEPROM
1a000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a000bf6:	9302      	str	r3, [sp, #8]
1a000bf8:	2320      	movs	r3, #32
1a000bfa:	9301      	str	r3, [sp, #4]
1a000bfc:	2201      	movs	r2, #1
1a000bfe:	9200      	str	r2, [sp, #0]
1a000c00:	4613      	mov	r3, r2
1a000c02:	2100      	movs	r1, #0
1a000c04:	4899      	ldr	r0, [pc, #612]	; (1a000e6c <main+0x2b8>)
1a000c06:	f7ff fc4a 	bl	1a00049e <eeprom24C32Init>
	debugPrintlnString( "EEPROM initialization complete." );
1a000c0a:	4999      	ldr	r1, [pc, #612]	; (1a000e70 <main+0x2bc>)
1a000c0c:	7820      	ldrb	r0, [r4, #0]
1a000c0e:	f001 fc82 	bl	1a002516 <printString>
1a000c12:	7820      	ldrb	r0, [r4, #0]
1a000c14:	f001 fc84 	bl	1a002520 <printEnter>
	RTC_set_alarm_time(&time,I2C0, DS3231_I2C_ADDRESS,0,ALARMA_HORA,ALARMA_MINUTOS,ALARMA_SEGUNDOS,EVERY_SECOND);
1a000c18:	4d96      	ldr	r5, [pc, #600]	; (1a000e74 <main+0x2c0>)
1a000c1a:	230f      	movs	r3, #15
1a000c1c:	9303      	str	r3, [sp, #12]
1a000c1e:	2305      	movs	r3, #5
1a000c20:	9302      	str	r3, [sp, #8]
1a000c22:	231e      	movs	r3, #30
1a000c24:	9301      	str	r3, [sp, #4]
1a000c26:	2314      	movs	r3, #20
1a000c28:	9300      	str	r3, [sp, #0]
1a000c2a:	2300      	movs	r3, #0
1a000c2c:	2268      	movs	r2, #104	; 0x68
1a000c2e:	4619      	mov	r1, r3
1a000c30:	4628      	mov	r0, r5
1a000c32:	f7ff fbe7 	bl	1a000404 <RTC_set_alarm_time>
	RTC_turn_alarm_on(&time, I2C0, DS3231_I2C_ADDRESS);
1a000c36:	2268      	movs	r2, #104	; 0x68
1a000c38:	2100      	movs	r1, #0
1a000c3a:	4628      	mov	r0, r5
1a000c3c:	f7ff fb60 	bl	1a000300 <RTC_turn_alarm_on>
	RTC_reset_alarm(&time, I2C0, DS3231_I2C_ADDRESS);
1a000c40:	2268      	movs	r2, #104	; 0x68
1a000c42:	2100      	movs	r1, #0
1a000c44:	4628      	mov	r0, r5
1a000c46:	f7ff fbb6 	bl	1a0003b6 <RTC_reset_alarm>
	owInit(SENSOR_TEMP_SUCIO);
1a000c4a:	200c      	movs	r0, #12
1a000c4c:	f7ff fe3e 	bl	1a0008cc <owInit>
	owSetBitResolution(SENSOR_TEMP_SUCIO,12);
1a000c50:	210c      	movs	r1, #12
1a000c52:	4608      	mov	r0, r1
1a000c54:	f7ff fece 	bl	1a0009f4 <owSetBitResolution>
	debugPrintlnString( "Temperature sensor initialization complete." );	// inicializo el sensor de temperatura
1a000c58:	4987      	ldr	r1, [pc, #540]	; (1a000e78 <main+0x2c4>)
1a000c5a:	7820      	ldrb	r0, [r4, #0]
1a000c5c:	f001 fc5b 	bl	1a002516 <printString>
1a000c60:	7820      	ldrb	r0, [r4, #0]
1a000c62:	f001 fc5d 	bl	1a002520 <printEnter>
	My_IRQ_Init();
1a000c66:	f7ff ff85 	bl	1a000b74 <My_IRQ_Init>
1a000c6a:	e09f      	b.n	1a000dac <main+0x1f8>
				eeprom24C32WriteByte( &eeprom24C32, eeprom_current_address, soil_sample.buffer[i]);
1a000c6c:	ab10      	add	r3, sp, #64	; 0x40
1a000c6e:	442b      	add	r3, r5
1a000c70:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
1a000c74:	4621      	mov	r1, r4
1a000c76:	487d      	ldr	r0, [pc, #500]	; (1a000e6c <main+0x2b8>)
1a000c78:	f7ff fc43 	bl	1a000502 <eeprom24C32WriteByte>
				eeprom_current_address++;
1a000c7c:	3401      	adds	r4, #1
1a000c7e:	b2a4      	uxth	r4, r4
			for(i=0 ; i<sizeof(soil_sample) ; i++)
1a000c80:	3501      	adds	r5, #1
1a000c82:	2d13      	cmp	r5, #19
1a000c84:	d9f2      	bls.n	1a000c6c <main+0xb8>
			eeprom24C32UpdateDataAddress(&eeprom24C32, eeprom_current_address);
1a000c86:	4621      	mov	r1, r4
1a000c88:	4878      	ldr	r0, [pc, #480]	; (1a000e6c <main+0x2b8>)
1a000c8a:	f7ff fc5c 	bl	1a000546 <eeprom24C32UpdateDataAddress>
			eeprom_current_address -= sizeof(soil_sample);
1a000c8e:	3c14      	subs	r4, #20
1a000c90:	b2a4      	uxth	r4, r4
			debugPrintString(" current address: ");
1a000c92:	4d73      	ldr	r5, [pc, #460]	; (1a000e60 <main+0x2ac>)
1a000c94:	4979      	ldr	r1, [pc, #484]	; (1a000e7c <main+0x2c8>)
1a000c96:	7828      	ldrb	r0, [r5, #0]
1a000c98:	f001 fc3d 	bl	1a002516 <printString>
			debugPrintInt(eeprom_current_address);
1a000c9c:	230a      	movs	r3, #10
1a000c9e:	9300      	str	r3, [sp, #0]
1a000ca0:	b2a2      	uxth	r2, r4
1a000ca2:	2300      	movs	r3, #0
1a000ca4:	7828      	ldrb	r0, [r5, #0]
1a000ca6:	f001 fc43 	bl	1a002530 <printIntFormat>
			for(i=0 ; i<sizeof(soil_sample) ; i++)
1a000caa:	2500      	movs	r5, #0
1a000cac:	e008      	b.n	1a000cc0 <main+0x10c>
				eeprom24C32ReadRandom( &eeprom24C32, eeprom_current_address, readedByte+i);
1a000cae:	ab04      	add	r3, sp, #16
1a000cb0:	195a      	adds	r2, r3, r5
1a000cb2:	4621      	mov	r1, r4
1a000cb4:	486d      	ldr	r0, [pc, #436]	; (1a000e6c <main+0x2b8>)
1a000cb6:	f7ff fc56 	bl	1a000566 <eeprom24C32ReadRandom>
				eeprom_current_address++;
1a000cba:	3401      	adds	r4, #1
1a000cbc:	b2a4      	uxth	r4, r4
			for(i=0 ; i<sizeof(soil_sample) ; i++)
1a000cbe:	3501      	adds	r5, #1
1a000cc0:	2d13      	cmp	r5, #19
1a000cc2:	d9f4      	bls.n	1a000cae <main+0xfa>
			debugPrintString(" Tc: ");
1a000cc4:	4c66      	ldr	r4, [pc, #408]	; (1a000e60 <main+0x2ac>)
1a000cc6:	496e      	ldr	r1, [pc, #440]	; (1a000e80 <main+0x2cc>)
1a000cc8:	7820      	ldrb	r0, [r4, #0]
1a000cca:	f001 fc24 	bl	1a002516 <printString>
			sprintf(str, "%d.%04d", (soil_read->T_clean)>>4, (soil_read->T_clean & 0xF) * 625);
1a000cce:	9a04      	ldr	r2, [sp, #16]
1a000cd0:	f002 030f 	and.w	r3, r2, #15
1a000cd4:	f240 2671 	movw	r6, #625	; 0x271
1a000cd8:	4d6a      	ldr	r5, [pc, #424]	; (1a000e84 <main+0x2d0>)
1a000cda:	fb06 f303 	mul.w	r3, r6, r3
1a000cde:	1112      	asrs	r2, r2, #4
1a000ce0:	4629      	mov	r1, r5
1a000ce2:	a80e      	add	r0, sp, #56	; 0x38
1a000ce4:	f003 f866 	bl	1a003db4 <sprintf>
			debugPrintString(str);
1a000ce8:	a90e      	add	r1, sp, #56	; 0x38
1a000cea:	7820      	ldrb	r0, [r4, #0]
1a000cec:	f001 fc13 	bl	1a002516 <printString>
			debugPrintString(" Td: ");
1a000cf0:	4965      	ldr	r1, [pc, #404]	; (1a000e88 <main+0x2d4>)
1a000cf2:	7820      	ldrb	r0, [r4, #0]
1a000cf4:	f001 fc0f 	bl	1a002516 <printString>
			sprintf(str, "%d.%04d", (soil_read->T_dirty)>>4, (soil_read->T_dirty & 0xF) * 625);
1a000cf8:	9a05      	ldr	r2, [sp, #20]
1a000cfa:	f002 030f 	and.w	r3, r2, #15
1a000cfe:	fb06 f303 	mul.w	r3, r6, r3
1a000d02:	1112      	asrs	r2, r2, #4
1a000d04:	4629      	mov	r1, r5
1a000d06:	a80e      	add	r0, sp, #56	; 0x38
1a000d08:	f003 f854 	bl	1a003db4 <sprintf>
			debugPrintString(str);
1a000d0c:	a90e      	add	r1, sp, #56	; 0x38
1a000d0e:	7820      	ldrb	r0, [r4, #0]
1a000d10:	f001 fc01 	bl	1a002516 <printString>
			debugPrintString(" Soil: ");
1a000d14:	495d      	ldr	r1, [pc, #372]	; (1a000e8c <main+0x2d8>)
1a000d16:	7820      	ldrb	r0, [r4, #0]
1a000d18:	f001 fbfd 	bl	1a002516 <printString>
			debugPrintUInt( soil_read->soil );
1a000d1c:	250a      	movs	r5, #10
1a000d1e:	9500      	str	r5, [sp, #0]
1a000d20:	9a06      	ldr	r2, [sp, #24]
1a000d22:	2300      	movs	r3, #0
1a000d24:	7820      	ldrb	r0, [r4, #0]
1a000d26:	f001 fc15 	bl	1a002554 <printUIntFormat>
			debugPrintString(" Ic: ");
1a000d2a:	4959      	ldr	r1, [pc, #356]	; (1a000e90 <main+0x2dc>)
1a000d2c:	7820      	ldrb	r0, [r4, #0]
1a000d2e:	f001 fbf2 	bl	1a002516 <printString>
			debugPrintUInt( soil_read->I_clean );
1a000d32:	9500      	str	r5, [sp, #0]
1a000d34:	f8bd 201c 	ldrh.w	r2, [sp, #28]
1a000d38:	2300      	movs	r3, #0
1a000d3a:	7820      	ldrb	r0, [r4, #0]
1a000d3c:	f001 fc0a 	bl	1a002554 <printUIntFormat>
			debugPrintString(" Id: ");
1a000d40:	4954      	ldr	r1, [pc, #336]	; (1a000e94 <main+0x2e0>)
1a000d42:	7820      	ldrb	r0, [r4, #0]
1a000d44:	f001 fbe7 	bl	1a002516 <printString>
			debugPrintUInt( soil_read->I_dirty );
1a000d48:	9500      	str	r5, [sp, #0]
1a000d4a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
1a000d4e:	2300      	movs	r3, #0
1a000d50:	7820      	ldrb	r0, [r4, #0]
1a000d52:	f001 fbff 	bl	1a002554 <printUIntFormat>
			debugPrintString("  ");
1a000d56:	4950      	ldr	r1, [pc, #320]	; (1a000e98 <main+0x2e4>)
1a000d58:	7820      	ldrb	r0, [r4, #0]
1a000d5a:	f001 fbdc 	bl	1a002516 <printString>
			debugPrintHex( soil_read->mday,8 );
1a000d5e:	2508      	movs	r5, #8
1a000d60:	9500      	str	r5, [sp, #0]
1a000d62:	f89d 2020 	ldrb.w	r2, [sp, #32]
1a000d66:	2300      	movs	r3, #0
1a000d68:	7820      	ldrb	r0, [r4, #0]
1a000d6a:	f001 fc05 	bl	1a002578 <printHex>
			debugPrintString("/");
1a000d6e:	4e4b      	ldr	r6, [pc, #300]	; (1a000e9c <main+0x2e8>)
1a000d70:	4631      	mov	r1, r6
1a000d72:	7820      	ldrb	r0, [r4, #0]
1a000d74:	f001 fbcf 	bl	1a002516 <printString>
			debugPrintHex( soil_read->month,8 );
1a000d78:	9500      	str	r5, [sp, #0]
1a000d7a:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
1a000d7e:	2300      	movs	r3, #0
1a000d80:	7820      	ldrb	r0, [r4, #0]
1a000d82:	f001 fbf9 	bl	1a002578 <printHex>
			debugPrintString("/");
1a000d86:	4631      	mov	r1, r6
1a000d88:	7820      	ldrb	r0, [r4, #0]
1a000d8a:	f001 fbc4 	bl	1a002516 <printString>
			debugPrintHex( soil_read->year,8 );
1a000d8e:	9500      	str	r5, [sp, #0]
1a000d90:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
1a000d94:	2300      	movs	r3, #0
1a000d96:	7820      	ldrb	r0, [r4, #0]
1a000d98:	f001 fbee 	bl	1a002578 <printHex>
			debugPrintEnter();
1a000d9c:	7820      	ldrb	r0, [r4, #0]
1a000d9e:	f001 fbbf 	bl	1a002520 <printEnter>
1a000da2:	4b3f      	ldr	r3, [pc, #252]	; (1a000ea0 <main+0x2ec>)
1a000da4:	2201      	movs	r2, #1
1a000da6:	605a      	str	r2, [r3, #4]
			sleepUntilNextInterrupt();
1a000da8:	f001 f8fa 	bl	1a001fa0 <sleepUntilNextInterrupt>
		if(flag)
1a000dac:	4b3d      	ldr	r3, [pc, #244]	; (1a000ea4 <main+0x2f0>)
1a000dae:	781b      	ldrb	r3, [r3, #0]
1a000db0:	2b00      	cmp	r3, #0
1a000db2:	d0f9      	beq.n	1a000da8 <main+0x1f4>
			flag = 0;
1a000db4:	2500      	movs	r5, #0
1a000db6:	4b3b      	ldr	r3, [pc, #236]	; (1a000ea4 <main+0x2f0>)
1a000db8:	701d      	strb	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000dba:	4b39      	ldr	r3, [pc, #228]	; (1a000ea0 <main+0x2ec>)
1a000dbc:	2201      	movs	r2, #1
1a000dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a000dc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a000dc6:	f3bf 8f6f 	isb	sy
			RTC_reset_alarm(&time, I2C0, DS3231_I2C_ADDRESS);
1a000dca:	4c2a      	ldr	r4, [pc, #168]	; (1a000e74 <main+0x2c0>)
1a000dcc:	2268      	movs	r2, #104	; 0x68
1a000dce:	4629      	mov	r1, r5
1a000dd0:	4620      	mov	r0, r4
1a000dd2:	f7ff faf0 	bl	1a0003b6 <RTC_reset_alarm>
			RTC_read_time( &time, I2C0, DS3231_I2C_ADDRESS);  // leo los registros horarios del RTC y los guardo en la estructura time
1a000dd6:	2268      	movs	r2, #104	; 0x68
1a000dd8:	4629      	mov	r1, r5
1a000dda:	4620      	mov	r0, r4
1a000ddc:	f7ff faa3 	bl	1a000326 <RTC_read_time>
			debugPrintString(" ALARMA !! ");
1a000de0:	4e1f      	ldr	r6, [pc, #124]	; (1a000e60 <main+0x2ac>)
1a000de2:	4931      	ldr	r1, [pc, #196]	; (1a000ea8 <main+0x2f4>)
1a000de4:	7830      	ldrb	r0, [r6, #0]
1a000de6:	f001 fb96 	bl	1a002516 <printString>
			debugPrintHex( time.hour,8 );   // imprimo la hora por UART
1a000dea:	2708      	movs	r7, #8
1a000dec:	9700      	str	r7, [sp, #0]
1a000dee:	7922      	ldrb	r2, [r4, #4]
1a000df0:	2300      	movs	r3, #0
1a000df2:	7830      	ldrb	r0, [r6, #0]
1a000df4:	f001 fbc0 	bl	1a002578 <printHex>
			debugPrintString(":");
1a000df8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1a000eac <main+0x2f8>
1a000dfc:	4641      	mov	r1, r8
1a000dfe:	7830      	ldrb	r0, [r6, #0]
1a000e00:	f001 fb89 	bl	1a002516 <printString>
			debugPrintHex( time.min,8 );
1a000e04:	9700      	str	r7, [sp, #0]
1a000e06:	7962      	ldrb	r2, [r4, #5]
1a000e08:	2300      	movs	r3, #0
1a000e0a:	7830      	ldrb	r0, [r6, #0]
1a000e0c:	f001 fbb4 	bl	1a002578 <printHex>
			debugPrintString(":");
1a000e10:	4641      	mov	r1, r8
1a000e12:	7830      	ldrb	r0, [r6, #0]
1a000e14:	f001 fb7f 	bl	1a002516 <printString>
			debugPrintHex( time.sec,8 );
1a000e18:	9700      	str	r7, [sp, #0]
1a000e1a:	79a2      	ldrb	r2, [r4, #6]
1a000e1c:	2300      	movs	r3, #0
1a000e1e:	7830      	ldrb	r0, [r6, #0]
1a000e20:	f001 fbaa 	bl	1a002578 <printHex>
			soil_sample.T_clean = owReadTemperature(SENSOR_TEMP_SUCIO);
1a000e24:	200c      	movs	r0, #12
1a000e26:	f7ff fe13 	bl	1a000a50 <owReadTemperature>
1a000e2a:	9009      	str	r0, [sp, #36]	; 0x24
			soil_sample.T_dirty = owReadTemperature(SENSOR_TEMP_SUCIO);
1a000e2c:	200c      	movs	r0, #12
1a000e2e:	f7ff fe0f 	bl	1a000a50 <owReadTemperature>
1a000e32:	900a      	str	r0, [sp, #40]	; 0x28
			soil_sample.soil = 10;
1a000e34:	230a      	movs	r3, #10
1a000e36:	930b      	str	r3, [sp, #44]	; 0x2c
			soil_sample.I_clean = 20;
1a000e38:	2314      	movs	r3, #20
1a000e3a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
			soil_sample.I_dirty = 30;
1a000e3e:	231e      	movs	r3, #30
1a000e40:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
			soil_sample.mday = time.mday;
1a000e44:	78a3      	ldrb	r3, [r4, #2]
1a000e46:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			soil_sample.month = time.month;
1a000e4a:	7863      	ldrb	r3, [r4, #1]
1a000e4c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
			soil_sample.year = time.year;
1a000e50:	7823      	ldrb	r3, [r4, #0]
1a000e52:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
			eeprom_current_address = eeprom24C32GetCurrentAddress(&eeprom24C32);
1a000e56:	4805      	ldr	r0, [pc, #20]	; (1a000e6c <main+0x2b8>)
1a000e58:	f7ff fb2d 	bl	1a0004b6 <eeprom24C32GetCurrentAddress>
1a000e5c:	4604      	mov	r4, r0
			for(i=0 ; i<sizeof(soil_sample) ; i++)
1a000e5e:	e710      	b.n	1a000c82 <main+0xce>
1a000e60:	100009f8 	.word	0x100009f8
1a000e64:	000186a0 	.word	0x000186a0
1a000e68:	1a00768c 	.word	0x1a00768c
1a000e6c:	10000a54 	.word	0x10000a54
1a000e70:	1a0076ac 	.word	0x1a0076ac
1a000e74:	10000a74 	.word	0x10000a74
1a000e78:	1a0076cc 	.word	0x1a0076cc
1a000e7c:	1a007708 	.word	0x1a007708
1a000e80:	1a00771c 	.word	0x1a00771c
1a000e84:	1a007724 	.word	0x1a007724
1a000e88:	1a00772c 	.word	0x1a00772c
1a000e8c:	1a007734 	.word	0x1a007734
1a000e90:	1a00773c 	.word	0x1a00773c
1a000e94:	1a007744 	.word	0x1a007744
1a000e98:	1a00774c 	.word	0x1a00774c
1a000e9c:	1a007750 	.word	0x1a007750
1a000ea0:	e000e100 	.word	0xe000e100
1a000ea4:	100009f9 	.word	0x100009f9
1a000ea8:	1a0076f8 	.word	0x1a0076f8
1a000eac:	1a007704 	.word	0x1a007704

1a000eb0 <initialise_monitor_handles>:
}
1a000eb0:	4770      	bx	lr
1a000eb2:	Address 0x000000001a000eb2 is out of bounds.


1a000eb4 <Reset_Handler>:
void Reset_Handler(void) {
1a000eb4:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000eb6:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000eb8:	4b19      	ldr	r3, [pc, #100]	; (1a000f20 <Reset_Handler+0x6c>)
1a000eba:	4a1a      	ldr	r2, [pc, #104]	; (1a000f24 <Reset_Handler+0x70>)
1a000ebc:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000ebe:	3304      	adds	r3, #4
1a000ec0:	4a19      	ldr	r2, [pc, #100]	; (1a000f28 <Reset_Handler+0x74>)
1a000ec2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000ec4:	2300      	movs	r3, #0
1a000ec6:	e005      	b.n	1a000ed4 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000ec8:	4a18      	ldr	r2, [pc, #96]	; (1a000f2c <Reset_Handler+0x78>)
1a000eca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000ece:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000ed2:	3301      	adds	r3, #1
1a000ed4:	2b07      	cmp	r3, #7
1a000ed6:	d9f7      	bls.n	1a000ec8 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000ed8:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000eda:	4b15      	ldr	r3, [pc, #84]	; (1a000f30 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000edc:	e007      	b.n	1a000eee <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000ede:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000ee2:	689a      	ldr	r2, [r3, #8]
1a000ee4:	6859      	ldr	r1, [r3, #4]
1a000ee6:	6818      	ldr	r0, [r3, #0]
1a000ee8:	f7ff f94f 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000eec:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000eee:	4a11      	ldr	r2, [pc, #68]	; (1a000f34 <Reset_Handler+0x80>)
1a000ef0:	4293      	cmp	r3, r2
1a000ef2:	d3f4      	bcc.n	1a000ede <Reset_Handler+0x2a>
1a000ef4:	e006      	b.n	1a000f04 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000ef6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000ef8:	6859      	ldr	r1, [r3, #4]
1a000efa:	f854 0b08 	ldr.w	r0, [r4], #8
1a000efe:	f7ff f953 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000f02:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000f04:	4a0c      	ldr	r2, [pc, #48]	; (1a000f38 <Reset_Handler+0x84>)
1a000f06:	4293      	cmp	r3, r2
1a000f08:	d3f5      	bcc.n	1a000ef6 <Reset_Handler+0x42>
    SystemInit();
1a000f0a:	f001 f81f 	bl	1a001f4c <SystemInit>
    __libc_init_array();
1a000f0e:	f002 fb7b 	bl	1a003608 <__libc_init_array>
    initialise_monitor_handles();
1a000f12:	f7ff ffcd 	bl	1a000eb0 <initialise_monitor_handles>
    main();
1a000f16:	f7ff fe4d 	bl	1a000bb4 <main>
        __asm__ volatile("wfi");
1a000f1a:	bf30      	wfi
1a000f1c:	e7fd      	b.n	1a000f1a <Reset_Handler+0x66>
1a000f1e:	bf00      	nop
1a000f20:	40053100 	.word	0x40053100
1a000f24:	10df1000 	.word	0x10df1000
1a000f28:	01dff7ff 	.word	0x01dff7ff
1a000f2c:	e000e280 	.word	0xe000e280
1a000f30:	1a000114 	.word	0x1a000114
1a000f34:	1a000150 	.word	0x1a000150
1a000f38:	1a000178 	.word	0x1a000178

1a000f3c <_fini>:
void _fini(void) {}
1a000f3c:	4770      	bx	lr

1a000f3e <_init>:
void _init(void) {}
1a000f3e:	4770      	bx	lr

1a000f40 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000f40:	4b05      	ldr	r3, [pc, #20]	; (1a000f58 <_sbrk_r+0x18>)
1a000f42:	681b      	ldr	r3, [r3, #0]
1a000f44:	b123      	cbz	r3, 1a000f50 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000f46:	4b04      	ldr	r3, [pc, #16]	; (1a000f58 <_sbrk_r+0x18>)
1a000f48:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000f4a:	4401      	add	r1, r0
1a000f4c:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000f4e:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000f50:	4b01      	ldr	r3, [pc, #4]	; (1a000f58 <_sbrk_r+0x18>)
1a000f52:	4a02      	ldr	r2, [pc, #8]	; (1a000f5c <_sbrk_r+0x1c>)
1a000f54:	601a      	str	r2, [r3, #0]
1a000f56:	e7f6      	b.n	1a000f46 <_sbrk_r+0x6>
1a000f58:	100009fc 	.word	0x100009fc
1a000f5c:	10000b7c 	.word	0x10000b7c

1a000f60 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000f60:	2200      	movs	r2, #0
1a000f62:	2a05      	cmp	r2, #5
1a000f64:	d819      	bhi.n	1a000f9a <Board_LED_Init+0x3a>
{
1a000f66:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000f68:	490c      	ldr	r1, [pc, #48]	; (1a000f9c <Board_LED_Init+0x3c>)
1a000f6a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000f6e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000f72:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a000f74:	4b0a      	ldr	r3, [pc, #40]	; (1a000fa0 <Board_LED_Init+0x40>)
1a000f76:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000f7a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000f7e:	2001      	movs	r0, #1
1a000f80:	40a0      	lsls	r0, r4
1a000f82:	4301      	orrs	r1, r0
1a000f84:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000f88:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000f8c:	2100      	movs	r1, #0
1a000f8e:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000f90:	3201      	adds	r2, #1
1a000f92:	2a05      	cmp	r2, #5
1a000f94:	d9e8      	bls.n	1a000f68 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000f96:	bc70      	pop	{r4, r5, r6}
1a000f98:	4770      	bx	lr
1a000f9a:	4770      	bx	lr
1a000f9c:	1a007760 	.word	0x1a007760
1a000fa0:	400f4000 	.word	0x400f4000

1a000fa4 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000fa4:	2300      	movs	r3, #0
1a000fa6:	2b03      	cmp	r3, #3
1a000fa8:	d816      	bhi.n	1a000fd8 <Board_TEC_Init+0x34>
{
1a000faa:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000fac:	490b      	ldr	r1, [pc, #44]	; (1a000fdc <Board_TEC_Init+0x38>)
1a000fae:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000fb2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000fb6:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000fb8:	4c09      	ldr	r4, [pc, #36]	; (1a000fe0 <Board_TEC_Init+0x3c>)
1a000fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000fbe:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000fc2:	2001      	movs	r0, #1
1a000fc4:	40a8      	lsls	r0, r5
1a000fc6:	ea21 0100 	bic.w	r1, r1, r0
1a000fca:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000fce:	3301      	adds	r3, #1
1a000fd0:	2b03      	cmp	r3, #3
1a000fd2:	d9eb      	bls.n	1a000fac <Board_TEC_Init+0x8>
   }
}
1a000fd4:	bc30      	pop	{r4, r5}
1a000fd6:	4770      	bx	lr
1a000fd8:	4770      	bx	lr
1a000fda:	bf00      	nop
1a000fdc:	1a007758 	.word	0x1a007758
1a000fe0:	400f4000 	.word	0x400f4000

1a000fe4 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000fe4:	2300      	movs	r3, #0
1a000fe6:	2b08      	cmp	r3, #8
1a000fe8:	d816      	bhi.n	1a001018 <Board_GPIO_Init+0x34>
{
1a000fea:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000fec:	490b      	ldr	r1, [pc, #44]	; (1a00101c <Board_GPIO_Init+0x38>)
1a000fee:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000ff2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000ff6:	784d      	ldrb	r5, [r1, #1]
1a000ff8:	4c09      	ldr	r4, [pc, #36]	; (1a001020 <Board_GPIO_Init+0x3c>)
1a000ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000ffe:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a001002:	2001      	movs	r0, #1
1a001004:	40a8      	lsls	r0, r5
1a001006:	ea21 0100 	bic.w	r1, r1, r0
1a00100a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00100e:	3301      	adds	r3, #1
1a001010:	2b08      	cmp	r3, #8
1a001012:	d9eb      	bls.n	1a000fec <Board_GPIO_Init+0x8>
   }
}
1a001014:	bc30      	pop	{r4, r5}
1a001016:	4770      	bx	lr
1a001018:	4770      	bx	lr
1a00101a:	bf00      	nop
1a00101c:	1a00776c 	.word	0x1a00776c
1a001020:	400f4000 	.word	0x400f4000

1a001024 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a001024:	b510      	push	{r4, lr}
1a001026:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a001028:	4c08      	ldr	r4, [pc, #32]	; (1a00104c <Board_ADC_Init+0x28>)
1a00102a:	4669      	mov	r1, sp
1a00102c:	4620      	mov	r0, r4
1a00102e:	f000 f9b7 	bl	1a0013a0 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a001032:	4a07      	ldr	r2, [pc, #28]	; (1a001050 <Board_ADC_Init+0x2c>)
1a001034:	4669      	mov	r1, sp
1a001036:	4620      	mov	r0, r4
1a001038:	f000 f9d2 	bl	1a0013e0 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a00103c:	2200      	movs	r2, #0
1a00103e:	4669      	mov	r1, sp
1a001040:	4620      	mov	r0, r4
1a001042:	f000 f9e6 	bl	1a001412 <Chip_ADC_SetResolution>
}
1a001046:	b002      	add	sp, #8
1a001048:	bd10      	pop	{r4, pc}
1a00104a:	bf00      	nop
1a00104c:	400e3000 	.word	0x400e3000
1a001050:	00061a80 	.word	0x00061a80

1a001054 <Board_SPI_Init>:
{
1a001054:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a001056:	4c0b      	ldr	r4, [pc, #44]	; (1a001084 <Board_SPI_Init+0x30>)
1a001058:	4620      	mov	r0, r4
1a00105a:	f000 fe35 	bl	1a001cc8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00105e:	6863      	ldr	r3, [r4, #4]
1a001060:	f023 0304 	bic.w	r3, r3, #4
1a001064:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001066:	6823      	ldr	r3, [r4, #0]
1a001068:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00106c:	f043 0307 	orr.w	r3, r3, #7
1a001070:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a001072:	4905      	ldr	r1, [pc, #20]	; (1a001088 <Board_SPI_Init+0x34>)
1a001074:	4620      	mov	r0, r4
1a001076:	f000 fe08 	bl	1a001c8a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00107a:	6863      	ldr	r3, [r4, #4]
1a00107c:	f043 0302 	orr.w	r3, r3, #2
1a001080:	6063      	str	r3, [r4, #4]
}
1a001082:	bd10      	pop	{r4, pc}
1a001084:	400c5000 	.word	0x400c5000
1a001088:	000186a0 	.word	0x000186a0

1a00108c <Board_I2C_Init>:
{
1a00108c:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a00108e:	2000      	movs	r0, #0
1a001090:	f000 fed6 	bl	1a001e40 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001094:	4b04      	ldr	r3, [pc, #16]	; (1a0010a8 <Board_I2C_Init+0x1c>)
1a001096:	f640 0208 	movw	r2, #2056	; 0x808
1a00109a:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00109e:	4903      	ldr	r1, [pc, #12]	; (1a0010ac <Board_I2C_Init+0x20>)
1a0010a0:	2000      	movs	r0, #0
1a0010a2:	f000 fedf 	bl	1a001e64 <Chip_I2C_SetClockRate>
}
1a0010a6:	bd08      	pop	{r3, pc}
1a0010a8:	40086000 	.word	0x40086000
1a0010ac:	000f4240 	.word	0x000f4240

1a0010b0 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0010b0:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0010b2:	4c07      	ldr	r4, [pc, #28]	; (1a0010d0 <Board_Debug_Init+0x20>)
1a0010b4:	4620      	mov	r0, r4
1a0010b6:	f000 f897 	bl	1a0011e8 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0010ba:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0010be:	4620      	mov	r0, r4
1a0010c0:	f000 f8dc 	bl	1a00127c <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0010c4:	2303      	movs	r3, #3
1a0010c6:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0010c8:	2301      	movs	r3, #1
1a0010ca:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0010cc:	bd10      	pop	{r4, pc}
1a0010ce:	bf00      	nop
1a0010d0:	400c1000 	.word	0x400c1000

1a0010d4 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0010d4:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0010d6:	f7ff ffeb 	bl	1a0010b0 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0010da:	4809      	ldr	r0, [pc, #36]	; (1a001100 <Board_Init+0x2c>)
1a0010dc:	f000 fdb5 	bl	1a001c4a <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0010e0:	f7ff ff80 	bl	1a000fe4 <Board_GPIO_Init>
   Board_ADC_Init();
1a0010e4:	f7ff ff9e 	bl	1a001024 <Board_ADC_Init>
   Board_SPI_Init();
1a0010e8:	f7ff ffb4 	bl	1a001054 <Board_SPI_Init>
   Board_I2C_Init();
1a0010ec:	f7ff ffce 	bl	1a00108c <Board_I2C_Init>

   Board_LED_Init();
1a0010f0:	f7ff ff36 	bl	1a000f60 <Board_LED_Init>
   Board_TEC_Init();
1a0010f4:	f7ff ff56 	bl	1a000fa4 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0010f8:	f000 fc58 	bl	1a0019ac <SystemCoreClockUpdate>
}
1a0010fc:	bd08      	pop	{r3, pc}
1a0010fe:	bf00      	nop
1a001100:	400f4000 	.word	0x400f4000

1a001104 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a001104:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a001106:	f7ff ffd3 	bl	1a0010b0 <Board_Debug_Init>
1a00110a:	bd08      	pop	{r3, pc}

1a00110c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00110c:	2300      	movs	r3, #0
1a00110e:	2b1c      	cmp	r3, #28
1a001110:	d812      	bhi.n	1a001138 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a001112:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001114:	4a09      	ldr	r2, [pc, #36]	; (1a00113c <Board_SetupMuxing+0x30>)
1a001116:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00111a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00111e:	784a      	ldrb	r2, [r1, #1]
1a001120:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001122:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a001126:	4906      	ldr	r1, [pc, #24]	; (1a001140 <Board_SetupMuxing+0x34>)
1a001128:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00112c:	3301      	adds	r3, #1
1a00112e:	2b1c      	cmp	r3, #28
1a001130:	d9f0      	bls.n	1a001114 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001132:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001136:	4770      	bx	lr
1a001138:	4770      	bx	lr
1a00113a:	bf00      	nop
1a00113c:	1a007788 	.word	0x1a007788
1a001140:	40086000 	.word	0x40086000

1a001144 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001144:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001146:	4a17      	ldr	r2, [pc, #92]	; (1a0011a4 <Board_SetupClocking+0x60>)
1a001148:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00114c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001150:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001154:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001158:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00115c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001160:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001164:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001168:	2201      	movs	r2, #1
1a00116a:	490f      	ldr	r1, [pc, #60]	; (1a0011a8 <Board_SetupClocking+0x64>)
1a00116c:	2006      	movs	r0, #6
1a00116e:	f000 fc27 	bl	1a0019c0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001172:	2400      	movs	r4, #0
1a001174:	b14c      	cbz	r4, 1a00118a <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001176:	4b0b      	ldr	r3, [pc, #44]	; (1a0011a4 <Board_SetupClocking+0x60>)
1a001178:	685a      	ldr	r2, [r3, #4]
1a00117a:	f022 020c 	bic.w	r2, r2, #12
1a00117e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001180:	685a      	ldr	r2, [r3, #4]
1a001182:	f042 0203 	orr.w	r2, r2, #3
1a001186:	605a      	str	r2, [r3, #4]
}
1a001188:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00118a:	4808      	ldr	r0, [pc, #32]	; (1a0011ac <Board_SetupClocking+0x68>)
1a00118c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001190:	2301      	movs	r3, #1
1a001192:	788a      	ldrb	r2, [r1, #2]
1a001194:	7849      	ldrb	r1, [r1, #1]
1a001196:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00119a:	f000 fb63 	bl	1a001864 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00119e:	3401      	adds	r4, #1
1a0011a0:	e7e8      	b.n	1a001174 <Board_SetupClocking+0x30>
1a0011a2:	bf00      	nop
1a0011a4:	40043000 	.word	0x40043000
1a0011a8:	0c28cb00 	.word	0x0c28cb00
1a0011ac:	1a007784 	.word	0x1a007784

1a0011b0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0011b0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0011b2:	f7ff ffab 	bl	1a00110c <Board_SetupMuxing>
    Board_SetupClocking();
1a0011b6:	f7ff ffc5 	bl	1a001144 <Board_SetupClocking>
}
1a0011ba:	bd08      	pop	{r3, pc}

1a0011bc <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0011bc:	4b09      	ldr	r3, [pc, #36]	; (1a0011e4 <Chip_UART_GetIndex+0x28>)
1a0011be:	4298      	cmp	r0, r3
1a0011c0:	d009      	beq.n	1a0011d6 <Chip_UART_GetIndex+0x1a>
1a0011c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0011c6:	4298      	cmp	r0, r3
1a0011c8:	d007      	beq.n	1a0011da <Chip_UART_GetIndex+0x1e>
1a0011ca:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0011ce:	4298      	cmp	r0, r3
1a0011d0:	d005      	beq.n	1a0011de <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0011d2:	2000      	movs	r0, #0
1a0011d4:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0011d6:	2002      	movs	r0, #2
1a0011d8:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0011da:	2003      	movs	r0, #3
1a0011dc:	4770      	bx	lr
			return 1;
1a0011de:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0011e0:	4770      	bx	lr
1a0011e2:	bf00      	nop
1a0011e4:	400c1000 	.word	0x400c1000

1a0011e8 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0011e8:	b530      	push	{r4, r5, lr}
1a0011ea:	b083      	sub	sp, #12
1a0011ec:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0011ee:	f7ff ffe5 	bl	1a0011bc <Chip_UART_GetIndex>
1a0011f2:	2301      	movs	r3, #1
1a0011f4:	461a      	mov	r2, r3
1a0011f6:	4619      	mov	r1, r3
1a0011f8:	4d0e      	ldr	r5, [pc, #56]	; (1a001234 <Chip_UART_Init+0x4c>)
1a0011fa:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0011fe:	f000 fb77 	bl	1a0018f0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001202:	2307      	movs	r3, #7
1a001204:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001206:	2300      	movs	r3, #0
1a001208:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00120a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a00120c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00120e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001210:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001212:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001214:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001216:	4b08      	ldr	r3, [pc, #32]	; (1a001238 <Chip_UART_Init+0x50>)
1a001218:	429c      	cmp	r4, r3
1a00121a:	d006      	beq.n	1a00122a <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a00121c:	2303      	movs	r3, #3
1a00121e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001220:	2310      	movs	r3, #16
1a001222:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001224:	9b01      	ldr	r3, [sp, #4]
}
1a001226:	b003      	add	sp, #12
1a001228:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00122a:	2300      	movs	r3, #0
1a00122c:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00122e:	69a3      	ldr	r3, [r4, #24]
1a001230:	9301      	str	r3, [sp, #4]
1a001232:	e7f3      	b.n	1a00121c <Chip_UART_Init+0x34>
1a001234:	1a007804 	.word	0x1a007804
1a001238:	40082000 	.word	0x40082000

1a00123c <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a00123c:	b538      	push	{r3, r4, r5, lr}
1a00123e:	4605      	mov	r5, r0
1a001240:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001242:	f7ff ffbb 	bl	1a0011bc <Chip_UART_GetIndex>
1a001246:	4b0c      	ldr	r3, [pc, #48]	; (1a001278 <Chip_UART_SetBaud+0x3c>)
1a001248:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00124c:	f000 fb88 	bl	1a001960 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a001250:	0123      	lsls	r3, r4, #4
1a001252:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a001256:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001258:	68ea      	ldr	r2, [r5, #12]
1a00125a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00125e:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001260:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a001262:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a001266:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001268:	68ea      	ldr	r2, [r5, #12]
1a00126a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00126e:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a001270:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001274:	0900      	lsrs	r0, r0, #4
1a001276:	bd38      	pop	{r3, r4, r5, pc}
1a001278:	1a0077fc 	.word	0x1a0077fc

1a00127c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a00127c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001280:	b083      	sub	sp, #12
1a001282:	9001      	str	r0, [sp, #4]
1a001284:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001286:	f7ff ff99 	bl	1a0011bc <Chip_UART_GetIndex>
1a00128a:	4b32      	ldr	r3, [pc, #200]	; (1a001354 <Chip_UART_SetBaudFDR+0xd8>)
1a00128c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001290:	f000 fb66 	bl	1a001960 <Chip_Clock_GetRate>
1a001294:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a001296:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00129a:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00129c:	f04f 0b00 	mov.w	fp, #0
1a0012a0:	46a2      	mov	sl, r4
1a0012a2:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0012a4:	e02a      	b.n	1a0012fc <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0012a6:	4242      	negs	r2, r0
				div ++;
1a0012a8:	1c4b      	adds	r3, r1, #1
1a0012aa:	e017      	b.n	1a0012dc <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0012ac:	b30a      	cbz	r2, 1a0012f2 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0012ae:	4617      	mov	r7, r2
			sd = d;
1a0012b0:	46ab      	mov	fp, r5
			sm = m;
1a0012b2:	46a2      	mov	sl, r4
			sdiv = div;
1a0012b4:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0012b6:	3501      	adds	r5, #1
1a0012b8:	42ac      	cmp	r4, r5
1a0012ba:	d91e      	bls.n	1a0012fa <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0012bc:	0933      	lsrs	r3, r6, #4
1a0012be:	0730      	lsls	r0, r6, #28
1a0012c0:	fba4 0100 	umull	r0, r1, r4, r0
1a0012c4:	fb04 1103 	mla	r1, r4, r3, r1
1a0012c8:	1962      	adds	r2, r4, r5
1a0012ca:	fb08 f202 	mul.w	r2, r8, r2
1a0012ce:	2300      	movs	r3, #0
1a0012d0:	f001 fed2 	bl	1a003078 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0012d4:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0012d6:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0012d8:	2800      	cmp	r0, #0
1a0012da:	dbe4      	blt.n	1a0012a6 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0012dc:	4297      	cmp	r7, r2
1a0012de:	d3ea      	bcc.n	1a0012b6 <Chip_UART_SetBaudFDR+0x3a>
1a0012e0:	2b00      	cmp	r3, #0
1a0012e2:	d0e8      	beq.n	1a0012b6 <Chip_UART_SetBaudFDR+0x3a>
1a0012e4:	0c19      	lsrs	r1, r3, #16
1a0012e6:	d1e6      	bne.n	1a0012b6 <Chip_UART_SetBaudFDR+0x3a>
1a0012e8:	2b02      	cmp	r3, #2
1a0012ea:	d8df      	bhi.n	1a0012ac <Chip_UART_SetBaudFDR+0x30>
1a0012ec:	2d00      	cmp	r5, #0
1a0012ee:	d0dd      	beq.n	1a0012ac <Chip_UART_SetBaudFDR+0x30>
1a0012f0:	e7e1      	b.n	1a0012b6 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0012f2:	4617      	mov	r7, r2
			sd = d;
1a0012f4:	46ab      	mov	fp, r5
			sm = m;
1a0012f6:	46a2      	mov	sl, r4
			sdiv = div;
1a0012f8:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0012fa:	3401      	adds	r4, #1
1a0012fc:	b11f      	cbz	r7, 1a001306 <Chip_UART_SetBaudFDR+0x8a>
1a0012fe:	2c0f      	cmp	r4, #15
1a001300:	d801      	bhi.n	1a001306 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a001302:	2500      	movs	r5, #0
1a001304:	e7d8      	b.n	1a0012b8 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001306:	f1b9 0f00 	cmp.w	r9, #0
1a00130a:	d01e      	beq.n	1a00134a <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00130c:	9a01      	ldr	r2, [sp, #4]
1a00130e:	4611      	mov	r1, r2
1a001310:	68d3      	ldr	r3, [r2, #12]
1a001312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001316:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a001318:	fa5f f389 	uxtb.w	r3, r9
1a00131c:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a00131e:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001322:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001324:	68d3      	ldr	r3, [r2, #12]
1a001326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00132a:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a00132c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001330:	b2db      	uxtb	r3, r3
1a001332:	f00b 020f 	and.w	r2, fp, #15
1a001336:	4313      	orrs	r3, r2
1a001338:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00133a:	0933      	lsrs	r3, r6, #4
1a00133c:	fb0a f303 	mul.w	r3, sl, r3
1a001340:	44da      	add	sl, fp
1a001342:	fb09 f90a 	mul.w	r9, r9, sl
1a001346:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00134a:	4648      	mov	r0, r9
1a00134c:	b003      	add	sp, #12
1a00134e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001352:	bf00      	nop
1a001354:	1a0077fc 	.word	0x1a0077fc

1a001358 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a001358:	4b03      	ldr	r3, [pc, #12]	; (1a001368 <Chip_ADC_GetClockIndex+0x10>)
1a00135a:	4298      	cmp	r0, r3
1a00135c:	d001      	beq.n	1a001362 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00135e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001360:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a001362:	2004      	movs	r0, #4
1a001364:	4770      	bx	lr
1a001366:	bf00      	nop
1a001368:	400e4000 	.word	0x400e4000

1a00136c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a00136c:	b570      	push	{r4, r5, r6, lr}
1a00136e:	460d      	mov	r5, r1
1a001370:	4614      	mov	r4, r2
1a001372:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001374:	f7ff fff0 	bl	1a001358 <Chip_ADC_GetClockIndex>
1a001378:	f000 faf2 	bl	1a001960 <Chip_Clock_GetRate>
	if (burstMode) {
1a00137c:	b155      	cbz	r5, 1a001394 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a00137e:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001382:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001386:	0064      	lsls	r4, r4, #1
1a001388:	fbb0 f0f4 	udiv	r0, r0, r4
1a00138c:	b2c0      	uxtb	r0, r0
1a00138e:	3801      	subs	r0, #1
	return div;
}
1a001390:	b2c0      	uxtb	r0, r0
1a001392:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a001394:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001398:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a00139c:	e7f1      	b.n	1a001382 <getClkDiv+0x16>
1a00139e:	Address 0x000000001a00139e is out of bounds.


1a0013a0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0013a0:	b538      	push	{r3, r4, r5, lr}
1a0013a2:	4605      	mov	r5, r0
1a0013a4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0013a6:	f7ff ffd7 	bl	1a001358 <Chip_ADC_GetClockIndex>
1a0013aa:	2301      	movs	r3, #1
1a0013ac:	461a      	mov	r2, r3
1a0013ae:	4619      	mov	r1, r3
1a0013b0:	f000 fa9e 	bl	1a0018f0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0013b4:	2100      	movs	r1, #0
1a0013b6:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0013b8:	4a08      	ldr	r2, [pc, #32]	; (1a0013dc <Chip_ADC_Init+0x3c>)
1a0013ba:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0013bc:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0013be:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0013c0:	230b      	movs	r3, #11
1a0013c2:	4628      	mov	r0, r5
1a0013c4:	f7ff ffd2 	bl	1a00136c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0013c8:	0200      	lsls	r0, r0, #8
1a0013ca:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0013ce:	7920      	ldrb	r0, [r4, #4]
1a0013d0:	0440      	lsls	r0, r0, #17
1a0013d2:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0013d6:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0013d8:	6028      	str	r0, [r5, #0]
}
1a0013da:	bd38      	pop	{r3, r4, r5, pc}
1a0013dc:	00061a80 	.word	0x00061a80

1a0013e0 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0013e0:	b570      	push	{r4, r5, r6, lr}
1a0013e2:	4605      	mov	r5, r0
1a0013e4:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0013e6:	6804      	ldr	r4, [r0, #0]
1a0013e8:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0013ec:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0013f0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0013f2:	790b      	ldrb	r3, [r1, #4]
1a0013f4:	f1c3 030b 	rsb	r3, r3, #11
1a0013f8:	b2db      	uxtb	r3, r3
1a0013fa:	7949      	ldrb	r1, [r1, #5]
1a0013fc:	f7ff ffb6 	bl	1a00136c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001400:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001404:	7933      	ldrb	r3, [r6, #4]
1a001406:	045b      	lsls	r3, r3, #17
1a001408:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a00140c:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a00140e:	602b      	str	r3, [r5, #0]
}
1a001410:	bd70      	pop	{r4, r5, r6, pc}

1a001412 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001412:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001414:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001416:	680a      	ldr	r2, [r1, #0]
1a001418:	f7ff ffe2 	bl	1a0013e0 <Chip_ADC_SetSampleRate>
}
1a00141c:	bd08      	pop	{r3, pc}
1a00141e:	Address 0x000000001a00141e is out of bounds.


1a001420 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001420:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001422:	680b      	ldr	r3, [r1, #0]
1a001424:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001428:	d002      	beq.n	1a001430 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00142a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00142e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001430:	4607      	mov	r7, r0
1a001432:	2501      	movs	r5, #1
1a001434:	e03a      	b.n	1a0014ac <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a001436:	694b      	ldr	r3, [r1, #20]
1a001438:	fb03 f302 	mul.w	r3, r3, r2
1a00143c:	fbb3 f3f5 	udiv	r3, r3, r5
1a001440:	e01c      	b.n	1a00147c <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001442:	461c      	mov	r4, r3
	if (val < 0)
1a001444:	ebb0 0c04 	subs.w	ip, r0, r4
1a001448:	d427      	bmi.n	1a00149a <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a00144a:	4567      	cmp	r7, ip
1a00144c:	d906      	bls.n	1a00145c <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a00144e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001450:	1c77      	adds	r7, r6, #1
1a001452:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001454:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a001456:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001458:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00145a:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a00145c:	3201      	adds	r2, #1
1a00145e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001462:	dc1d      	bgt.n	1a0014a0 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a001464:	680c      	ldr	r4, [r1, #0]
1a001466:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00146a:	d0e4      	beq.n	1a001436 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00146c:	1c73      	adds	r3, r6, #1
1a00146e:	fa02 fc03 	lsl.w	ip, r2, r3
1a001472:	694b      	ldr	r3, [r1, #20]
1a001474:	fb03 f30c 	mul.w	r3, r3, ip
1a001478:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00147c:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a0014b8 <pll_calc_divs+0x98>
1a001480:	4563      	cmp	r3, ip
1a001482:	d9eb      	bls.n	1a00145c <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001484:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a0014bc <pll_calc_divs+0x9c>
1a001488:	4563      	cmp	r3, ip
1a00148a:	d809      	bhi.n	1a0014a0 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a00148c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001490:	d1d7      	bne.n	1a001442 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a001492:	1c74      	adds	r4, r6, #1
1a001494:	fa23 f404 	lsr.w	r4, r3, r4
1a001498:	e7d4      	b.n	1a001444 <pll_calc_divs+0x24>
		return -val;
1a00149a:	f1cc 0c00 	rsb	ip, ip, #0
1a00149e:	e7d4      	b.n	1a00144a <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a0014a0:	3601      	adds	r6, #1
1a0014a2:	2e03      	cmp	r6, #3
1a0014a4:	dc01      	bgt.n	1a0014aa <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a0014a6:	2201      	movs	r2, #1
1a0014a8:	e7d9      	b.n	1a00145e <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a0014aa:	3501      	adds	r5, #1
1a0014ac:	2d04      	cmp	r5, #4
1a0014ae:	dc01      	bgt.n	1a0014b4 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a0014b0:	2600      	movs	r6, #0
1a0014b2:	e7f6      	b.n	1a0014a2 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a0014b4:	bcf0      	pop	{r4, r5, r6, r7}
1a0014b6:	4770      	bx	lr
1a0014b8:	094c5eff 	.word	0x094c5eff
1a0014bc:	1312d000 	.word	0x1312d000

1a0014c0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0014c2:	b099      	sub	sp, #100	; 0x64
1a0014c4:	4605      	mov	r5, r0
1a0014c6:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0014c8:	225c      	movs	r2, #92	; 0x5c
1a0014ca:	2100      	movs	r1, #0
1a0014cc:	a801      	add	r0, sp, #4
1a0014ce:	f002 fc15 	bl	1a003cfc <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0014d2:	2380      	movs	r3, #128	; 0x80
1a0014d4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0014d6:	6963      	ldr	r3, [r4, #20]
1a0014d8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0014da:	7923      	ldrb	r3, [r4, #4]
1a0014dc:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0014e0:	4669      	mov	r1, sp
1a0014e2:	4628      	mov	r0, r5
1a0014e4:	f7ff ff9c 	bl	1a001420 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0014e8:	9b06      	ldr	r3, [sp, #24]
1a0014ea:	42ab      	cmp	r3, r5
1a0014ec:	d027      	beq.n	1a00153e <pll_get_frac+0x7e>
	if (val < 0)
1a0014ee:	1aeb      	subs	r3, r5, r3
1a0014f0:	d42e      	bmi.n	1a001550 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0014f2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0014f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0014f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0014fa:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0014fc:	6963      	ldr	r3, [r4, #20]
1a0014fe:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001500:	7923      	ldrb	r3, [r4, #4]
1a001502:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001506:	a910      	add	r1, sp, #64	; 0x40
1a001508:	4628      	mov	r0, r5
1a00150a:	f7ff ff89 	bl	1a001420 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00150e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001510:	42ab      	cmp	r3, r5
1a001512:	d01f      	beq.n	1a001554 <pll_get_frac+0x94>
	if (val < 0)
1a001514:	1aeb      	subs	r3, r5, r3
1a001516:	d425      	bmi.n	1a001564 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001518:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00151a:	4b2b      	ldr	r3, [pc, #172]	; (1a0015c8 <pll_get_frac+0x108>)
1a00151c:	429d      	cmp	r5, r3
1a00151e:	d923      	bls.n	1a001568 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a001522:	1aed      	subs	r5, r5, r3
1a001524:	d433      	bmi.n	1a00158e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001526:	42ae      	cmp	r6, r5
1a001528:	dc3b      	bgt.n	1a0015a2 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00152a:	42be      	cmp	r6, r7
1a00152c:	dc31      	bgt.n	1a001592 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00152e:	466d      	mov	r5, sp
1a001530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001534:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00153c:	e006      	b.n	1a00154c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00153e:	466d      	mov	r5, sp
1a001540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001544:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a00154c:	b019      	add	sp, #100	; 0x64
1a00154e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001550:	425b      	negs	r3, r3
1a001552:	e7ce      	b.n	1a0014f2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a001554:	ad10      	add	r5, sp, #64	; 0x40
1a001556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00155a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00155e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001562:	e7f3      	b.n	1a00154c <pll_get_frac+0x8c>
		return -val;
1a001564:	425b      	negs	r3, r3
1a001566:	e7d7      	b.n	1a001518 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001568:	2340      	movs	r3, #64	; 0x40
1a00156a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a00156c:	6963      	ldr	r3, [r4, #20]
1a00156e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001570:	a908      	add	r1, sp, #32
1a001572:	4628      	mov	r0, r5
1a001574:	f7ff ff54 	bl	1a001420 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00157a:	42ab      	cmp	r3, r5
1a00157c:	d1d0      	bne.n	1a001520 <pll_get_frac+0x60>
			*ppll = pll[1];
1a00157e:	ad08      	add	r5, sp, #32
1a001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001584:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a00158c:	e7de      	b.n	1a00154c <pll_get_frac+0x8c>
		return -val;
1a00158e:	426d      	negs	r5, r5
1a001590:	e7c9      	b.n	1a001526 <pll_get_frac+0x66>
			*ppll = pll[2];
1a001592:	ad10      	add	r5, sp, #64	; 0x40
1a001594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001598:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00159c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0015a0:	e7d4      	b.n	1a00154c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0015a2:	42af      	cmp	r7, r5
1a0015a4:	db07      	blt.n	1a0015b6 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0015a6:	ad08      	add	r5, sp, #32
1a0015a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0015aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0015ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0015b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0015b4:	e7ca      	b.n	1a00154c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0015b6:	ad10      	add	r5, sp, #64	; 0x40
1a0015b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0015ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0015bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0015c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0015c4:	e7c2      	b.n	1a00154c <pll_get_frac+0x8c>
1a0015c6:	bf00      	nop
1a0015c8:	068e7780 	.word	0x068e7780

1a0015cc <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0015cc:	b430      	push	{r4, r5}
1a0015ce:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0015d0:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0015d2:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0015d4:	e000      	b.n	1a0015d8 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0015d6:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0015d8:	281c      	cmp	r0, #28
1a0015da:	d118      	bne.n	1a00160e <Chip_Clock_FindBaseClock+0x42>
1a0015dc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0015e0:	0051      	lsls	r1, r2, #1
1a0015e2:	4a0c      	ldr	r2, [pc, #48]	; (1a001614 <Chip_Clock_FindBaseClock+0x48>)
1a0015e4:	440a      	add	r2, r1
1a0015e6:	7914      	ldrb	r4, [r2, #4]
1a0015e8:	4284      	cmp	r4, r0
1a0015ea:	d010      	beq.n	1a00160e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0015ec:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0015f0:	004a      	lsls	r2, r1, #1
1a0015f2:	4908      	ldr	r1, [pc, #32]	; (1a001614 <Chip_Clock_FindBaseClock+0x48>)
1a0015f4:	5a8a      	ldrh	r2, [r1, r2]
1a0015f6:	42aa      	cmp	r2, r5
1a0015f8:	d8ed      	bhi.n	1a0015d6 <Chip_Clock_FindBaseClock+0xa>
1a0015fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0015fe:	0051      	lsls	r1, r2, #1
1a001600:	4a04      	ldr	r2, [pc, #16]	; (1a001614 <Chip_Clock_FindBaseClock+0x48>)
1a001602:	440a      	add	r2, r1
1a001604:	8852      	ldrh	r2, [r2, #2]
1a001606:	42aa      	cmp	r2, r5
1a001608:	d3e5      	bcc.n	1a0015d6 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00160a:	4620      	mov	r0, r4
1a00160c:	e7e4      	b.n	1a0015d8 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00160e:	bc30      	pop	{r4, r5}
1a001610:	4770      	bx	lr
1a001612:	bf00      	nop
1a001614:	1a007818 	.word	0x1a007818

1a001618 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001618:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00161e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001620:	4a0d      	ldr	r2, [pc, #52]	; (1a001658 <Chip_Clock_EnableCrystal+0x40>)
1a001622:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001624:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001628:	6992      	ldr	r2, [r2, #24]
1a00162a:	428a      	cmp	r2, r1
1a00162c:	d001      	beq.n	1a001632 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00162e:	4a0a      	ldr	r2, [pc, #40]	; (1a001658 <Chip_Clock_EnableCrystal+0x40>)
1a001630:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001632:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001636:	4a09      	ldr	r2, [pc, #36]	; (1a00165c <Chip_Clock_EnableCrystal+0x44>)
1a001638:	6811      	ldr	r1, [r2, #0]
1a00163a:	4a09      	ldr	r2, [pc, #36]	; (1a001660 <Chip_Clock_EnableCrystal+0x48>)
1a00163c:	4291      	cmp	r1, r2
1a00163e:	d901      	bls.n	1a001644 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001640:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001644:	4a04      	ldr	r2, [pc, #16]	; (1a001658 <Chip_Clock_EnableCrystal+0x40>)
1a001646:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001648:	9b01      	ldr	r3, [sp, #4]
1a00164a:	1e5a      	subs	r2, r3, #1
1a00164c:	9201      	str	r2, [sp, #4]
1a00164e:	2b00      	cmp	r3, #0
1a001650:	d1fa      	bne.n	1a001648 <Chip_Clock_EnableCrystal+0x30>
}
1a001652:	b002      	add	sp, #8
1a001654:	4770      	bx	lr
1a001656:	bf00      	nop
1a001658:	40050000 	.word	0x40050000
1a00165c:	1a007780 	.word	0x1a007780
1a001660:	01312cff 	.word	0x01312cff

1a001664 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001664:	3012      	adds	r0, #18
1a001666:	4b05      	ldr	r3, [pc, #20]	; (1a00167c <Chip_Clock_GetDividerSource+0x18>)
1a001668:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a00166c:	f010 0f01 	tst.w	r0, #1
1a001670:	d102      	bne.n	1a001678 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001672:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001676:	4770      	bx	lr
		return CLKINPUT_PD;
1a001678:	2011      	movs	r0, #17
}
1a00167a:	4770      	bx	lr
1a00167c:	40050000 	.word	0x40050000

1a001680 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001680:	f100 0212 	add.w	r2, r0, #18
1a001684:	4b03      	ldr	r3, [pc, #12]	; (1a001694 <Chip_Clock_GetDividerDivisor+0x14>)
1a001686:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00168a:	4b03      	ldr	r3, [pc, #12]	; (1a001698 <Chip_Clock_GetDividerDivisor+0x18>)
1a00168c:	5c18      	ldrb	r0, [r3, r0]
}
1a00168e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001692:	4770      	bx	lr
1a001694:	40050000 	.word	0x40050000
1a001698:	1a007810 	.word	0x1a007810

1a00169c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00169c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00169e:	2810      	cmp	r0, #16
1a0016a0:	d80a      	bhi.n	1a0016b8 <Chip_Clock_GetClockInputHz+0x1c>
1a0016a2:	e8df f000 	tbb	[pc, r0]
1a0016a6:	0b44      	.short	0x0b44
1a0016a8:	0921180d 	.word	0x0921180d
1a0016ac:	2d2a2724 	.word	0x2d2a2724
1a0016b0:	34300909 	.word	0x34300909
1a0016b4:	3c38      	.short	0x3c38
1a0016b6:	40          	.byte	0x40
1a0016b7:	00          	.byte	0x00
	uint32_t rate = 0;
1a0016b8:	2000      	movs	r0, #0
1a0016ba:	e03a      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0016bc:	481e      	ldr	r0, [pc, #120]	; (1a001738 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0016be:	e038      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0016c0:	4b1e      	ldr	r3, [pc, #120]	; (1a00173c <Chip_Clock_GetClockInputHz+0xa0>)
1a0016c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0016c6:	f003 0307 	and.w	r3, r3, #7
1a0016ca:	2b04      	cmp	r3, #4
1a0016cc:	d001      	beq.n	1a0016d2 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0016ce:	481c      	ldr	r0, [pc, #112]	; (1a001740 <Chip_Clock_GetClockInputHz+0xa4>)
1a0016d0:	e02f      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a0016d2:	2000      	movs	r0, #0
1a0016d4:	e02d      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0016d6:	4b19      	ldr	r3, [pc, #100]	; (1a00173c <Chip_Clock_GetClockInputHz+0xa0>)
1a0016d8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0016dc:	f003 0307 	and.w	r3, r3, #7
1a0016e0:	2b04      	cmp	r3, #4
1a0016e2:	d027      	beq.n	1a001734 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0016e4:	4816      	ldr	r0, [pc, #88]	; (1a001740 <Chip_Clock_GetClockInputHz+0xa4>)
1a0016e6:	e024      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0016e8:	4b16      	ldr	r3, [pc, #88]	; (1a001744 <Chip_Clock_GetClockInputHz+0xa8>)
1a0016ea:	6818      	ldr	r0, [r3, #0]
		break;
1a0016ec:	e021      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0016ee:	4b16      	ldr	r3, [pc, #88]	; (1a001748 <Chip_Clock_GetClockInputHz+0xac>)
1a0016f0:	6818      	ldr	r0, [r3, #0]
		break;
1a0016f2:	e01e      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0016f4:	4b15      	ldr	r3, [pc, #84]	; (1a00174c <Chip_Clock_GetClockInputHz+0xb0>)
1a0016f6:	6818      	ldr	r0, [r3, #0]
		break;
1a0016f8:	e01b      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0016fa:	4b14      	ldr	r3, [pc, #80]	; (1a00174c <Chip_Clock_GetClockInputHz+0xb0>)
1a0016fc:	6858      	ldr	r0, [r3, #4]
		break;
1a0016fe:	e018      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001700:	f000 f868 	bl	1a0017d4 <Chip_Clock_GetMainPLLHz>
		break;
1a001704:	e015      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001706:	2100      	movs	r1, #0
1a001708:	f000 f89a 	bl	1a001840 <Chip_Clock_GetDivRate>
		break;
1a00170c:	e011      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00170e:	2101      	movs	r1, #1
1a001710:	f000 f896 	bl	1a001840 <Chip_Clock_GetDivRate>
		break;
1a001714:	e00d      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001716:	2102      	movs	r1, #2
1a001718:	f000 f892 	bl	1a001840 <Chip_Clock_GetDivRate>
		break;
1a00171c:	e009      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00171e:	2103      	movs	r1, #3
1a001720:	f000 f88e 	bl	1a001840 <Chip_Clock_GetDivRate>
		break;
1a001724:	e005      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001726:	2104      	movs	r1, #4
1a001728:	f000 f88a 	bl	1a001840 <Chip_Clock_GetDivRate>
		break;
1a00172c:	e001      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a00172e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001732:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001734:	4806      	ldr	r0, [pc, #24]	; (1a001750 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001736:	e7fc      	b.n	1a001732 <Chip_Clock_GetClockInputHz+0x96>
1a001738:	00b71b00 	.word	0x00b71b00
1a00173c:	40043000 	.word	0x40043000
1a001740:	017d7840 	.word	0x017d7840
1a001744:	1a007754 	.word	0x1a007754
1a001748:	1a007780 	.word	0x1a007780
1a00174c:	10000a00 	.word	0x10000a00
1a001750:	02faf080 	.word	0x02faf080

1a001754 <Chip_Clock_CalcMainPLLValue>:
{
1a001754:	b538      	push	{r3, r4, r5, lr}
1a001756:	4605      	mov	r5, r0
1a001758:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00175a:	7908      	ldrb	r0, [r1, #4]
1a00175c:	f7ff ff9e 	bl	1a00169c <Chip_Clock_GetClockInputHz>
1a001760:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001762:	4b19      	ldr	r3, [pc, #100]	; (1a0017c8 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001764:	442b      	add	r3, r5
1a001766:	4a19      	ldr	r2, [pc, #100]	; (1a0017cc <Chip_Clock_CalcMainPLLValue+0x78>)
1a001768:	4293      	cmp	r3, r2
1a00176a:	d821      	bhi.n	1a0017b0 <Chip_Clock_CalcMainPLLValue+0x5c>
1a00176c:	b318      	cbz	r0, 1a0017b6 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00176e:	2380      	movs	r3, #128	; 0x80
1a001770:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001772:	2300      	movs	r3, #0
1a001774:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001776:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001778:	fbb5 f3f0 	udiv	r3, r5, r0
1a00177c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00177e:	4a14      	ldr	r2, [pc, #80]	; (1a0017d0 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001780:	4295      	cmp	r5, r2
1a001782:	d903      	bls.n	1a00178c <Chip_Clock_CalcMainPLLValue+0x38>
1a001784:	fb03 f000 	mul.w	r0, r3, r0
1a001788:	42a8      	cmp	r0, r5
1a00178a:	d007      	beq.n	1a00179c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a00178c:	4621      	mov	r1, r4
1a00178e:	4628      	mov	r0, r5
1a001790:	f7ff fe96 	bl	1a0014c0 <pll_get_frac>
		if (!ppll->nsel) {
1a001794:	68a3      	ldr	r3, [r4, #8]
1a001796:	b18b      	cbz	r3, 1a0017bc <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001798:	3b01      	subs	r3, #1
1a00179a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a00179c:	6923      	ldr	r3, [r4, #16]
1a00179e:	b183      	cbz	r3, 1a0017c2 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0017a0:	68e2      	ldr	r2, [r4, #12]
1a0017a2:	b10a      	cbz	r2, 1a0017a8 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0017a4:	3a01      	subs	r2, #1
1a0017a6:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0017a8:	3b01      	subs	r3, #1
1a0017aa:	6123      	str	r3, [r4, #16]
	return 0;
1a0017ac:	2000      	movs	r0, #0
}
1a0017ae:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0017b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0017b4:	e7fb      	b.n	1a0017ae <Chip_Clock_CalcMainPLLValue+0x5a>
1a0017b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0017ba:	e7f8      	b.n	1a0017ae <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0017bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0017c0:	e7f5      	b.n	1a0017ae <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0017c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0017c6:	e7f2      	b.n	1a0017ae <Chip_Clock_CalcMainPLLValue+0x5a>
1a0017c8:	ff6b3a10 	.word	0xff6b3a10
1a0017cc:	0b940510 	.word	0x0b940510
1a0017d0:	094c5eff 	.word	0x094c5eff

1a0017d4 <Chip_Clock_GetMainPLLHz>:
{
1a0017d4:	b530      	push	{r4, r5, lr}
1a0017d6:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0017d8:	4d17      	ldr	r5, [pc, #92]	; (1a001838 <Chip_Clock_GetMainPLLHz+0x64>)
1a0017da:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0017dc:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0017e0:	f7ff ff5c 	bl	1a00169c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0017e4:	4b15      	ldr	r3, [pc, #84]	; (1a00183c <Chip_Clock_GetMainPLLHz+0x68>)
1a0017e6:	681b      	ldr	r3, [r3, #0]
1a0017e8:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0017ea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0017ec:	f013 0f01 	tst.w	r3, #1
1a0017f0:	d020      	beq.n	1a001834 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a0017f2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0017f6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0017fa:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0017fe:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001802:	3301      	adds	r3, #1
	n = nsel + 1;
1a001804:	3201      	adds	r2, #1
	p = ptab[psel];
1a001806:	f10d 0c08 	add.w	ip, sp, #8
1a00180a:	4461      	add	r1, ip
1a00180c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001810:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001814:	d108      	bne.n	1a001828 <Chip_Clock_GetMainPLLHz+0x54>
1a001816:	b93d      	cbnz	r5, 1a001828 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001818:	0049      	lsls	r1, r1, #1
1a00181a:	fbb3 f3f1 	udiv	r3, r3, r1
1a00181e:	fbb0 f0f2 	udiv	r0, r0, r2
1a001822:	fb00 f003 	mul.w	r0, r0, r3
1a001826:	e003      	b.n	1a001830 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001828:	fbb0 f0f2 	udiv	r0, r0, r2
1a00182c:	fb03 f000 	mul.w	r0, r3, r0
}
1a001830:	b003      	add	sp, #12
1a001832:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001834:	2000      	movs	r0, #0
1a001836:	e7fb      	b.n	1a001830 <Chip_Clock_GetMainPLLHz+0x5c>
1a001838:	40050000 	.word	0x40050000
1a00183c:	1a00780c 	.word	0x1a00780c

1a001840 <Chip_Clock_GetDivRate>:
{
1a001840:	b538      	push	{r3, r4, r5, lr}
1a001842:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001844:	4608      	mov	r0, r1
1a001846:	f7ff ff0d 	bl	1a001664 <Chip_Clock_GetDividerSource>
1a00184a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00184c:	4620      	mov	r0, r4
1a00184e:	f7ff ff17 	bl	1a001680 <Chip_Clock_GetDividerDivisor>
1a001852:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001854:	4628      	mov	r0, r5
1a001856:	f7ff ff21 	bl	1a00169c <Chip_Clock_GetClockInputHz>
1a00185a:	3401      	adds	r4, #1
}
1a00185c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001860:	bd38      	pop	{r3, r4, r5, pc}
1a001862:	Address 0x000000001a001862 is out of bounds.


1a001864 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001864:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001866:	f100 0416 	add.w	r4, r0, #22
1a00186a:	00a4      	lsls	r4, r4, #2
1a00186c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001870:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001874:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001876:	281b      	cmp	r0, #27
1a001878:	d813      	bhi.n	1a0018a2 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00187a:	2911      	cmp	r1, #17
1a00187c:	d01a      	beq.n	1a0018b4 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00187e:	4d0e      	ldr	r5, [pc, #56]	; (1a0018b8 <Chip_Clock_SetBaseClock+0x54>)
1a001880:	4025      	ands	r5, r4

			if (autoblocken) {
1a001882:	b10a      	cbz	r2, 1a001888 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001884:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001888:	b10b      	cbz	r3, 1a00188e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00188a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00188e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001892:	3016      	adds	r0, #22
1a001894:	0080      	lsls	r0, r0, #2
1a001896:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00189a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00189e:	6045      	str	r5, [r0, #4]
1a0018a0:	e008      	b.n	1a0018b4 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0018a2:	f044 0401 	orr.w	r4, r4, #1
1a0018a6:	3016      	adds	r0, #22
1a0018a8:	0080      	lsls	r0, r0, #2
1a0018aa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0018ae:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0018b2:	6044      	str	r4, [r0, #4]
	}
}
1a0018b4:	bc30      	pop	{r4, r5}
1a0018b6:	4770      	bx	lr
1a0018b8:	e0fff7fe 	.word	0xe0fff7fe

1a0018bc <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0018bc:	281b      	cmp	r0, #27
1a0018be:	d80c      	bhi.n	1a0018da <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0018c0:	3016      	adds	r0, #22
1a0018c2:	0080      	lsls	r0, r0, #2
1a0018c4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0018c8:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0018cc:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0018ce:	f010 0f01 	tst.w	r0, #1
1a0018d2:	d104      	bne.n	1a0018de <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0018d4:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0018d8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0018da:	2011      	movs	r0, #17
1a0018dc:	4770      	bx	lr
		return CLKINPUT_PD;
1a0018de:	2011      	movs	r0, #17
}
1a0018e0:	4770      	bx	lr

1a0018e2 <Chip_Clock_GetBaseClocktHz>:
{
1a0018e2:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0018e4:	f7ff ffea 	bl	1a0018bc <Chip_Clock_GetBaseClock>
1a0018e8:	f7ff fed8 	bl	1a00169c <Chip_Clock_GetClockInputHz>
}
1a0018ec:	bd08      	pop	{r3, pc}
1a0018ee:	Address 0x000000001a0018ee is out of bounds.


1a0018f0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0018f0:	b971      	cbnz	r1, 1a001910 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0018f2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0018f4:	b10a      	cbz	r2, 1a0018fa <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0018f6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0018fa:	2b02      	cmp	r3, #2
1a0018fc:	d00a      	beq.n	1a001914 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0018fe:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001902:	d30a      	bcc.n	1a00191a <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001904:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001908:	4b06      	ldr	r3, [pc, #24]	; (1a001924 <Chip_Clock_EnableOpts+0x34>)
1a00190a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00190e:	4770      	bx	lr
		reg |= (1 << 1);
1a001910:	2103      	movs	r1, #3
1a001912:	e7ef      	b.n	1a0018f4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001914:	f041 0120 	orr.w	r1, r1, #32
1a001918:	e7f1      	b.n	1a0018fe <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00191a:	3020      	adds	r0, #32
1a00191c:	4b02      	ldr	r3, [pc, #8]	; (1a001928 <Chip_Clock_EnableOpts+0x38>)
1a00191e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001922:	4770      	bx	lr
1a001924:	40052000 	.word	0x40052000
1a001928:	40051000 	.word	0x40051000

1a00192c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00192c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001930:	d309      	bcc.n	1a001946 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001932:	4a09      	ldr	r2, [pc, #36]	; (1a001958 <Chip_Clock_Enable+0x2c>)
1a001934:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001938:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00193c:	f043 0301 	orr.w	r3, r3, #1
1a001940:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001944:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001946:	4a05      	ldr	r2, [pc, #20]	; (1a00195c <Chip_Clock_Enable+0x30>)
1a001948:	3020      	adds	r0, #32
1a00194a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00194e:	f043 0301 	orr.w	r3, r3, #1
1a001952:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001956:	4770      	bx	lr
1a001958:	40052000 	.word	0x40052000
1a00195c:	40051000 	.word	0x40051000

1a001960 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001960:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001962:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001966:	d309      	bcc.n	1a00197c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001968:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00196c:	4a0d      	ldr	r2, [pc, #52]	; (1a0019a4 <Chip_Clock_GetRate+0x44>)
1a00196e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001972:	f014 0f01 	tst.w	r4, #1
1a001976:	d107      	bne.n	1a001988 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001978:	2000      	movs	r0, #0
	}

	return rate;
}
1a00197a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00197c:	f100 0320 	add.w	r3, r0, #32
1a001980:	4a09      	ldr	r2, [pc, #36]	; (1a0019a8 <Chip_Clock_GetRate+0x48>)
1a001982:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001986:	e7f4      	b.n	1a001972 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001988:	f7ff fe20 	bl	1a0015cc <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00198c:	f7ff ffa9 	bl	1a0018e2 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001990:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001994:	d103      	bne.n	1a00199e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001996:	2301      	movs	r3, #1
		rate = rate / div;
1a001998:	fbb0 f0f3 	udiv	r0, r0, r3
1a00199c:	e7ed      	b.n	1a00197a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00199e:	2302      	movs	r3, #2
1a0019a0:	e7fa      	b.n	1a001998 <Chip_Clock_GetRate+0x38>
1a0019a2:	bf00      	nop
1a0019a4:	40052000 	.word	0x40052000
1a0019a8:	40051000 	.word	0x40051000

1a0019ac <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0019ac:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0019ae:	2069      	movs	r0, #105	; 0x69
1a0019b0:	f7ff ffd6 	bl	1a001960 <Chip_Clock_GetRate>
1a0019b4:	4b01      	ldr	r3, [pc, #4]	; (1a0019bc <SystemCoreClockUpdate+0x10>)
1a0019b6:	6018      	str	r0, [r3, #0]
}
1a0019b8:	bd08      	pop	{r3, pc}
1a0019ba:	bf00      	nop
1a0019bc:	10000a88 	.word	0x10000a88

1a0019c0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0019c0:	b570      	push	{r4, r5, r6, lr}
1a0019c2:	b08a      	sub	sp, #40	; 0x28
1a0019c4:	4605      	mov	r5, r0
1a0019c6:	460e      	mov	r6, r1
1a0019c8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0019ca:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0019ce:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0019d0:	2806      	cmp	r0, #6
1a0019d2:	d018      	beq.n	1a001a06 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0019d4:	2300      	movs	r3, #0
1a0019d6:	2201      	movs	r2, #1
1a0019d8:	4629      	mov	r1, r5
1a0019da:	2004      	movs	r0, #4
1a0019dc:	f7ff ff42 	bl	1a001864 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0019e0:	4a4a      	ldr	r2, [pc, #296]	; (1a001b0c <Chip_SetupCoreClock+0x14c>)
1a0019e2:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0019e4:	f043 0301 	orr.w	r3, r3, #1
1a0019e8:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0019ea:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0019ee:	a901      	add	r1, sp, #4
1a0019f0:	4630      	mov	r0, r6
1a0019f2:	f7ff feaf 	bl	1a001754 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0019f6:	4b46      	ldr	r3, [pc, #280]	; (1a001b10 <Chip_SetupCoreClock+0x150>)
1a0019f8:	429e      	cmp	r6, r3
1a0019fa:	d916      	bls.n	1a001a2a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0019fc:	9b01      	ldr	r3, [sp, #4]
1a0019fe:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001a02:	d003      	beq.n	1a001a0c <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001a04:	e7fe      	b.n	1a001a04 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001a06:	f7ff fe07 	bl	1a001618 <Chip_Clock_EnableCrystal>
1a001a0a:	e7e3      	b.n	1a0019d4 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001a0c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001a10:	d005      	beq.n	1a001a1e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001a16:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001a18:	2500      	movs	r5, #0
			direct = 1;
1a001a1a:	2601      	movs	r6, #1
1a001a1c:	e007      	b.n	1a001a2e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001a1e:	9b04      	ldr	r3, [sp, #16]
1a001a20:	3301      	adds	r3, #1
1a001a22:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001a24:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001a26:	2600      	movs	r6, #0
1a001a28:	e001      	b.n	1a001a2e <Chip_SetupCoreClock+0x6e>
1a001a2a:	2500      	movs	r5, #0
1a001a2c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001a2e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001a32:	9b01      	ldr	r3, [sp, #4]
1a001a34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001a38:	9a05      	ldr	r2, [sp, #20]
1a001a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001a3e:	9a03      	ldr	r2, [sp, #12]
1a001a40:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001a44:	9a04      	ldr	r2, [sp, #16]
1a001a46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001a4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001a4e:	4a2f      	ldr	r2, [pc, #188]	; (1a001b0c <Chip_SetupCoreClock+0x14c>)
1a001a50:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001a52:	4b2e      	ldr	r3, [pc, #184]	; (1a001b0c <Chip_SetupCoreClock+0x14c>)
1a001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001a56:	f013 0f01 	tst.w	r3, #1
1a001a5a:	d0fa      	beq.n	1a001a52 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001a5c:	2300      	movs	r3, #0
1a001a5e:	2201      	movs	r2, #1
1a001a60:	2109      	movs	r1, #9
1a001a62:	2004      	movs	r0, #4
1a001a64:	f7ff fefe 	bl	1a001864 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001a68:	b306      	cbz	r6, 1a001aac <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001a6a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001a6e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001a72:	1e5a      	subs	r2, r3, #1
1a001a74:	9209      	str	r2, [sp, #36]	; 0x24
1a001a76:	2b00      	cmp	r3, #0
1a001a78:	d1fa      	bne.n	1a001a70 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001a7a:	9b01      	ldr	r3, [sp, #4]
1a001a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001a80:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001a82:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001a86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001a8a:	9a05      	ldr	r2, [sp, #20]
1a001a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001a90:	9a03      	ldr	r2, [sp, #12]
1a001a92:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001a96:	9a04      	ldr	r2, [sp, #16]
1a001a98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001a9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001aa0:	4a1a      	ldr	r2, [pc, #104]	; (1a001b0c <Chip_SetupCoreClock+0x14c>)
1a001aa2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001aa4:	2c00      	cmp	r4, #0
1a001aa6:	d12e      	bne.n	1a001b06 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001aa8:	b00a      	add	sp, #40	; 0x28
1a001aaa:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001aac:	2d00      	cmp	r5, #0
1a001aae:	d0f9      	beq.n	1a001aa4 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001ab0:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001ab4:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001ab8:	1e5a      	subs	r2, r3, #1
1a001aba:	9209      	str	r2, [sp, #36]	; 0x24
1a001abc:	2b00      	cmp	r3, #0
1a001abe:	d1fa      	bne.n	1a001ab6 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001ac0:	9b04      	ldr	r3, [sp, #16]
1a001ac2:	1e5a      	subs	r2, r3, #1
1a001ac4:	9204      	str	r2, [sp, #16]
1a001ac6:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001aca:	9b01      	ldr	r3, [sp, #4]
1a001acc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001ad0:	9905      	ldr	r1, [sp, #20]
1a001ad2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001ad6:	9903      	ldr	r1, [sp, #12]
1a001ad8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001adc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001ae0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001ae4:	4a09      	ldr	r2, [pc, #36]	; (1a001b0c <Chip_SetupCoreClock+0x14c>)
1a001ae6:	6453      	str	r3, [r2, #68]	; 0x44
1a001ae8:	e7dc      	b.n	1a001aa4 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001aea:	480a      	ldr	r0, [pc, #40]	; (1a001b14 <Chip_SetupCoreClock+0x154>)
1a001aec:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001af0:	78cb      	ldrb	r3, [r1, #3]
1a001af2:	788a      	ldrb	r2, [r1, #2]
1a001af4:	7849      	ldrb	r1, [r1, #1]
1a001af6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001afa:	f7ff feb3 	bl	1a001864 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001afe:	3401      	adds	r4, #1
1a001b00:	2c11      	cmp	r4, #17
1a001b02:	d9f2      	bls.n	1a001aea <Chip_SetupCoreClock+0x12a>
1a001b04:	e7d0      	b.n	1a001aa8 <Chip_SetupCoreClock+0xe8>
1a001b06:	2400      	movs	r4, #0
1a001b08:	e7fa      	b.n	1a001b00 <Chip_SetupCoreClock+0x140>
1a001b0a:	bf00      	nop
1a001b0c:	40050000 	.word	0x40050000
1a001b10:	068e7780 	.word	0x068e7780
1a001b14:	1a007884 	.word	0x1a007884

1a001b18 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a001b18:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a001b1a:	6843      	ldr	r3, [r0, #4]
1a001b1c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001b20:	2b30      	cmp	r3, #48	; 0x30
1a001b22:	d04c      	beq.n	1a001bbe <Chip_I2CM_XferHandler+0xa6>
1a001b24:	d908      	bls.n	1a001b38 <Chip_I2CM_XferHandler+0x20>
1a001b26:	2b48      	cmp	r3, #72	; 0x48
1a001b28:	d06c      	beq.n	1a001c04 <Chip_I2CM_XferHandler+0xec>
1a001b2a:	d934      	bls.n	1a001b96 <Chip_I2CM_XferHandler+0x7e>
1a001b2c:	2b58      	cmp	r3, #88	; 0x58
1a001b2e:	d058      	beq.n	1a001be2 <Chip_I2CM_XferHandler+0xca>
1a001b30:	2bf8      	cmp	r3, #248	; 0xf8
1a001b32:	d13e      	bne.n	1a001bb2 <Chip_I2CM_XferHandler+0x9a>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a001b34:	2000      	movs	r0, #0
1a001b36:	e02b      	b.n	1a001b90 <Chip_I2CM_XferHandler+0x78>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001b38:	2b10      	cmp	r3, #16
1a001b3a:	d016      	beq.n	1a001b6a <Chip_I2CM_XferHandler+0x52>
1a001b3c:	d90e      	bls.n	1a001b5c <Chip_I2CM_XferHandler+0x44>
1a001b3e:	2b20      	cmp	r3, #32
1a001b40:	d03d      	beq.n	1a001bbe <Chip_I2CM_XferHandler+0xa6>
1a001b42:	2b28      	cmp	r3, #40	; 0x28
1a001b44:	d001      	beq.n	1a001b4a <Chip_I2CM_XferHandler+0x32>
1a001b46:	2b18      	cmp	r3, #24
1a001b48:	d135      	bne.n	1a001bb6 <Chip_I2CM_XferHandler+0x9e>
		if (!xfer->txSz) {
1a001b4a:	888b      	ldrh	r3, [r1, #4]
1a001b4c:	2b00      	cmp	r3, #0
1a001b4e:	d13e      	bne.n	1a001bce <Chip_I2CM_XferHandler+0xb6>
			if (xfer->rxSz) {
1a001b50:	88cb      	ldrh	r3, [r1, #6]
1a001b52:	2b00      	cmp	r3, #0
1a001b54:	d15e      	bne.n	1a001c14 <Chip_I2CM_XferHandler+0xfc>
				xfer->status = I2CM_STATUS_OK;
1a001b56:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a001b58:	232c      	movs	r3, #44	; 0x2c
1a001b5a:	e00f      	b.n	1a001b7c <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001b5c:	b91b      	cbnz	r3, 1a001b66 <Chip_I2CM_XferHandler+0x4e>
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a001b5e:	2303      	movs	r3, #3
1a001b60:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001b62:	232c      	movs	r3, #44	; 0x2c
        break;
1a001b64:	e00a      	b.n	1a001b7c <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001b66:	2b08      	cmp	r3, #8
1a001b68:	d125      	bne.n	1a001bb6 <Chip_I2CM_XferHandler+0x9e>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a001b6a:	780a      	ldrb	r2, [r1, #0]
1a001b6c:	888b      	ldrh	r3, [r1, #4]
1a001b6e:	fab3 f383 	clz	r3, r3
1a001b72:	095b      	lsrs	r3, r3, #5
1a001b74:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a001b78:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a001b7a:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a001b7c:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a001b80:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a001b82:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a001b86:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a001b88:	8848      	ldrh	r0, [r1, #2]
1a001b8a:	38ff      	subs	r0, #255	; 0xff
1a001b8c:	bf18      	it	ne
1a001b8e:	2001      	movne	r0, #1
}
1a001b90:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001b94:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001b96:	2b38      	cmp	r3, #56	; 0x38
1a001b98:	d038      	beq.n	1a001c0c <Chip_I2CM_XferHandler+0xf4>
1a001b9a:	2b40      	cmp	r3, #64	; 0x40
1a001b9c:	d10b      	bne.n	1a001bb6 <Chip_I2CM_XferHandler+0x9e>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a001b9e:	88ca      	ldrh	r2, [r1, #6]
1a001ba0:	2a01      	cmp	r2, #1
1a001ba2:	d927      	bls.n	1a001bf4 <Chip_I2CM_XferHandler+0xdc>
			cclr &= ~I2C_CON_AA;
1a001ba4:	2338      	movs	r3, #56	; 0x38
		if (xfer->rxSz == 0) {
1a001ba6:	2a00      	cmp	r2, #0
1a001ba8:	d1e8      	bne.n	1a001b7c <Chip_I2CM_XferHandler+0x64>
			xfer->status = I2CM_STATUS_OK;
1a001baa:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a001bac:	f023 0310 	bic.w	r3, r3, #16
1a001bb0:	e7e4      	b.n	1a001b7c <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001bb2:	2b50      	cmp	r3, #80	; 0x50
1a001bb4:	d015      	beq.n	1a001be2 <Chip_I2CM_XferHandler+0xca>
		xfer->status = I2CM_STATUS_ERROR;
1a001bb6:	2301      	movs	r3, #1
1a001bb8:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001bba:	232c      	movs	r3, #44	; 0x2c
        break;
1a001bbc:	e7de      	b.n	1a001b7c <Chip_I2CM_XferHandler+0x64>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a001bbe:	784b      	ldrb	r3, [r1, #1]
1a001bc0:	f013 0f01 	tst.w	r3, #1
1a001bc4:	d1c1      	bne.n	1a001b4a <Chip_I2CM_XferHandler+0x32>
			xfer->status = I2CM_STATUS_NAK;
1a001bc6:	2302      	movs	r3, #2
1a001bc8:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a001bca:	232c      	movs	r3, #44	; 0x2c
			break;
1a001bcc:	e7d6      	b.n	1a001b7c <Chip_I2CM_XferHandler+0x64>
			pI2C->DAT = *xfer->txBuff++;
1a001bce:	688b      	ldr	r3, [r1, #8]
1a001bd0:	1c5a      	adds	r2, r3, #1
1a001bd2:	608a      	str	r2, [r1, #8]
1a001bd4:	781b      	ldrb	r3, [r3, #0]
1a001bd6:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a001bd8:	888b      	ldrh	r3, [r1, #4]
1a001bda:	3b01      	subs	r3, #1
1a001bdc:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a001bde:	233c      	movs	r3, #60	; 0x3c
1a001be0:	e7cc      	b.n	1a001b7c <Chip_I2CM_XferHandler+0x64>
		*xfer->rxBuff++ = pI2C->DAT;
1a001be2:	6882      	ldr	r2, [r0, #8]
1a001be4:	68cb      	ldr	r3, [r1, #12]
1a001be6:	1c5c      	adds	r4, r3, #1
1a001be8:	60cc      	str	r4, [r1, #12]
1a001bea:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a001bec:	88cb      	ldrh	r3, [r1, #6]
1a001bee:	3b01      	subs	r3, #1
1a001bf0:	80cb      	strh	r3, [r1, #6]
1a001bf2:	e7d4      	b.n	1a001b9e <Chip_I2CM_XferHandler+0x86>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a001bf4:	784b      	ldrb	r3, [r1, #1]
1a001bf6:	f013 0f02 	tst.w	r3, #2
1a001bfa:	d101      	bne.n	1a001c00 <Chip_I2CM_XferHandler+0xe8>
	uint32_t cclr = I2C_CON_FLAGS;
1a001bfc:	233c      	movs	r3, #60	; 0x3c
1a001bfe:	e7d2      	b.n	1a001ba6 <Chip_I2CM_XferHandler+0x8e>
			cclr &= ~I2C_CON_AA;
1a001c00:	2338      	movs	r3, #56	; 0x38
1a001c02:	e7d0      	b.n	1a001ba6 <Chip_I2CM_XferHandler+0x8e>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a001c04:	2304      	movs	r3, #4
1a001c06:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001c08:	232c      	movs	r3, #44	; 0x2c
		break;
1a001c0a:	e7b7      	b.n	1a001b7c <Chip_I2CM_XferHandler+0x64>
		xfer->status = I2CM_STATUS_ARBLOST;
1a001c0c:	2305      	movs	r3, #5
1a001c0e:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a001c10:	233c      	movs	r3, #60	; 0x3c
		break;
1a001c12:	e7b3      	b.n	1a001b7c <Chip_I2CM_XferHandler+0x64>
				cclr &= ~I2C_CON_STA;
1a001c14:	231c      	movs	r3, #28
1a001c16:	e7b1      	b.n	1a001b7c <Chip_I2CM_XferHandler+0x64>

1a001c18 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a001c18:	23ff      	movs	r3, #255	; 0xff
1a001c1a:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a001c1c:	232c      	movs	r3, #44	; 0x2c
1a001c1e:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a001c20:	2360      	movs	r3, #96	; 0x60
1a001c22:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a001c24:	4770      	bx	lr

1a001c26 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a001c26:	b538      	push	{r3, r4, r5, lr}
1a001c28:	4604      	mov	r4, r0
1a001c2a:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a001c2c:	f7ff fff4 	bl	1a001c18 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a001c30:	2000      	movs	r0, #0

	while (ret == 0) {
1a001c32:	e003      	b.n	1a001c3c <Chip_I2CM_XferBlocking+0x16>
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a001c34:	4629      	mov	r1, r5
1a001c36:	4620      	mov	r0, r4
1a001c38:	f7ff ff6e 	bl	1a001b18 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a001c3c:	b920      	cbnz	r0, 1a001c48 <Chip_I2CM_XferBlocking+0x22>
	return pI2C->CONSET & I2C_CON_SI;
1a001c3e:	6823      	ldr	r3, [r4, #0]
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a001c40:	f013 0f08 	tst.w	r3, #8
1a001c44:	d0fb      	beq.n	1a001c3e <Chip_I2CM_XferBlocking+0x18>
1a001c46:	e7f5      	b.n	1a001c34 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a001c48:	bd38      	pop	{r3, r4, r5, pc}

1a001c4a <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001c4a:	4770      	bx	lr

1a001c4c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001c4c:	4b03      	ldr	r3, [pc, #12]	; (1a001c5c <Chip_SSP_GetClockIndex+0x10>)
1a001c4e:	4298      	cmp	r0, r3
1a001c50:	d001      	beq.n	1a001c56 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001c52:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001c54:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001c56:	20a5      	movs	r0, #165	; 0xa5
1a001c58:	4770      	bx	lr
1a001c5a:	bf00      	nop
1a001c5c:	400c5000 	.word	0x400c5000

1a001c60 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001c60:	4b04      	ldr	r3, [pc, #16]	; (1a001c74 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001c62:	4298      	cmp	r0, r3
1a001c64:	d002      	beq.n	1a001c6c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001c66:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001c6a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001c6c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001c70:	4770      	bx	lr
1a001c72:	bf00      	nop
1a001c74:	400c5000 	.word	0x400c5000

1a001c78 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001c78:	6803      	ldr	r3, [r0, #0]
1a001c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001c7e:	0209      	lsls	r1, r1, #8
1a001c80:	b289      	uxth	r1, r1
1a001c82:	4319      	orrs	r1, r3
1a001c84:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001c86:	6102      	str	r2, [r0, #16]
}
1a001c88:	4770      	bx	lr

1a001c8a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001c8a:	b570      	push	{r4, r5, r6, lr}
1a001c8c:	4606      	mov	r6, r0
1a001c8e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001c90:	f7ff ffe6 	bl	1a001c60 <Chip_SSP_GetPeriphClockIndex>
1a001c94:	f7ff fe64 	bl	1a001960 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001c98:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a001c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001c9e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001ca0:	e000      	b.n	1a001ca4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001ca2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001ca4:	42ab      	cmp	r3, r5
1a001ca6:	d90b      	bls.n	1a001cc0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001ca8:	1c4c      	adds	r4, r1, #1
1a001caa:	fb02 f304 	mul.w	r3, r2, r4
1a001cae:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001cb2:	429d      	cmp	r5, r3
1a001cb4:	d2f6      	bcs.n	1a001ca4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001cb6:	2cff      	cmp	r4, #255	; 0xff
1a001cb8:	d9f3      	bls.n	1a001ca2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001cba:	3202      	adds	r2, #2
				cr0_div = 0;
1a001cbc:	2100      	movs	r1, #0
1a001cbe:	e7f1      	b.n	1a001ca4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001cc0:	4630      	mov	r0, r6
1a001cc2:	f7ff ffd9 	bl	1a001c78 <Chip_SSP_SetClockRate>
}
1a001cc6:	bd70      	pop	{r4, r5, r6, pc}

1a001cc8 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001cc8:	b510      	push	{r4, lr}
1a001cca:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001ccc:	f7ff ffbe 	bl	1a001c4c <Chip_SSP_GetClockIndex>
1a001cd0:	f7ff fe2c 	bl	1a00192c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001cd4:	4620      	mov	r0, r4
1a001cd6:	f7ff ffc3 	bl	1a001c60 <Chip_SSP_GetPeriphClockIndex>
1a001cda:	f7ff fe27 	bl	1a00192c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001cde:	6863      	ldr	r3, [r4, #4]
1a001ce0:	f023 0304 	bic.w	r3, r3, #4
1a001ce4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001ce6:	6823      	ldr	r3, [r4, #0]
1a001ce8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001cec:	f043 0307 	orr.w	r3, r3, #7
1a001cf0:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001cf2:	4902      	ldr	r1, [pc, #8]	; (1a001cfc <Chip_SSP_Init+0x34>)
1a001cf4:	4620      	mov	r0, r4
1a001cf6:	f7ff ffc8 	bl	1a001c8a <Chip_SSP_SetBitRate>
}
1a001cfa:	bd10      	pop	{r4, pc}
1a001cfc:	000186a0 	.word	0x000186a0

1a001d00 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001d00:	2901      	cmp	r1, #1
1a001d02:	d109      	bne.n	1a001d18 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001d04:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001d08:	0082      	lsls	r2, r0, #2
1a001d0a:	4b04      	ldr	r3, [pc, #16]	; (1a001d1c <Chip_I2C_EventHandler+0x1c>)
1a001d0c:	4413      	add	r3, r2
1a001d0e:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001d10:	7d13      	ldrb	r3, [r2, #20]
1a001d12:	b2db      	uxtb	r3, r3
1a001d14:	2b04      	cmp	r3, #4
1a001d16:	d0fb      	beq.n	1a001d10 <Chip_I2C_EventHandler+0x10>
}
1a001d18:	4770      	bx	lr
1a001d1a:	bf00      	nop
1a001d1c:	10000004 	.word	0x10000004

1a001d20 <handleMasterXferState>:
{
1a001d20:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a001d22:	6843      	ldr	r3, [r0, #4]
1a001d24:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a001d28:	2b58      	cmp	r3, #88	; 0x58
1a001d2a:	d87f      	bhi.n	1a001e2c <handleMasterXferState+0x10c>
1a001d2c:	e8df f003 	tbb	[pc, r3]
1a001d30:	7e7e7e7a 	.word	0x7e7e7e7a
1a001d34:	7e7e7e7e 	.word	0x7e7e7e7e
1a001d38:	7e7e7e2f 	.word	0x7e7e7e2f
1a001d3c:	7e7e7e7e 	.word	0x7e7e7e7e
1a001d40:	7e7e7e2f 	.word	0x7e7e7e2f
1a001d44:	7e7e7e7e 	.word	0x7e7e7e7e
1a001d48:	7e7e7e39 	.word	0x7e7e7e39
1a001d4c:	7e7e7e7e 	.word	0x7e7e7e7e
1a001d50:	7e7e7e6e 	.word	0x7e7e7e6e
1a001d54:	7e7e7e7e 	.word	0x7e7e7e7e
1a001d58:	7e7e7e39 	.word	0x7e7e7e39
1a001d5c:	7e7e7e7e 	.word	0x7e7e7e7e
1a001d60:	7e7e7e72 	.word	0x7e7e7e72
1a001d64:	7e7e7e7e 	.word	0x7e7e7e7e
1a001d68:	7e7e7e76 	.word	0x7e7e7e76
1a001d6c:	7e7e7e7e 	.word	0x7e7e7e7e
1a001d70:	7e7e7e6c 	.word	0x7e7e7e6c
1a001d74:	7e7e7e7e 	.word	0x7e7e7e7e
1a001d78:	7e7e7e6e 	.word	0x7e7e7e6e
1a001d7c:	7e7e7e7e 	.word	0x7e7e7e7e
1a001d80:	7e7e7e2d 	.word	0x7e7e7e2d
1a001d84:	7e7e7e7e 	.word	0x7e7e7e7e
1a001d88:	4f          	.byte	0x4f
1a001d89:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a001d8a:	233c      	movs	r3, #60	; 0x3c
1a001d8c:	e020      	b.n	1a001dd0 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a001d8e:	780a      	ldrb	r2, [r1, #0]
1a001d90:	688b      	ldr	r3, [r1, #8]
1a001d92:	fab3 f383 	clz	r3, r3
1a001d96:	095b      	lsrs	r3, r3, #5
1a001d98:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a001d9c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a001d9e:	233c      	movs	r3, #60	; 0x3c
		break;
1a001da0:	e023      	b.n	1a001dea <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a001da2:	688b      	ldr	r3, [r1, #8]
1a001da4:	b94b      	cbnz	r3, 1a001dba <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a001da6:	690b      	ldr	r3, [r1, #16]
1a001da8:	b123      	cbz	r3, 1a001db4 <handleMasterXferState+0x94>
1a001daa:	f06f 0320 	mvn.w	r3, #32
1a001dae:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a001db2:	e01a      	b.n	1a001dea <handleMasterXferState+0xca>
1a001db4:	f06f 0310 	mvn.w	r3, #16
1a001db8:	e7f9      	b.n	1a001dae <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a001dba:	684b      	ldr	r3, [r1, #4]
1a001dbc:	1c5a      	adds	r2, r3, #1
1a001dbe:	604a      	str	r2, [r1, #4]
1a001dc0:	781b      	ldrb	r3, [r3, #0]
1a001dc2:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a001dc4:	688b      	ldr	r3, [r1, #8]
1a001dc6:	3b01      	subs	r3, #1
1a001dc8:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a001dca:	233c      	movs	r3, #60	; 0x3c
1a001dcc:	e00d      	b.n	1a001dea <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a001dce:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a001dd0:	6884      	ldr	r4, [r0, #8]
1a001dd2:	68ca      	ldr	r2, [r1, #12]
1a001dd4:	1c55      	adds	r5, r2, #1
1a001dd6:	60cd      	str	r5, [r1, #12]
1a001dd8:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a001dda:	690a      	ldr	r2, [r1, #16]
1a001ddc:	3a01      	subs	r2, #1
1a001dde:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a001de0:	690a      	ldr	r2, [r1, #16]
1a001de2:	2a01      	cmp	r2, #1
1a001de4:	dd01      	ble.n	1a001dea <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a001de6:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a001dea:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a001dee:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a001df0:	f023 0210 	bic.w	r2, r3, #16
1a001df4:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a001df6:	f013 0f10 	tst.w	r3, #16
1a001dfa:	d019      	beq.n	1a001e30 <handleMasterXferState+0x110>
1a001dfc:	7d0b      	ldrb	r3, [r1, #20]
1a001dfe:	2b02      	cmp	r3, #2
1a001e00:	d016      	beq.n	1a001e30 <handleMasterXferState+0x110>
	return 1;
1a001e02:	2001      	movs	r0, #1
}
1a001e04:	bc30      	pop	{r4, r5}
1a001e06:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a001e08:	233c      	movs	r3, #60	; 0x3c
1a001e0a:	e7e9      	b.n	1a001de0 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a001e0c:	2305      	movs	r3, #5
1a001e0e:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a001e10:	232c      	movs	r3, #44	; 0x2c
		break;
1a001e12:	e7ea      	b.n	1a001dea <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a001e14:	2301      	movs	r3, #1
1a001e16:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a001e18:	232c      	movs	r3, #44	; 0x2c
		break;
1a001e1a:	e7e6      	b.n	1a001dea <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a001e1c:	2302      	movs	r3, #2
1a001e1e:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a001e20:	233c      	movs	r3, #60	; 0x3c
		break;
1a001e22:	e7e2      	b.n	1a001dea <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a001e24:	2303      	movs	r3, #3
1a001e26:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a001e28:	232c      	movs	r3, #44	; 0x2c
1a001e2a:	e7de      	b.n	1a001dea <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a001e2c:	233c      	movs	r3, #60	; 0x3c
1a001e2e:	e7dc      	b.n	1a001dea <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a001e30:	7d0b      	ldrb	r3, [r1, #20]
1a001e32:	2b04      	cmp	r3, #4
1a001e34:	d001      	beq.n	1a001e3a <handleMasterXferState+0x11a>
		return 0;
1a001e36:	2000      	movs	r0, #0
1a001e38:	e7e4      	b.n	1a001e04 <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a001e3a:	2300      	movs	r3, #0
1a001e3c:	750b      	strb	r3, [r1, #20]
1a001e3e:	e7fa      	b.n	1a001e36 <handleMasterXferState+0x116>

1a001e40 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001e40:	b570      	push	{r4, r5, r6, lr}
1a001e42:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001e44:	4e06      	ldr	r6, [pc, #24]	; (1a001e60 <Chip_I2C_Init+0x20>)
1a001e46:	00c4      	lsls	r4, r0, #3
1a001e48:	1a22      	subs	r2, r4, r0
1a001e4a:	0093      	lsls	r3, r2, #2
1a001e4c:	4433      	add	r3, r6
1a001e4e:	8898      	ldrh	r0, [r3, #4]
1a001e50:	f7ff fd6c 	bl	1a00192c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001e54:	1b64      	subs	r4, r4, r5
1a001e56:	00a3      	lsls	r3, r4, #2
1a001e58:	58f3      	ldr	r3, [r6, r3]
1a001e5a:	226c      	movs	r2, #108	; 0x6c
1a001e5c:	619a      	str	r2, [r3, #24]
}
1a001e5e:	bd70      	pop	{r4, r5, r6, pc}
1a001e60:	10000004 	.word	0x10000004

1a001e64 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001e68:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a001e6a:	4e0b      	ldr	r6, [pc, #44]	; (1a001e98 <Chip_I2C_SetClockRate+0x34>)
1a001e6c:	00c5      	lsls	r5, r0, #3
1a001e6e:	1a2b      	subs	r3, r5, r0
1a001e70:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001e74:	eb06 0308 	add.w	r3, r6, r8
1a001e78:	8898      	ldrh	r0, [r3, #4]
1a001e7a:	f7ff fd71 	bl	1a001960 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001e7e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001e82:	f856 3008 	ldr.w	r3, [r6, r8]
1a001e86:	0842      	lsrs	r2, r0, #1
1a001e88:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a001e8a:	f856 3008 	ldr.w	r3, [r6, r8]
1a001e8e:	691a      	ldr	r2, [r3, #16]
1a001e90:	1a80      	subs	r0, r0, r2
1a001e92:	6158      	str	r0, [r3, #20]
}
1a001e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001e98:	10000004 	.word	0x10000004

1a001e9c <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a001e9c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001ea0:	009a      	lsls	r2, r3, #2
1a001ea2:	4b09      	ldr	r3, [pc, #36]	; (1a001ec8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001ea4:	4413      	add	r3, r2
1a001ea6:	691b      	ldr	r3, [r3, #16]
1a001ea8:	b153      	cbz	r3, 1a001ec0 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a001eaa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001eae:	0082      	lsls	r2, r0, #2
1a001eb0:	4b05      	ldr	r3, [pc, #20]	; (1a001ec8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001eb2:	4413      	add	r3, r2
1a001eb4:	6898      	ldr	r0, [r3, #8]
}
1a001eb6:	4288      	cmp	r0, r1
1a001eb8:	bf14      	ite	ne
1a001eba:	2000      	movne	r0, #0
1a001ebc:	2001      	moveq	r0, #1
1a001ebe:	4770      	bx	lr
		iic->mEvent = event;
1a001ec0:	4b01      	ldr	r3, [pc, #4]	; (1a001ec8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001ec2:	4413      	add	r3, r2
1a001ec4:	6099      	str	r1, [r3, #8]
1a001ec6:	e7f0      	b.n	1a001eaa <Chip_I2C_SetMasterEventHandler+0xe>
1a001ec8:	10000004 	.word	0x10000004

1a001ecc <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a001ecc:	b510      	push	{r4, lr}
1a001ece:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a001ed0:	4809      	ldr	r0, [pc, #36]	; (1a001ef8 <Chip_I2C_MasterStateHandler+0x2c>)
1a001ed2:	00e3      	lsls	r3, r4, #3
1a001ed4:	1b1b      	subs	r3, r3, r4
1a001ed6:	009a      	lsls	r2, r3, #2
1a001ed8:	1883      	adds	r3, r0, r2
1a001eda:	6919      	ldr	r1, [r3, #16]
1a001edc:	5880      	ldr	r0, [r0, r2]
1a001ede:	f7ff ff1f 	bl	1a001d20 <handleMasterXferState>
1a001ee2:	b940      	cbnz	r0, 1a001ef6 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a001ee4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a001ee8:	009a      	lsls	r2, r3, #2
1a001eea:	4b03      	ldr	r3, [pc, #12]	; (1a001ef8 <Chip_I2C_MasterStateHandler+0x2c>)
1a001eec:	4413      	add	r3, r2
1a001eee:	689b      	ldr	r3, [r3, #8]
1a001ef0:	2102      	movs	r1, #2
1a001ef2:	4620      	mov	r0, r4
1a001ef4:	4798      	blx	r3
	}
}
1a001ef6:	bd10      	pop	{r4, pc}
1a001ef8:	10000004 	.word	0x10000004

1a001efc <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a001efc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001f00:	0083      	lsls	r3, r0, #2
1a001f02:	4a03      	ldr	r2, [pc, #12]	; (1a001f10 <Chip_I2C_IsStateChanged+0x14>)
1a001f04:	58d3      	ldr	r3, [r2, r3]
1a001f06:	6818      	ldr	r0, [r3, #0]
}
1a001f08:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a001f0c:	4770      	bx	lr
1a001f0e:	bf00      	nop
1a001f10:	10000004 	.word	0x10000004

1a001f14 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a001f14:	2901      	cmp	r1, #1
1a001f16:	d115      	bne.n	1a001f44 <Chip_I2C_EventHandlerPolling+0x30>
{
1a001f18:	b538      	push	{r3, r4, r5, lr}
1a001f1a:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a001f1c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001f20:	009a      	lsls	r2, r3, #2
1a001f22:	4b09      	ldr	r3, [pc, #36]	; (1a001f48 <Chip_I2C_EventHandlerPolling+0x34>)
1a001f24:	4413      	add	r3, r2
1a001f26:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a001f28:	7d2b      	ldrb	r3, [r5, #20]
1a001f2a:	b2db      	uxtb	r3, r3
1a001f2c:	2b04      	cmp	r3, #4
1a001f2e:	d108      	bne.n	1a001f42 <Chip_I2C_EventHandlerPolling+0x2e>
		if (Chip_I2C_IsStateChanged(id)) {
1a001f30:	4620      	mov	r0, r4
1a001f32:	f7ff ffe3 	bl	1a001efc <Chip_I2C_IsStateChanged>
1a001f36:	2800      	cmp	r0, #0
1a001f38:	d0f6      	beq.n	1a001f28 <Chip_I2C_EventHandlerPolling+0x14>
			Chip_I2C_MasterStateHandler(id);
1a001f3a:	4620      	mov	r0, r4
1a001f3c:	f7ff ffc6 	bl	1a001ecc <Chip_I2C_MasterStateHandler>
1a001f40:	e7f2      	b.n	1a001f28 <Chip_I2C_EventHandlerPolling+0x14>
}
1a001f42:	bd38      	pop	{r3, r4, r5, pc}
1a001f44:	4770      	bx	lr
1a001f46:	bf00      	nop
1a001f48:	10000004 	.word	0x10000004

1a001f4c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001f4c:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001f4e:	4a0b      	ldr	r2, [pc, #44]	; (1a001f7c <SystemInit+0x30>)
1a001f50:	4b0b      	ldr	r3, [pc, #44]	; (1a001f80 <SystemInit+0x34>)
1a001f52:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001f54:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001f58:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001f5a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001f5e:	2b20      	cmp	r3, #32
1a001f60:	d004      	beq.n	1a001f6c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a001f62:	f7ff f925 	bl	1a0011b0 <Board_SystemInit>
   Board_Init();
1a001f66:	f7ff f8b5 	bl	1a0010d4 <Board_Init>
}
1a001f6a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001f6c:	4a04      	ldr	r2, [pc, #16]	; (1a001f80 <SystemInit+0x34>)
1a001f6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001f72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001f76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001f7a:	e7f2      	b.n	1a001f62 <SystemInit+0x16>
1a001f7c:	1a000000 	.word	0x1a000000
1a001f80:	e000ed00 	.word	0xe000ed00

1a001f84 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001f84:	4b04      	ldr	r3, [pc, #16]	; (1a001f98 <cyclesCounterInit+0x14>)
1a001f86:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001f88:	4a04      	ldr	r2, [pc, #16]	; (1a001f9c <cyclesCounterInit+0x18>)
1a001f8a:	6813      	ldr	r3, [r2, #0]
1a001f8c:	f043 0301 	orr.w	r3, r3, #1
1a001f90:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001f92:	2001      	movs	r0, #1
1a001f94:	4770      	bx	lr
1a001f96:	bf00      	nop
1a001f98:	1000003c 	.word	0x1000003c
1a001f9c:	e0001000 	.word	0xe0001000

1a001fa0 <sleepUntilNextInterrupt>:
 */
void sleepUntilNextInterrupt( void )
{

   /* Instert an assembly instruction wfi (wait for interrupt) */
   __asm volatile( "wfi" );
1a001fa0:	bf30      	wfi

}
1a001fa2:	4770      	bx	lr

1a001fa4 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001fa4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001fa8:	0083      	lsls	r3, r0, #2
1a001faa:	4a03      	ldr	r2, [pc, #12]	; (1a001fb8 <uartTxReady+0x14>)
1a001fac:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001fae:	6958      	ldr	r0, [r3, #20]
}
1a001fb0:	f000 0020 	and.w	r0, r0, #32
1a001fb4:	4770      	bx	lr
1a001fb6:	bf00      	nop
1a001fb8:	1a0078cc 	.word	0x1a0078cc

1a001fbc <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001fbc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001fc0:	0083      	lsls	r3, r0, #2
1a001fc2:	4a02      	ldr	r2, [pc, #8]	; (1a001fcc <uartTxWrite+0x10>)
1a001fc4:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a001fc6:	6019      	str	r1, [r3, #0]
}
1a001fc8:	4770      	bx	lr
1a001fca:	bf00      	nop
1a001fcc:	1a0078cc 	.word	0x1a0078cc

1a001fd0 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a001fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001fd4:	4680      	mov	r8, r0
1a001fd6:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001fd8:	4c19      	ldr	r4, [pc, #100]	; (1a002040 <uartInit+0x70>)
1a001fda:	0045      	lsls	r5, r0, #1
1a001fdc:	182a      	adds	r2, r5, r0
1a001fde:	0093      	lsls	r3, r2, #2
1a001fe0:	18e6      	adds	r6, r4, r3
1a001fe2:	58e7      	ldr	r7, [r4, r3]
1a001fe4:	4638      	mov	r0, r7
1a001fe6:	f7ff f8ff 	bl	1a0011e8 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001fea:	4649      	mov	r1, r9
1a001fec:	4638      	mov	r0, r7
1a001fee:	f7ff f925 	bl	1a00123c <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001ff2:	2307      	movs	r3, #7
1a001ff4:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001ff6:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001ff8:	2301      	movs	r3, #1
1a001ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001ffc:	7930      	ldrb	r0, [r6, #4]
1a001ffe:	7973      	ldrb	r3, [r6, #5]
1a002000:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002002:	f042 0218 	orr.w	r2, r2, #24
1a002006:	490f      	ldr	r1, [pc, #60]	; (1a002044 <uartInit+0x74>)
1a002008:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002010:	79f0      	ldrb	r0, [r6, #7]
1a002012:	7a33      	ldrb	r3, [r6, #8]
1a002014:	7a72      	ldrb	r2, [r6, #9]
1a002016:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00201a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a002022:	f1b8 0f01 	cmp.w	r8, #1
1a002026:	d001      	beq.n	1a00202c <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a002028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a00202c:	4a06      	ldr	r2, [pc, #24]	; (1a002048 <uartInit+0x78>)
1a00202e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002030:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002034:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002036:	221a      	movs	r2, #26
1a002038:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a00203c:	e7f4      	b.n	1a002028 <uartInit+0x58>
1a00203e:	bf00      	nop
1a002040:	1a0078cc 	.word	0x1a0078cc
1a002044:	40086000 	.word	0x40086000
1a002048:	40081000 	.word	0x40081000

1a00204c <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a00204c:	b538      	push	{r3, r4, r5, lr}
1a00204e:	4604      	mov	r4, r0
1a002050:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a002052:	4620      	mov	r0, r4
1a002054:	f7ff ffa6 	bl	1a001fa4 <uartTxReady>
1a002058:	2800      	cmp	r0, #0
1a00205a:	d0fa      	beq.n	1a002052 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a00205c:	4629      	mov	r1, r5
1a00205e:	4620      	mov	r0, r4
1a002060:	f7ff ffac 	bl	1a001fbc <uartTxWrite>
}
1a002064:	bd38      	pop	{r3, r4, r5, pc}

1a002066 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a002066:	b538      	push	{r3, r4, r5, lr}
1a002068:	4605      	mov	r5, r0
1a00206a:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a00206c:	7821      	ldrb	r1, [r4, #0]
1a00206e:	b121      	cbz	r1, 1a00207a <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a002070:	4628      	mov	r0, r5
1a002072:	f7ff ffeb 	bl	1a00204c <uartWriteByte>
      str++;
1a002076:	3401      	adds	r4, #1
1a002078:	e7f8      	b.n	1a00206c <uartWriteString+0x6>
   }
}
1a00207a:	bd38      	pop	{r3, r4, r5, pc}

1a00207c <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a00207c:	b118      	cbz	r0, 1a002086 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00207e:	4b04      	ldr	r3, [pc, #16]	; (1a002090 <tickPowerSet+0x14>)
1a002080:	2207      	movs	r2, #7
1a002082:	601a      	str	r2, [r3, #0]
1a002084:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a002086:	4b02      	ldr	r3, [pc, #8]	; (1a002090 <tickPowerSet+0x14>)
1a002088:	2200      	movs	r2, #0
1a00208a:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a00208c:	4770      	bx	lr
1a00208e:	bf00      	nop
1a002090:	e000e010 	.word	0xe000e010

1a002094 <tickInit>:
{
1a002094:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a002096:	ea50 0401 	orrs.w	r4, r0, r1
1a00209a:	d02a      	beq.n	1a0020f2 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a00209c:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0020a0:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0020a4:	2b00      	cmp	r3, #0
1a0020a6:	bf08      	it	eq
1a0020a8:	2a32      	cmpeq	r2, #50	; 0x32
1a0020aa:	d227      	bcs.n	1a0020fc <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0020ac:	4b14      	ldr	r3, [pc, #80]	; (1a002100 <tickInit+0x6c>)
1a0020ae:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0020b2:	4b14      	ldr	r3, [pc, #80]	; (1a002104 <tickInit+0x70>)
1a0020b4:	681b      	ldr	r3, [r3, #0]
1a0020b6:	fba3 4500 	umull	r4, r5, r3, r0
1a0020ba:	fb03 5501 	mla	r5, r3, r1, r5
1a0020be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0020c2:	2300      	movs	r3, #0
1a0020c4:	4620      	mov	r0, r4
1a0020c6:	4629      	mov	r1, r5
1a0020c8:	f000 ffd6 	bl	1a003078 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0020cc:	3801      	subs	r0, #1
1a0020ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0020d2:	d209      	bcs.n	1a0020e8 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0020d4:	4b0c      	ldr	r3, [pc, #48]	; (1a002108 <tickInit+0x74>)
1a0020d6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0020d8:	4a0c      	ldr	r2, [pc, #48]	; (1a00210c <tickInit+0x78>)
1a0020da:	21e0      	movs	r1, #224	; 0xe0
1a0020dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0020e0:	2200      	movs	r2, #0
1a0020e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0020e4:	2207      	movs	r2, #7
1a0020e6:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0020e8:	2001      	movs	r0, #1
1a0020ea:	f7ff ffc7 	bl	1a00207c <tickPowerSet>
      bool_t ret_val = 1;
1a0020ee:	2001      	movs	r0, #1
}
1a0020f0:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a0020f2:	2000      	movs	r0, #0
1a0020f4:	f7ff ffc2 	bl	1a00207c <tickPowerSet>
         ret_val = 0;
1a0020f8:	2000      	movs	r0, #0
1a0020fa:	e7f9      	b.n	1a0020f0 <tickInit+0x5c>
            ret_val = 0;
1a0020fc:	2000      	movs	r0, #0
1a0020fe:	e7f7      	b.n	1a0020f0 <tickInit+0x5c>
1a002100:	10000040 	.word	0x10000040
1a002104:	10000a88 	.word	0x10000a88
1a002108:	e000e010 	.word	0xe000e010
1a00210c:	e000ed00 	.word	0xe000ed00

1a002110 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a002110:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a002112:	4a07      	ldr	r2, [pc, #28]	; (1a002130 <SysTick_Handler+0x20>)
1a002114:	6813      	ldr	r3, [r2, #0]
1a002116:	6851      	ldr	r1, [r2, #4]
1a002118:	3301      	adds	r3, #1
1a00211a:	f141 0100 	adc.w	r1, r1, #0
1a00211e:	6013      	str	r3, [r2, #0]
1a002120:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002122:	4b04      	ldr	r3, [pc, #16]	; (1a002134 <SysTick_Handler+0x24>)
1a002124:	681b      	ldr	r3, [r3, #0]
1a002126:	b113      	cbz	r3, 1a00212e <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a002128:	4a03      	ldr	r2, [pc, #12]	; (1a002138 <SysTick_Handler+0x28>)
1a00212a:	6810      	ldr	r0, [r2, #0]
1a00212c:	4798      	blx	r3
   }
}
1a00212e:	bd08      	pop	{r3, pc}
1a002130:	10000a10 	.word	0x10000a10
1a002134:	10000a18 	.word	0x10000a18
1a002138:	10000a08 	.word	0x10000a08

1a00213c <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a00213c:	b538      	push	{r3, r4, r5, lr}
1a00213e:	4604      	mov	r4, r0
1a002140:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002142:	4b08      	ldr	r3, [pc, #32]	; (1a002164 <i2cHardwareInit+0x28>)
1a002144:	f640 0208 	movw	r2, #2056	; 0x808
1a002148:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a00214c:	f7ff fe78 	bl	1a001e40 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a002150:	4629      	mov	r1, r5
1a002152:	4620      	mov	r0, r4
1a002154:	f7ff fe86 	bl	1a001e64 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a002158:	4903      	ldr	r1, [pc, #12]	; (1a002168 <i2cHardwareInit+0x2c>)
1a00215a:	4620      	mov	r0, r4
1a00215c:	f7ff fe9e 	bl	1a001e9c <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a002160:	2001      	movs	r0, #1
1a002162:	bd38      	pop	{r3, r4, r5, pc}
1a002164:	40086000 	.word	0x40086000
1a002168:	1a001f15 	.word	0x1a001f15

1a00216c <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a00216c:	b500      	push	{lr}
1a00216e:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a002170:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a002174:	2100      	movs	r1, #0
1a002176:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a00217a:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a00217e:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a002180:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a002184:	9b07      	ldr	r3, [sp, #28]
1a002186:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a002188:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a00218c:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a002190:	4669      	mov	r1, sp
1a002192:	4805      	ldr	r0, [pc, #20]	; (1a0021a8 <i2cHardwareRead+0x3c>)
1a002194:	f7ff fd47 	bl	1a001c26 <Chip_I2CM_XferBlocking>
1a002198:	b118      	cbz	r0, 1a0021a2 <i2cHardwareRead+0x36>
      return FALSE;
   }

   return TRUE;
1a00219a:	2001      	movs	r0, #1
}
1a00219c:	b005      	add	sp, #20
1a00219e:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a0021a2:	2000      	movs	r0, #0
1a0021a4:	e7fa      	b.n	1a00219c <i2cHardwareRead+0x30>
1a0021a6:	bf00      	nop
1a0021a8:	400a1000 	.word	0x400a1000

1a0021ac <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a0021ac:	b108      	cbz	r0, 1a0021b2 <i2cHardwareWrite+0x6>
      return FALSE;
1a0021ae:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a0021b0:	4770      	bx	lr
{
1a0021b2:	b500      	push	{lr}
1a0021b4:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a0021b6:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0021ba:	2100      	movs	r1, #0
1a0021bc:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0021c0:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a0021c4:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a0021c6:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a0021ca:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a0021cc:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a0021d0:	4669      	mov	r1, sp
1a0021d2:	4805      	ldr	r0, [pc, #20]	; (1a0021e8 <i2cHardwareWrite+0x3c>)
1a0021d4:	f7ff fd27 	bl	1a001c26 <Chip_I2CM_XferBlocking>
1a0021d8:	b118      	cbz	r0, 1a0021e2 <i2cHardwareWrite+0x36>
   return TRUE;
1a0021da:	2001      	movs	r0, #1
}
1a0021dc:	b005      	add	sp, #20
1a0021de:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a0021e2:	2000      	movs	r0, #0
1a0021e4:	e7fa      	b.n	1a0021dc <i2cHardwareWrite+0x30>
1a0021e6:	bf00      	nop
1a0021e8:	400a1000 	.word	0x400a1000

1a0021ec <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0021ec:	b108      	cbz	r0, 1a0021f2 <i2cInit+0x6>
      return FALSE;
1a0021ee:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a0021f0:	4770      	bx	lr
{
1a0021f2:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a0021f4:	f7ff ffa2 	bl	1a00213c <i2cHardwareInit>
}
1a0021f8:	bd08      	pop	{r3, pc}

1a0021fa <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0021fa:	b108      	cbz	r0, 1a002200 <i2cRead+0x6>
      return FALSE;
1a0021fc:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a0021fe:	4770      	bx	lr
{
1a002200:	b510      	push	{r4, lr}
1a002202:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a002204:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a002208:	9403      	str	r4, [sp, #12]
1a00220a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a00220e:	9402      	str	r4, [sp, #8]
1a002210:	9c07      	ldr	r4, [sp, #28]
1a002212:	9401      	str	r4, [sp, #4]
1a002214:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a002218:	9400      	str	r4, [sp, #0]
1a00221a:	f7ff ffa7 	bl	1a00216c <i2cHardwareRead>
}
1a00221e:	b004      	add	sp, #16
1a002220:	bd10      	pop	{r4, pc}

1a002222 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a002222:	b108      	cbz	r0, 1a002228 <i2cWrite+0x6>
      return FALSE;
1a002224:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a002226:	4770      	bx	lr
{
1a002228:	b510      	push	{r4, lr}
1a00222a:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a00222c:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a002230:	9400      	str	r4, [sp, #0]
1a002232:	f7ff ffbb 	bl	1a0021ac <i2cHardwareWrite>
}
1a002236:	b002      	add	sp, #8
1a002238:	bd10      	pop	{r4, pc}
1a00223a:	Address 0x000000001a00223a is out of bounds.


1a00223c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00223c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00223e:	4d0b      	ldr	r5, [pc, #44]	; (1a00226c <gpioObtainPinInit+0x30>)
1a002240:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002244:	182c      	adds	r4, r5, r0
1a002246:	5628      	ldrsb	r0, [r5, r0]
1a002248:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00224a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00224e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002250:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002254:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002256:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00225a:	9b02      	ldr	r3, [sp, #8]
1a00225c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00225e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002262:	9b03      	ldr	r3, [sp, #12]
1a002264:	701a      	strb	r2, [r3, #0]
}
1a002266:	bc30      	pop	{r4, r5}
1a002268:	4770      	bx	lr
1a00226a:	bf00      	nop
1a00226c:	1a007914 	.word	0x1a007914

1a002270 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a002270:	f110 0f02 	cmn.w	r0, #2
1a002274:	f000 80c7 	beq.w	1a002406 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a002278:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00227c:	f000 80c5 	beq.w	1a00240a <gpioInit+0x19a>
{
1a002280:	b570      	push	{r4, r5, r6, lr}
1a002282:	b084      	sub	sp, #16
1a002284:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002286:	2300      	movs	r3, #0
1a002288:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00228c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002290:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002294:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002298:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00229c:	f10d 030b 	add.w	r3, sp, #11
1a0022a0:	9301      	str	r3, [sp, #4]
1a0022a2:	ab03      	add	r3, sp, #12
1a0022a4:	9300      	str	r3, [sp, #0]
1a0022a6:	f10d 030d 	add.w	r3, sp, #13
1a0022aa:	f10d 020e 	add.w	r2, sp, #14
1a0022ae:	f10d 010f 	add.w	r1, sp, #15
1a0022b2:	f7ff ffc3 	bl	1a00223c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0022b6:	2c05      	cmp	r4, #5
1a0022b8:	f200 80a9 	bhi.w	1a00240e <gpioInit+0x19e>
1a0022bc:	e8df f004 	tbb	[pc, r4]
1a0022c0:	45278109 	.word	0x45278109
1a0022c4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0022c6:	4853      	ldr	r0, [pc, #332]	; (1a002414 <gpioInit+0x1a4>)
1a0022c8:	f7ff fcbf 	bl	1a001c4a <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0022cc:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0022ce:	b004      	add	sp, #16
1a0022d0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0022d2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0022d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0022da:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0022de:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0022e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0022e6:	494c      	ldr	r1, [pc, #304]	; (1a002418 <gpioInit+0x1a8>)
1a0022e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0022ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0022f0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0022f4:	2001      	movs	r0, #1
1a0022f6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] &= ~bitValue;
1a0022fa:	4c46      	ldr	r4, [pc, #280]	; (1a002414 <gpioInit+0x1a4>)
1a0022fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002300:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002304:	ea22 0201 	bic.w	r2, r2, r1
1a002308:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00230c:	e7df      	b.n	1a0022ce <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00230e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002312:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002316:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00231a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00231e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002322:	493d      	ldr	r1, [pc, #244]	; (1a002418 <gpioInit+0x1a8>)
1a002324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002328:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00232c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002330:	2001      	movs	r0, #1
1a002332:	fa00 f102 	lsl.w	r1, r0, r2
1a002336:	4c37      	ldr	r4, [pc, #220]	; (1a002414 <gpioInit+0x1a4>)
1a002338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00233c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002340:	ea22 0201 	bic.w	r2, r2, r1
1a002344:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002348:	e7c1      	b.n	1a0022ce <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00234a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00234e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002352:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002356:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00235a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00235e:	492e      	ldr	r1, [pc, #184]	; (1a002418 <gpioInit+0x1a8>)
1a002360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002364:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002368:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00236c:	2001      	movs	r0, #1
1a00236e:	fa00 f102 	lsl.w	r1, r0, r2
1a002372:	4c28      	ldr	r4, [pc, #160]	; (1a002414 <gpioInit+0x1a4>)
1a002374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002378:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00237c:	ea22 0201 	bic.w	r2, r2, r1
1a002380:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002384:	e7a3      	b.n	1a0022ce <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a002386:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00238a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00238e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002392:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002396:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00239a:	491f      	ldr	r1, [pc, #124]	; (1a002418 <gpioInit+0x1a8>)
1a00239c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0023a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0023a4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0023a8:	2001      	movs	r0, #1
1a0023aa:	fa00 f102 	lsl.w	r1, r0, r2
1a0023ae:	4c19      	ldr	r4, [pc, #100]	; (1a002414 <gpioInit+0x1a4>)
1a0023b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0023b4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0023b8:	ea22 0201 	bic.w	r2, r2, r1
1a0023bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0023c0:	e785      	b.n	1a0022ce <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0023c2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0023c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0023ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0023ce:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0023d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0023d6:	4910      	ldr	r1, [pc, #64]	; (1a002418 <gpioInit+0x1a8>)
1a0023d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0023dc:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0023e0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0023e4:	2001      	movs	r0, #1
1a0023e6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0023ea:	4b0a      	ldr	r3, [pc, #40]	; (1a002414 <gpioInit+0x1a4>)
1a0023ec:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0023f0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0023f4:	4331      	orrs	r1, r6
1a0023f6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0023fa:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0023fc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002400:	2100      	movs	r1, #0
1a002402:	5499      	strb	r1, [r3, r2]
1a002404:	e763      	b.n	1a0022ce <gpioInit+0x5e>
	  return FALSE;
1a002406:	2000      	movs	r0, #0
1a002408:	4770      	bx	lr
	  return FALSE;
1a00240a:	2000      	movs	r0, #0
}
1a00240c:	4770      	bx	lr
      ret_val = 0;
1a00240e:	2000      	movs	r0, #0
1a002410:	e75d      	b.n	1a0022ce <gpioInit+0x5e>
1a002412:	bf00      	nop
1a002414:	400f4000 	.word	0x400f4000
1a002418:	40086000 	.word	0x40086000

1a00241c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a00241c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00241e:	4b04      	ldr	r3, [pc, #16]	; (1a002430 <USB0_IRQHandler+0x14>)
1a002420:	681b      	ldr	r3, [r3, #0]
1a002422:	681b      	ldr	r3, [r3, #0]
1a002424:	68db      	ldr	r3, [r3, #12]
1a002426:	4a03      	ldr	r2, [pc, #12]	; (1a002434 <USB0_IRQHandler+0x18>)
1a002428:	6810      	ldr	r0, [r2, #0]
1a00242a:	4798      	blx	r3
}
1a00242c:	bd08      	pop	{r3, pc}
1a00242e:	bf00      	nop
1a002430:	10000a8c 	.word	0x10000a8c
1a002434:	10000a1c 	.word	0x10000a1c

1a002438 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002438:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00243a:	f7ff fab7 	bl	1a0019ac <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00243e:	4b1a      	ldr	r3, [pc, #104]	; (1a0024a8 <boardInit+0x70>)
1a002440:	6818      	ldr	r0, [r3, #0]
1a002442:	f7ff fd9f 	bl	1a001f84 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a002446:	2001      	movs	r0, #1
1a002448:	2100      	movs	r1, #0
1a00244a:	f7ff fe23 	bl	1a002094 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00244e:	2105      	movs	r1, #5
1a002450:	2000      	movs	r0, #0
1a002452:	f7ff ff0d 	bl	1a002270 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a002456:	2100      	movs	r1, #0
1a002458:	2024      	movs	r0, #36	; 0x24
1a00245a:	f7ff ff09 	bl	1a002270 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a00245e:	2100      	movs	r1, #0
1a002460:	2025      	movs	r0, #37	; 0x25
1a002462:	f7ff ff05 	bl	1a002270 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a002466:	2100      	movs	r1, #0
1a002468:	2026      	movs	r0, #38	; 0x26
1a00246a:	f7ff ff01 	bl	1a002270 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a00246e:	2100      	movs	r1, #0
1a002470:	2027      	movs	r0, #39	; 0x27
1a002472:	f7ff fefd 	bl	1a002270 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a002476:	2101      	movs	r1, #1
1a002478:	2028      	movs	r0, #40	; 0x28
1a00247a:	f7ff fef9 	bl	1a002270 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a00247e:	2101      	movs	r1, #1
1a002480:	2029      	movs	r0, #41	; 0x29
1a002482:	f7ff fef5 	bl	1a002270 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a002486:	2101      	movs	r1, #1
1a002488:	202a      	movs	r0, #42	; 0x2a
1a00248a:	f7ff fef1 	bl	1a002270 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a00248e:	2101      	movs	r1, #1
1a002490:	202b      	movs	r0, #43	; 0x2b
1a002492:	f7ff feed 	bl	1a002270 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a002496:	2101      	movs	r1, #1
1a002498:	202c      	movs	r0, #44	; 0x2c
1a00249a:	f7ff fee9 	bl	1a002270 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a00249e:	2101      	movs	r1, #1
1a0024a0:	202d      	movs	r0, #45	; 0x2d
1a0024a2:	f7ff fee5 	bl	1a002270 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0024a6:	bd08      	pop	{r3, pc}
1a0024a8:	10000a88 	.word	0x10000a88

1a0024ac <delayInaccurateMs>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurateMs(tick_t delay_ms)
{
1a0024ac:	b4f0      	push	{r4, r5, r6, r7}
1a0024ae:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;
   delay = INACCURATE_TO_MS * delay_ms;
1a0024b0:	ea4f 0c81 	mov.w	ip, r1, lsl #2
1a0024b4:	0083      	lsls	r3, r0, #2
1a0024b6:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
1a0024ba:	181b      	adds	r3, r3, r0
1a0024bc:	eb41 0202 	adc.w	r2, r1, r2
1a0024c0:	0211      	lsls	r1, r2, #8
1a0024c2:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
1a0024c6:	0218      	lsls	r0, r3, #8
1a0024c8:	1ac6      	subs	r6, r0, r3
1a0024ca:	eb61 0702 	sbc.w	r7, r1, r2
1a0024ce:	013b      	lsls	r3, r7, #4
1a0024d0:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
1a0024d4:	0132      	lsls	r2, r6, #4
1a0024d6:	4616      	mov	r6, r2
1a0024d8:	461f      	mov	r7, r3
1a0024da:	e9cd 6700 	strd	r6, r7, [sp]
   for( i=delay; i>0; i-- );
1a0024de:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0024e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a0024e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0024ea:	4313      	orrs	r3, r2
1a0024ec:	d008      	beq.n	1a002500 <delayInaccurateMs+0x54>
1a0024ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0024f2:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a0024f6:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a0024fa:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a0024fe:	e7f2      	b.n	1a0024e6 <delayInaccurateMs+0x3a>
}
1a002500:	b004      	add	sp, #16
1a002502:	bcf0      	pop	{r4, r5, r6, r7}
1a002504:	4770      	bx	lr

1a002506 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a002506:	b508      	push	{r3, lr}
1a002508:	460b      	mov	r3, r1
   *printer = uart;
1a00250a:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a00250c:	4611      	mov	r1, r2
1a00250e:	4618      	mov	r0, r3
1a002510:	f7ff fd5e 	bl	1a001fd0 <uartInit>
}
1a002514:	bd08      	pop	{r3, pc}

1a002516 <printString>:
}

// Print String

void printString( print_t printer, const char* string )
{
1a002516:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a002518:	f7ff fda5 	bl	1a002066 <uartWriteString>
}
1a00251c:	bd08      	pop	{r3, pc}
1a00251e:	Address 0x000000001a00251e is out of bounds.


1a002520 <printEnter>:

void printEnter( print_t printer )
{
1a002520:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a002522:	4902      	ldr	r1, [pc, #8]	; (1a00252c <printEnter+0xc>)
1a002524:	f7ff fd9f 	bl	1a002066 <uartWriteString>
}
1a002528:	bd08      	pop	{r3, pc}
1a00252a:	bf00      	nop
1a00252c:	1a0079fc 	.word	0x1a0079fc

1a002530 <printIntFormat>:


// Print Integer

void printIntFormat( print_t printer, int64_t number, numberFormat_t format )
{
1a002530:	b510      	push	{r4, lr}
1a002532:	b092      	sub	sp, #72	; 0x48
1a002534:	4604      	mov	r4, r0
1a002536:	4610      	mov	r0, r2
1a002538:	4619      	mov	r1, r3

   char strNumber[65];

   if( int64ToString( number, strNumber, format ) ) {
1a00253a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
1a00253e:	aa01      	add	r2, sp, #4
1a002540:	f000 f828 	bl	1a002594 <int64ToString>
1a002544:	b908      	cbnz	r0, 1a00254a <printIntFormat+0x1a>
      uartWriteString( printer, strNumber );
   }
}
1a002546:	b012      	add	sp, #72	; 0x48
1a002548:	bd10      	pop	{r4, pc}
      uartWriteString( printer, strNumber );
1a00254a:	a901      	add	r1, sp, #4
1a00254c:	4620      	mov	r0, r4
1a00254e:	f7ff fd8a 	bl	1a002066 <uartWriteString>
}
1a002552:	e7f8      	b.n	1a002546 <printIntFormat+0x16>

1a002554 <printUIntFormat>:

void printUIntFormat( print_t printer, uint64_t number, numberFormat_t format )
{
1a002554:	b510      	push	{r4, lr}
1a002556:	b092      	sub	sp, #72	; 0x48
1a002558:	4604      	mov	r4, r0
1a00255a:	4610      	mov	r0, r2
1a00255c:	4619      	mov	r1, r3

   char strNumber[65];

   if( uint64ToString( number, strNumber, format ) ) {
1a00255e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
1a002562:	aa01      	add	r2, sp, #4
1a002564:	f000 f85a 	bl	1a00261c <uint64ToString>
1a002568:	b908      	cbnz	r0, 1a00256e <printUIntFormat+0x1a>
      uartWriteString( printer, strNumber );
   }
}
1a00256a:	b012      	add	sp, #72	; 0x48
1a00256c:	bd10      	pop	{r4, pc}
      uartWriteString( printer, strNumber );
1a00256e:	a901      	add	r1, sp, #4
1a002570:	4620      	mov	r0, r4
1a002572:	f7ff fd78 	bl	1a002066 <uartWriteString>
}
1a002576:	e7f8      	b.n	1a00256a <printUIntFormat+0x16>

1a002578 <printHex>:

void printHex( print_t printer, uint64_t number, uint8_t bitSize )
{
1a002578:	b510      	push	{r4, lr}
1a00257a:	4604      	mov	r4, r0
1a00257c:	4610      	mov	r0, r2
1a00257e:	4619      	mov	r1, r3
   printString( printer, uintToAsciiHexGlobal( number, bitSize ) );
1a002580:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002584:	f000 f8ca 	bl	1a00271c <uintToAsciiHexGlobal>
1a002588:	4601      	mov	r1, r0
1a00258a:	4620      	mov	r0, r4
1a00258c:	f7ff ffc3 	bl	1a002516 <printString>
}
1a002590:	bd10      	pop	{r4, pc}
1a002592:	Address 0x000000001a002592 is out of bounds.


1a002594 <int64ToString>:
/*==================[external functions definition]==========================*/

// C++ version 0.4 char* style "itoa"
// Modified by Eric Pernia.
bool_t int64ToString( int64_t value, char* result, uint8_t base )
{
1a002594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002598:	4614      	mov	r4, r2
1a00259a:	469a      	mov	sl, r3
   // check that the base if valid
   if( base < 2 || base > 36 ) {
1a00259c:	3b02      	subs	r3, #2
1a00259e:	b2db      	uxtb	r3, r3
1a0025a0:	2b22      	cmp	r3, #34	; 0x22
1a0025a2:	d803      	bhi.n	1a0025ac <int64ToString+0x18>
1a0025a4:	4606      	mov	r6, r0
1a0025a6:	460f      	mov	r7, r1
      *result = '\0';
      return FALSE;
   }

   char* ptr = result, *ptr1 = result, tmp_char;
1a0025a8:	4615      	mov	r5, r2
1a0025aa:	e005      	b.n	1a0025b8 <int64ToString+0x24>
      *result = '\0';
1a0025ac:	2000      	movs	r0, #0
1a0025ae:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a0025b0:	e02f      	b.n	1a002612 <int64ToString+0x7e>
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a0025b2:	461d      	mov	r5, r3
      value /= (int64_t)base;
1a0025b4:	4606      	mov	r6, r0
1a0025b6:	460f      	mov	r7, r1
1a0025b8:	fa5f f88a 	uxtb.w	r8, sl
1a0025bc:	f04f 0900 	mov.w	r9, #0
1a0025c0:	4642      	mov	r2, r8
1a0025c2:	464b      	mov	r3, r9
1a0025c4:	4630      	mov	r0, r6
1a0025c6:	4639      	mov	r1, r7
1a0025c8:	f000 fd06 	bl	1a002fd8 <__aeabi_ldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a0025cc:	fba8 2300 	umull	r2, r3, r8, r0
1a0025d0:	1ab2      	subs	r2, r6, r2
1a0025d2:	3223      	adds	r2, #35	; 0x23
1a0025d4:	462b      	mov	r3, r5
1a0025d6:	f8df c040 	ldr.w	ip, [pc, #64]	; 1a002618 <int64ToString+0x84>
1a0025da:	4462      	add	r2, ip
1a0025dc:	7812      	ldrb	r2, [r2, #0]
1a0025de:	f803 2b01 	strb.w	r2, [r3], #1
   } while ( value );
1a0025e2:	ea50 0201 	orrs.w	r2, r0, r1
1a0025e6:	d1e4      	bne.n	1a0025b2 <int64ToString+0x1e>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a0025e8:	2e00      	cmp	r6, #0
1a0025ea:	f177 0200 	sbcs.w	r2, r7, #0
1a0025ee:	db03      	blt.n	1a0025f8 <int64ToString+0x64>
   *ptr-- = '\0';
1a0025f0:	2200      	movs	r2, #0
1a0025f2:	f803 2901 	strb.w	r2, [r3], #-1
   while(ptr1 < ptr) {
1a0025f6:	e009      	b.n	1a00260c <int64ToString+0x78>
   if (tmp_value < 0) *ptr++ = '-';
1a0025f8:	222d      	movs	r2, #45	; 0x2d
1a0025fa:	701a      	strb	r2, [r3, #0]
1a0025fc:	1cab      	adds	r3, r5, #2
1a0025fe:	e7f7      	b.n	1a0025f0 <int64ToString+0x5c>
      tmp_char = *ptr;
1a002600:	781a      	ldrb	r2, [r3, #0]
      *ptr--= *ptr1;
1a002602:	7821      	ldrb	r1, [r4, #0]
1a002604:	f803 1901 	strb.w	r1, [r3], #-1
      *ptr1++ = tmp_char;
1a002608:	f804 2b01 	strb.w	r2, [r4], #1
   while(ptr1 < ptr) {
1a00260c:	42a3      	cmp	r3, r4
1a00260e:	d8f7      	bhi.n	1a002600 <int64ToString+0x6c>
   }
   return TRUE;
1a002610:	2001      	movs	r0, #1
}
1a002612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002616:	bf00      	nop
1a002618:	1a007a00 	.word	0x1a007a00

1a00261c <uint64ToString>:
// C++ version 0.4 char* style "itoa":
// Written by Luk�s Chmela
// Released under GPLv3.
// Modified by Eric Pernia.
bool_t uint64ToString( uint64_t value, char* result, uint8_t base )
{
1a00261c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002620:	4615      	mov	r5, r2
1a002622:	469a      	mov	sl, r3
   // check that the base if valid
   if( base < 2 || base > 36 ) {
1a002624:	3b02      	subs	r3, #2
1a002626:	b2db      	uxtb	r3, r3
1a002628:	2b22      	cmp	r3, #34	; 0x22
1a00262a:	d803      	bhi.n	1a002634 <uint64ToString+0x18>
1a00262c:	4606      	mov	r6, r0
1a00262e:	460f      	mov	r7, r1
      *result = '\0';
      return FALSE;
   }

   char* ptr = result, *ptr1 = result, tmp_char;
1a002630:	4614      	mov	r4, r2
1a002632:	e005      	b.n	1a002640 <uint64ToString+0x24>
      *result = '\0';
1a002634:	2000      	movs	r0, #0
1a002636:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a002638:	e027      	b.n	1a00268a <uint64ToString+0x6e>
   uint64_t tmp_value;

   do {
      tmp_value = value;
      value /= (uint64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (uint64_t)base)];
1a00263a:	461c      	mov	r4, r3
      value /= (uint64_t)base;
1a00263c:	4606      	mov	r6, r0
1a00263e:	460f      	mov	r7, r1
1a002640:	fa5f f88a 	uxtb.w	r8, sl
1a002644:	f04f 0900 	mov.w	r9, #0
1a002648:	4642      	mov	r2, r8
1a00264a:	464b      	mov	r3, r9
1a00264c:	4630      	mov	r0, r6
1a00264e:	4639      	mov	r1, r7
1a002650:	f000 fd12 	bl	1a003078 <__aeabi_uldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (uint64_t)base)];
1a002654:	fba8 2300 	umull	r2, r3, r8, r0
1a002658:	1ab2      	subs	r2, r6, r2
1a00265a:	3223      	adds	r2, #35	; 0x23
1a00265c:	4623      	mov	r3, r4
1a00265e:	f8df c030 	ldr.w	ip, [pc, #48]	; 1a002690 <uint64ToString+0x74>
1a002662:	4462      	add	r2, ip
1a002664:	7812      	ldrb	r2, [r2, #0]
1a002666:	f803 2b01 	strb.w	r2, [r3], #1
   } while ( value );
1a00266a:	454f      	cmp	r7, r9
1a00266c:	bf08      	it	eq
1a00266e:	4546      	cmpeq	r6, r8
1a002670:	d2e3      	bcs.n	1a00263a <uint64ToString+0x1e>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
1a002672:	2200      	movs	r2, #0
1a002674:	701a      	strb	r2, [r3, #0]
   while(ptr1 < ptr) {
1a002676:	e005      	b.n	1a002684 <uint64ToString+0x68>
      tmp_char = *ptr;
1a002678:	7823      	ldrb	r3, [r4, #0]
      *ptr--= *ptr1;
1a00267a:	782a      	ldrb	r2, [r5, #0]
1a00267c:	f804 2901 	strb.w	r2, [r4], #-1
      *ptr1++ = tmp_char;
1a002680:	f805 3b01 	strb.w	r3, [r5], #1
   while(ptr1 < ptr) {
1a002684:	42ac      	cmp	r4, r5
1a002686:	d8f7      	bhi.n	1a002678 <uint64ToString+0x5c>
   }
   return TRUE;
1a002688:	2001      	movs	r0, #1
}
1a00268a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00268e:	bf00      	nop
1a002690:	1a007a00 	.word	0x1a007a00

1a002694 <uintToAsciiHex>:
}
//-----------------------------------------------------------------------------


char* uintToAsciiHex( uint64_t value, char* result, uint8_t bitSize )
{
1a002694:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002696:	b087      	sub	sp, #28
1a002698:	4607      	mov	r7, r0
1a00269a:	460e      	mov	r6, r1
1a00269c:	4615      	mov	r5, r2
1a00269e:	469e      	mov	lr, r3
   uint8_t i = 0;
   uint8_t vectorNumHex[] = "0123456789ABCDEF";
1a0026a0:	ac01      	add	r4, sp, #4
1a0026a2:	f8df c074 	ldr.w	ip, [pc, #116]	; 1a002718 <uintToAsciiHex+0x84>
1a0026a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
1a0026aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0026ac:	f8dc 3000 	ldr.w	r3, [ip]
1a0026b0:	7023      	strb	r3, [r4, #0]
   result[ bitSize/4 ] = 0;
1a0026b2:	ea4f 039e 	mov.w	r3, lr, lsr #2
1a0026b6:	2000      	movs	r0, #0
1a0026b8:	54e8      	strb	r0, [r5, r3]

   for( i=0; i<bitSize/4; i++ ) {
1a0026ba:	4283      	cmp	r3, r0
1a0026bc:	d928      	bls.n	1a002710 <uintToAsciiHex+0x7c>
      result[(bitSize/4)-i-1] = 
         vectorNumHex[ (uint8_t)(( value & (((uint64_t)0x0F)<<(4*i)) ) >> (4*i)) ];
1a0026be:	ea4f 0c80 	mov.w	ip, r0, lsl #2
1a0026c2:	210f      	movs	r1, #15
1a0026c4:	f1ac 0220 	sub.w	r2, ip, #32
1a0026c8:	f1cc 0e20 	rsb	lr, ip, #32
1a0026cc:	fa01 f202 	lsl.w	r2, r1, r2
1a0026d0:	fa21 fe0e 	lsr.w	lr, r1, lr
1a0026d4:	ea42 040e 	orr.w	r4, r2, lr
1a0026d8:	fa01 f20c 	lsl.w	r2, r1, ip
1a0026dc:	403a      	ands	r2, r7
1a0026de:	4034      	ands	r4, r6
1a0026e0:	f1cc 0e20 	rsb	lr, ip, #32
1a0026e4:	f1ac 0120 	sub.w	r1, ip, #32
1a0026e8:	fa22 f20c 	lsr.w	r2, r2, ip
1a0026ec:	fa04 fe0e 	lsl.w	lr, r4, lr
1a0026f0:	ea42 020e 	orr.w	r2, r2, lr
1a0026f4:	fa24 f101 	lsr.w	r1, r4, r1
1a0026f8:	430a      	orrs	r2, r1
      result[(bitSize/4)-i-1] = 
1a0026fa:	1a19      	subs	r1, r3, r0
1a0026fc:	3901      	subs	r1, #1
         vectorNumHex[ (uint8_t)(( value & (((uint64_t)0x0F)<<(4*i)) ) >> (4*i)) ];
1a0026fe:	ac06      	add	r4, sp, #24
1a002700:	fa54 f282 	uxtab	r2, r4, r2
1a002704:	f812 2c14 	ldrb.w	r2, [r2, #-20]
      result[(bitSize/4)-i-1] = 
1a002708:	546a      	strb	r2, [r5, r1]
   for( i=0; i<bitSize/4; i++ ) {
1a00270a:	3001      	adds	r0, #1
1a00270c:	b2c0      	uxtb	r0, r0
1a00270e:	e7d4      	b.n	1a0026ba <uintToAsciiHex+0x26>
   }

   return result;
}
1a002710:	4628      	mov	r0, r5
1a002712:	b007      	add	sp, #28
1a002714:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002716:	bf00      	nop
1a002718:	1a007a48 	.word	0x1a007a48

1a00271c <uintToAsciiHexGlobal>:
{
1a00271c:	b508      	push	{r3, lr}
   return uintToAsciiHex( value, globalStrConvertBuff, bitSize );
1a00271e:	4613      	mov	r3, r2
1a002720:	4a01      	ldr	r2, [pc, #4]	; (1a002728 <uintToAsciiHexGlobal+0xc>)
1a002722:	f7ff ffb7 	bl	1a002694 <uintToAsciiHex>
}
1a002726:	bd08      	pop	{r3, pc}
1a002728:	10000a90 	.word	0x10000a90

1a00272c <__aeabi_drsub>:
1a00272c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a002730:	e002      	b.n	1a002738 <__adddf3>
1a002732:	bf00      	nop

1a002734 <__aeabi_dsub>:
1a002734:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002738 <__adddf3>:
1a002738:	b530      	push	{r4, r5, lr}
1a00273a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00273e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a002742:	ea94 0f05 	teq	r4, r5
1a002746:	bf08      	it	eq
1a002748:	ea90 0f02 	teqeq	r0, r2
1a00274c:	bf1f      	itttt	ne
1a00274e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a002752:	ea55 0c02 	orrsne.w	ip, r5, r2
1a002756:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00275a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00275e:	f000 80e2 	beq.w	1a002926 <__adddf3+0x1ee>
1a002762:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a002766:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00276a:	bfb8      	it	lt
1a00276c:	426d      	neglt	r5, r5
1a00276e:	dd0c      	ble.n	1a00278a <__adddf3+0x52>
1a002770:	442c      	add	r4, r5
1a002772:	ea80 0202 	eor.w	r2, r0, r2
1a002776:	ea81 0303 	eor.w	r3, r1, r3
1a00277a:	ea82 0000 	eor.w	r0, r2, r0
1a00277e:	ea83 0101 	eor.w	r1, r3, r1
1a002782:	ea80 0202 	eor.w	r2, r0, r2
1a002786:	ea81 0303 	eor.w	r3, r1, r3
1a00278a:	2d36      	cmp	r5, #54	; 0x36
1a00278c:	bf88      	it	hi
1a00278e:	bd30      	pophi	{r4, r5, pc}
1a002790:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a002794:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002798:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a00279c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a0027a0:	d002      	beq.n	1a0027a8 <__adddf3+0x70>
1a0027a2:	4240      	negs	r0, r0
1a0027a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0027a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a0027ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0027b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0027b4:	d002      	beq.n	1a0027bc <__adddf3+0x84>
1a0027b6:	4252      	negs	r2, r2
1a0027b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0027bc:	ea94 0f05 	teq	r4, r5
1a0027c0:	f000 80a7 	beq.w	1a002912 <__adddf3+0x1da>
1a0027c4:	f1a4 0401 	sub.w	r4, r4, #1
1a0027c8:	f1d5 0e20 	rsbs	lr, r5, #32
1a0027cc:	db0d      	blt.n	1a0027ea <__adddf3+0xb2>
1a0027ce:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0027d2:	fa22 f205 	lsr.w	r2, r2, r5
1a0027d6:	1880      	adds	r0, r0, r2
1a0027d8:	f141 0100 	adc.w	r1, r1, #0
1a0027dc:	fa03 f20e 	lsl.w	r2, r3, lr
1a0027e0:	1880      	adds	r0, r0, r2
1a0027e2:	fa43 f305 	asr.w	r3, r3, r5
1a0027e6:	4159      	adcs	r1, r3
1a0027e8:	e00e      	b.n	1a002808 <__adddf3+0xd0>
1a0027ea:	f1a5 0520 	sub.w	r5, r5, #32
1a0027ee:	f10e 0e20 	add.w	lr, lr, #32
1a0027f2:	2a01      	cmp	r2, #1
1a0027f4:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0027f8:	bf28      	it	cs
1a0027fa:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0027fe:	fa43 f305 	asr.w	r3, r3, r5
1a002802:	18c0      	adds	r0, r0, r3
1a002804:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a002808:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00280c:	d507      	bpl.n	1a00281e <__adddf3+0xe6>
1a00280e:	f04f 0e00 	mov.w	lr, #0
1a002812:	f1dc 0c00 	rsbs	ip, ip, #0
1a002816:	eb7e 0000 	sbcs.w	r0, lr, r0
1a00281a:	eb6e 0101 	sbc.w	r1, lr, r1
1a00281e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a002822:	d31b      	bcc.n	1a00285c <__adddf3+0x124>
1a002824:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a002828:	d30c      	bcc.n	1a002844 <__adddf3+0x10c>
1a00282a:	0849      	lsrs	r1, r1, #1
1a00282c:	ea5f 0030 	movs.w	r0, r0, rrx
1a002830:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a002834:	f104 0401 	add.w	r4, r4, #1
1a002838:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a00283c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a002840:	f080 809a 	bcs.w	1a002978 <__adddf3+0x240>
1a002844:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002848:	bf08      	it	eq
1a00284a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00284e:	f150 0000 	adcs.w	r0, r0, #0
1a002852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002856:	ea41 0105 	orr.w	r1, r1, r5
1a00285a:	bd30      	pop	{r4, r5, pc}
1a00285c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002860:	4140      	adcs	r0, r0
1a002862:	eb41 0101 	adc.w	r1, r1, r1
1a002866:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00286a:	f1a4 0401 	sub.w	r4, r4, #1
1a00286e:	d1e9      	bne.n	1a002844 <__adddf3+0x10c>
1a002870:	f091 0f00 	teq	r1, #0
1a002874:	bf04      	itt	eq
1a002876:	4601      	moveq	r1, r0
1a002878:	2000      	moveq	r0, #0
1a00287a:	fab1 f381 	clz	r3, r1
1a00287e:	bf08      	it	eq
1a002880:	3320      	addeq	r3, #32
1a002882:	f1a3 030b 	sub.w	r3, r3, #11
1a002886:	f1b3 0220 	subs.w	r2, r3, #32
1a00288a:	da0c      	bge.n	1a0028a6 <__adddf3+0x16e>
1a00288c:	320c      	adds	r2, #12
1a00288e:	dd08      	ble.n	1a0028a2 <__adddf3+0x16a>
1a002890:	f102 0c14 	add.w	ip, r2, #20
1a002894:	f1c2 020c 	rsb	r2, r2, #12
1a002898:	fa01 f00c 	lsl.w	r0, r1, ip
1a00289c:	fa21 f102 	lsr.w	r1, r1, r2
1a0028a0:	e00c      	b.n	1a0028bc <__adddf3+0x184>
1a0028a2:	f102 0214 	add.w	r2, r2, #20
1a0028a6:	bfd8      	it	le
1a0028a8:	f1c2 0c20 	rsble	ip, r2, #32
1a0028ac:	fa01 f102 	lsl.w	r1, r1, r2
1a0028b0:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0028b4:	bfdc      	itt	le
1a0028b6:	ea41 010c 	orrle.w	r1, r1, ip
1a0028ba:	4090      	lslle	r0, r2
1a0028bc:	1ae4      	subs	r4, r4, r3
1a0028be:	bfa2      	ittt	ge
1a0028c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0028c4:	4329      	orrge	r1, r5
1a0028c6:	bd30      	popge	{r4, r5, pc}
1a0028c8:	ea6f 0404 	mvn.w	r4, r4
1a0028cc:	3c1f      	subs	r4, #31
1a0028ce:	da1c      	bge.n	1a00290a <__adddf3+0x1d2>
1a0028d0:	340c      	adds	r4, #12
1a0028d2:	dc0e      	bgt.n	1a0028f2 <__adddf3+0x1ba>
1a0028d4:	f104 0414 	add.w	r4, r4, #20
1a0028d8:	f1c4 0220 	rsb	r2, r4, #32
1a0028dc:	fa20 f004 	lsr.w	r0, r0, r4
1a0028e0:	fa01 f302 	lsl.w	r3, r1, r2
1a0028e4:	ea40 0003 	orr.w	r0, r0, r3
1a0028e8:	fa21 f304 	lsr.w	r3, r1, r4
1a0028ec:	ea45 0103 	orr.w	r1, r5, r3
1a0028f0:	bd30      	pop	{r4, r5, pc}
1a0028f2:	f1c4 040c 	rsb	r4, r4, #12
1a0028f6:	f1c4 0220 	rsb	r2, r4, #32
1a0028fa:	fa20 f002 	lsr.w	r0, r0, r2
1a0028fe:	fa01 f304 	lsl.w	r3, r1, r4
1a002902:	ea40 0003 	orr.w	r0, r0, r3
1a002906:	4629      	mov	r1, r5
1a002908:	bd30      	pop	{r4, r5, pc}
1a00290a:	fa21 f004 	lsr.w	r0, r1, r4
1a00290e:	4629      	mov	r1, r5
1a002910:	bd30      	pop	{r4, r5, pc}
1a002912:	f094 0f00 	teq	r4, #0
1a002916:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a00291a:	bf06      	itte	eq
1a00291c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a002920:	3401      	addeq	r4, #1
1a002922:	3d01      	subne	r5, #1
1a002924:	e74e      	b.n	1a0027c4 <__adddf3+0x8c>
1a002926:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00292a:	bf18      	it	ne
1a00292c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002930:	d029      	beq.n	1a002986 <__adddf3+0x24e>
1a002932:	ea94 0f05 	teq	r4, r5
1a002936:	bf08      	it	eq
1a002938:	ea90 0f02 	teqeq	r0, r2
1a00293c:	d005      	beq.n	1a00294a <__adddf3+0x212>
1a00293e:	ea54 0c00 	orrs.w	ip, r4, r0
1a002942:	bf04      	itt	eq
1a002944:	4619      	moveq	r1, r3
1a002946:	4610      	moveq	r0, r2
1a002948:	bd30      	pop	{r4, r5, pc}
1a00294a:	ea91 0f03 	teq	r1, r3
1a00294e:	bf1e      	ittt	ne
1a002950:	2100      	movne	r1, #0
1a002952:	2000      	movne	r0, #0
1a002954:	bd30      	popne	{r4, r5, pc}
1a002956:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00295a:	d105      	bne.n	1a002968 <__adddf3+0x230>
1a00295c:	0040      	lsls	r0, r0, #1
1a00295e:	4149      	adcs	r1, r1
1a002960:	bf28      	it	cs
1a002962:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a002966:	bd30      	pop	{r4, r5, pc}
1a002968:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a00296c:	bf3c      	itt	cc
1a00296e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a002972:	bd30      	popcc	{r4, r5, pc}
1a002974:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002978:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a00297c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002980:	f04f 0000 	mov.w	r0, #0
1a002984:	bd30      	pop	{r4, r5, pc}
1a002986:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00298a:	bf1a      	itte	ne
1a00298c:	4619      	movne	r1, r3
1a00298e:	4610      	movne	r0, r2
1a002990:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a002994:	bf1c      	itt	ne
1a002996:	460b      	movne	r3, r1
1a002998:	4602      	movne	r2, r0
1a00299a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00299e:	bf06      	itte	eq
1a0029a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a0029a4:	ea91 0f03 	teqeq	r1, r3
1a0029a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a0029ac:	bd30      	pop	{r4, r5, pc}
1a0029ae:	bf00      	nop

1a0029b0 <__aeabi_ui2d>:
1a0029b0:	f090 0f00 	teq	r0, #0
1a0029b4:	bf04      	itt	eq
1a0029b6:	2100      	moveq	r1, #0
1a0029b8:	4770      	bxeq	lr
1a0029ba:	b530      	push	{r4, r5, lr}
1a0029bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0029c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0029c4:	f04f 0500 	mov.w	r5, #0
1a0029c8:	f04f 0100 	mov.w	r1, #0
1a0029cc:	e750      	b.n	1a002870 <__adddf3+0x138>
1a0029ce:	bf00      	nop

1a0029d0 <__aeabi_i2d>:
1a0029d0:	f090 0f00 	teq	r0, #0
1a0029d4:	bf04      	itt	eq
1a0029d6:	2100      	moveq	r1, #0
1a0029d8:	4770      	bxeq	lr
1a0029da:	b530      	push	{r4, r5, lr}
1a0029dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0029e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0029e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0029e8:	bf48      	it	mi
1a0029ea:	4240      	negmi	r0, r0
1a0029ec:	f04f 0100 	mov.w	r1, #0
1a0029f0:	e73e      	b.n	1a002870 <__adddf3+0x138>
1a0029f2:	bf00      	nop

1a0029f4 <__aeabi_f2d>:
1a0029f4:	0042      	lsls	r2, r0, #1
1a0029f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0029fa:	ea4f 0131 	mov.w	r1, r1, rrx
1a0029fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a002a02:	bf1f      	itttt	ne
1a002a04:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002a08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002a0c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a002a10:	4770      	bxne	lr
1a002a12:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a002a16:	bf08      	it	eq
1a002a18:	4770      	bxeq	lr
1a002a1a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a002a1e:	bf04      	itt	eq
1a002a20:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a002a24:	4770      	bxeq	lr
1a002a26:	b530      	push	{r4, r5, lr}
1a002a28:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002a2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002a30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002a34:	e71c      	b.n	1a002870 <__adddf3+0x138>
1a002a36:	bf00      	nop

1a002a38 <__aeabi_ul2d>:
1a002a38:	ea50 0201 	orrs.w	r2, r0, r1
1a002a3c:	bf08      	it	eq
1a002a3e:	4770      	bxeq	lr
1a002a40:	b530      	push	{r4, r5, lr}
1a002a42:	f04f 0500 	mov.w	r5, #0
1a002a46:	e00a      	b.n	1a002a5e <__aeabi_l2d+0x16>

1a002a48 <__aeabi_l2d>:
1a002a48:	ea50 0201 	orrs.w	r2, r0, r1
1a002a4c:	bf08      	it	eq
1a002a4e:	4770      	bxeq	lr
1a002a50:	b530      	push	{r4, r5, lr}
1a002a52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002a56:	d502      	bpl.n	1a002a5e <__aeabi_l2d+0x16>
1a002a58:	4240      	negs	r0, r0
1a002a5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002a5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002a62:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002a66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a002a6a:	f43f aed8 	beq.w	1a00281e <__adddf3+0xe6>
1a002a6e:	f04f 0203 	mov.w	r2, #3
1a002a72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002a76:	bf18      	it	ne
1a002a78:	3203      	addne	r2, #3
1a002a7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002a7e:	bf18      	it	ne
1a002a80:	3203      	addne	r2, #3
1a002a82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a002a86:	f1c2 0320 	rsb	r3, r2, #32
1a002a8a:	fa00 fc03 	lsl.w	ip, r0, r3
1a002a8e:	fa20 f002 	lsr.w	r0, r0, r2
1a002a92:	fa01 fe03 	lsl.w	lr, r1, r3
1a002a96:	ea40 000e 	orr.w	r0, r0, lr
1a002a9a:	fa21 f102 	lsr.w	r1, r1, r2
1a002a9e:	4414      	add	r4, r2
1a002aa0:	e6bd      	b.n	1a00281e <__adddf3+0xe6>
1a002aa2:	bf00      	nop

1a002aa4 <__aeabi_dmul>:
1a002aa4:	b570      	push	{r4, r5, r6, lr}
1a002aa6:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002aaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002aae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002ab2:	bf1d      	ittte	ne
1a002ab4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002ab8:	ea94 0f0c 	teqne	r4, ip
1a002abc:	ea95 0f0c 	teqne	r5, ip
1a002ac0:	f000 f8de 	bleq	1a002c80 <__aeabi_dmul+0x1dc>
1a002ac4:	442c      	add	r4, r5
1a002ac6:	ea81 0603 	eor.w	r6, r1, r3
1a002aca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a002ace:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002ad2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002ad6:	bf18      	it	ne
1a002ad8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002adc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002ae4:	d038      	beq.n	1a002b58 <__aeabi_dmul+0xb4>
1a002ae6:	fba0 ce02 	umull	ip, lr, r0, r2
1a002aea:	f04f 0500 	mov.w	r5, #0
1a002aee:	fbe1 e502 	umlal	lr, r5, r1, r2
1a002af2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002af6:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002afa:	f04f 0600 	mov.w	r6, #0
1a002afe:	fbe1 5603 	umlal	r5, r6, r1, r3
1a002b02:	f09c 0f00 	teq	ip, #0
1a002b06:	bf18      	it	ne
1a002b08:	f04e 0e01 	orrne.w	lr, lr, #1
1a002b0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a002b10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002b14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002b18:	d204      	bcs.n	1a002b24 <__aeabi_dmul+0x80>
1a002b1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a002b1e:	416d      	adcs	r5, r5
1a002b20:	eb46 0606 	adc.w	r6, r6, r6
1a002b24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002b28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002b2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a002b30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002b34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002b38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002b3c:	bf88      	it	hi
1a002b3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002b42:	d81e      	bhi.n	1a002b82 <__aeabi_dmul+0xde>
1a002b44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002b48:	bf08      	it	eq
1a002b4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a002b4e:	f150 0000 	adcs.w	r0, r0, #0
1a002b52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002b56:	bd70      	pop	{r4, r5, r6, pc}
1a002b58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002b5c:	ea46 0101 	orr.w	r1, r6, r1
1a002b60:	ea40 0002 	orr.w	r0, r0, r2
1a002b64:	ea81 0103 	eor.w	r1, r1, r3
1a002b68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a002b6c:	bfc2      	ittt	gt
1a002b6e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002b72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002b76:	bd70      	popgt	{r4, r5, r6, pc}
1a002b78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002b7c:	f04f 0e00 	mov.w	lr, #0
1a002b80:	3c01      	subs	r4, #1
1a002b82:	f300 80ab 	bgt.w	1a002cdc <__aeabi_dmul+0x238>
1a002b86:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a002b8a:	bfde      	ittt	le
1a002b8c:	2000      	movle	r0, #0
1a002b8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a002b92:	bd70      	pople	{r4, r5, r6, pc}
1a002b94:	f1c4 0400 	rsb	r4, r4, #0
1a002b98:	3c20      	subs	r4, #32
1a002b9a:	da35      	bge.n	1a002c08 <__aeabi_dmul+0x164>
1a002b9c:	340c      	adds	r4, #12
1a002b9e:	dc1b      	bgt.n	1a002bd8 <__aeabi_dmul+0x134>
1a002ba0:	f104 0414 	add.w	r4, r4, #20
1a002ba4:	f1c4 0520 	rsb	r5, r4, #32
1a002ba8:	fa00 f305 	lsl.w	r3, r0, r5
1a002bac:	fa20 f004 	lsr.w	r0, r0, r4
1a002bb0:	fa01 f205 	lsl.w	r2, r1, r5
1a002bb4:	ea40 0002 	orr.w	r0, r0, r2
1a002bb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002bbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002bc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002bc4:	fa21 f604 	lsr.w	r6, r1, r4
1a002bc8:	eb42 0106 	adc.w	r1, r2, r6
1a002bcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002bd0:	bf08      	it	eq
1a002bd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002bd6:	bd70      	pop	{r4, r5, r6, pc}
1a002bd8:	f1c4 040c 	rsb	r4, r4, #12
1a002bdc:	f1c4 0520 	rsb	r5, r4, #32
1a002be0:	fa00 f304 	lsl.w	r3, r0, r4
1a002be4:	fa20 f005 	lsr.w	r0, r0, r5
1a002be8:	fa01 f204 	lsl.w	r2, r1, r4
1a002bec:	ea40 0002 	orr.w	r0, r0, r2
1a002bf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002bf4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002bf8:	f141 0100 	adc.w	r1, r1, #0
1a002bfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002c00:	bf08      	it	eq
1a002c02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002c06:	bd70      	pop	{r4, r5, r6, pc}
1a002c08:	f1c4 0520 	rsb	r5, r4, #32
1a002c0c:	fa00 f205 	lsl.w	r2, r0, r5
1a002c10:	ea4e 0e02 	orr.w	lr, lr, r2
1a002c14:	fa20 f304 	lsr.w	r3, r0, r4
1a002c18:	fa01 f205 	lsl.w	r2, r1, r5
1a002c1c:	ea43 0302 	orr.w	r3, r3, r2
1a002c20:	fa21 f004 	lsr.w	r0, r1, r4
1a002c24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002c28:	fa21 f204 	lsr.w	r2, r1, r4
1a002c2c:	ea20 0002 	bic.w	r0, r0, r2
1a002c30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002c34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002c38:	bf08      	it	eq
1a002c3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002c3e:	bd70      	pop	{r4, r5, r6, pc}
1a002c40:	f094 0f00 	teq	r4, #0
1a002c44:	d10f      	bne.n	1a002c66 <__aeabi_dmul+0x1c2>
1a002c46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a002c4a:	0040      	lsls	r0, r0, #1
1a002c4c:	eb41 0101 	adc.w	r1, r1, r1
1a002c50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002c54:	bf08      	it	eq
1a002c56:	3c01      	subeq	r4, #1
1a002c58:	d0f7      	beq.n	1a002c4a <__aeabi_dmul+0x1a6>
1a002c5a:	ea41 0106 	orr.w	r1, r1, r6
1a002c5e:	f095 0f00 	teq	r5, #0
1a002c62:	bf18      	it	ne
1a002c64:	4770      	bxne	lr
1a002c66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a002c6a:	0052      	lsls	r2, r2, #1
1a002c6c:	eb43 0303 	adc.w	r3, r3, r3
1a002c70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002c74:	bf08      	it	eq
1a002c76:	3d01      	subeq	r5, #1
1a002c78:	d0f7      	beq.n	1a002c6a <__aeabi_dmul+0x1c6>
1a002c7a:	ea43 0306 	orr.w	r3, r3, r6
1a002c7e:	4770      	bx	lr
1a002c80:	ea94 0f0c 	teq	r4, ip
1a002c84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002c88:	bf18      	it	ne
1a002c8a:	ea95 0f0c 	teqne	r5, ip
1a002c8e:	d00c      	beq.n	1a002caa <__aeabi_dmul+0x206>
1a002c90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002c94:	bf18      	it	ne
1a002c96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002c9a:	d1d1      	bne.n	1a002c40 <__aeabi_dmul+0x19c>
1a002c9c:	ea81 0103 	eor.w	r1, r1, r3
1a002ca0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002ca4:	f04f 0000 	mov.w	r0, #0
1a002ca8:	bd70      	pop	{r4, r5, r6, pc}
1a002caa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002cae:	bf06      	itte	eq
1a002cb0:	4610      	moveq	r0, r2
1a002cb2:	4619      	moveq	r1, r3
1a002cb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002cb8:	d019      	beq.n	1a002cee <__aeabi_dmul+0x24a>
1a002cba:	ea94 0f0c 	teq	r4, ip
1a002cbe:	d102      	bne.n	1a002cc6 <__aeabi_dmul+0x222>
1a002cc0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002cc4:	d113      	bne.n	1a002cee <__aeabi_dmul+0x24a>
1a002cc6:	ea95 0f0c 	teq	r5, ip
1a002cca:	d105      	bne.n	1a002cd8 <__aeabi_dmul+0x234>
1a002ccc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a002cd0:	bf1c      	itt	ne
1a002cd2:	4610      	movne	r0, r2
1a002cd4:	4619      	movne	r1, r3
1a002cd6:	d10a      	bne.n	1a002cee <__aeabi_dmul+0x24a>
1a002cd8:	ea81 0103 	eor.w	r1, r1, r3
1a002cdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002ce0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002ce4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002ce8:	f04f 0000 	mov.w	r0, #0
1a002cec:	bd70      	pop	{r4, r5, r6, pc}
1a002cee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002cf2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002cf6:	bd70      	pop	{r4, r5, r6, pc}

1a002cf8 <__aeabi_ddiv>:
1a002cf8:	b570      	push	{r4, r5, r6, lr}
1a002cfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002cfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002d02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002d06:	bf1d      	ittte	ne
1a002d08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002d0c:	ea94 0f0c 	teqne	r4, ip
1a002d10:	ea95 0f0c 	teqne	r5, ip
1a002d14:	f000 f8a7 	bleq	1a002e66 <__aeabi_ddiv+0x16e>
1a002d18:	eba4 0405 	sub.w	r4, r4, r5
1a002d1c:	ea81 0e03 	eor.w	lr, r1, r3
1a002d20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002d24:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002d28:	f000 8088 	beq.w	1a002e3c <__aeabi_ddiv+0x144>
1a002d2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002d30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002d34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002d38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002d3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a002d40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002d44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002d48:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002d4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a002d50:	429d      	cmp	r5, r3
1a002d52:	bf08      	it	eq
1a002d54:	4296      	cmpeq	r6, r2
1a002d56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a002d5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a002d5e:	d202      	bcs.n	1a002d66 <__aeabi_ddiv+0x6e>
1a002d60:	085b      	lsrs	r3, r3, #1
1a002d62:	ea4f 0232 	mov.w	r2, r2, rrx
1a002d66:	1ab6      	subs	r6, r6, r2
1a002d68:	eb65 0503 	sbc.w	r5, r5, r3
1a002d6c:	085b      	lsrs	r3, r3, #1
1a002d6e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002d72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a002d76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a002d7a:	ebb6 0e02 	subs.w	lr, r6, r2
1a002d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002d82:	bf22      	ittt	cs
1a002d84:	1ab6      	subcs	r6, r6, r2
1a002d86:	4675      	movcs	r5, lr
1a002d88:	ea40 000c 	orrcs.w	r0, r0, ip
1a002d8c:	085b      	lsrs	r3, r3, #1
1a002d8e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002d92:	ebb6 0e02 	subs.w	lr, r6, r2
1a002d96:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002d9a:	bf22      	ittt	cs
1a002d9c:	1ab6      	subcs	r6, r6, r2
1a002d9e:	4675      	movcs	r5, lr
1a002da0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002da4:	085b      	lsrs	r3, r3, #1
1a002da6:	ea4f 0232 	mov.w	r2, r2, rrx
1a002daa:	ebb6 0e02 	subs.w	lr, r6, r2
1a002dae:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002db2:	bf22      	ittt	cs
1a002db4:	1ab6      	subcs	r6, r6, r2
1a002db6:	4675      	movcs	r5, lr
1a002db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002dbc:	085b      	lsrs	r3, r3, #1
1a002dbe:	ea4f 0232 	mov.w	r2, r2, rrx
1a002dc2:	ebb6 0e02 	subs.w	lr, r6, r2
1a002dc6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002dca:	bf22      	ittt	cs
1a002dcc:	1ab6      	subcs	r6, r6, r2
1a002dce:	4675      	movcs	r5, lr
1a002dd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002dd4:	ea55 0e06 	orrs.w	lr, r5, r6
1a002dd8:	d018      	beq.n	1a002e0c <__aeabi_ddiv+0x114>
1a002dda:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a002dde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a002de2:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002de6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002dea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a002dee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a002df2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002df6:	d1c0      	bne.n	1a002d7a <__aeabi_ddiv+0x82>
1a002df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002dfc:	d10b      	bne.n	1a002e16 <__aeabi_ddiv+0x11e>
1a002dfe:	ea41 0100 	orr.w	r1, r1, r0
1a002e02:	f04f 0000 	mov.w	r0, #0
1a002e06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002e0a:	e7b6      	b.n	1a002d7a <__aeabi_ddiv+0x82>
1a002e0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002e10:	bf04      	itt	eq
1a002e12:	4301      	orreq	r1, r0
1a002e14:	2000      	moveq	r0, #0
1a002e16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002e1a:	bf88      	it	hi
1a002e1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002e20:	f63f aeaf 	bhi.w	1a002b82 <__aeabi_dmul+0xde>
1a002e24:	ebb5 0c03 	subs.w	ip, r5, r3
1a002e28:	bf04      	itt	eq
1a002e2a:	ebb6 0c02 	subseq.w	ip, r6, r2
1a002e2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002e32:	f150 0000 	adcs.w	r0, r0, #0
1a002e36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002e3a:	bd70      	pop	{r4, r5, r6, pc}
1a002e3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a002e40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002e44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002e48:	bfc2      	ittt	gt
1a002e4a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002e4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002e52:	bd70      	popgt	{r4, r5, r6, pc}
1a002e54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002e58:	f04f 0e00 	mov.w	lr, #0
1a002e5c:	3c01      	subs	r4, #1
1a002e5e:	e690      	b.n	1a002b82 <__aeabi_dmul+0xde>
1a002e60:	ea45 0e06 	orr.w	lr, r5, r6
1a002e64:	e68d      	b.n	1a002b82 <__aeabi_dmul+0xde>
1a002e66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002e6a:	ea94 0f0c 	teq	r4, ip
1a002e6e:	bf08      	it	eq
1a002e70:	ea95 0f0c 	teqeq	r5, ip
1a002e74:	f43f af3b 	beq.w	1a002cee <__aeabi_dmul+0x24a>
1a002e78:	ea94 0f0c 	teq	r4, ip
1a002e7c:	d10a      	bne.n	1a002e94 <__aeabi_ddiv+0x19c>
1a002e7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002e82:	f47f af34 	bne.w	1a002cee <__aeabi_dmul+0x24a>
1a002e86:	ea95 0f0c 	teq	r5, ip
1a002e8a:	f47f af25 	bne.w	1a002cd8 <__aeabi_dmul+0x234>
1a002e8e:	4610      	mov	r0, r2
1a002e90:	4619      	mov	r1, r3
1a002e92:	e72c      	b.n	1a002cee <__aeabi_dmul+0x24a>
1a002e94:	ea95 0f0c 	teq	r5, ip
1a002e98:	d106      	bne.n	1a002ea8 <__aeabi_ddiv+0x1b0>
1a002e9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002e9e:	f43f aefd 	beq.w	1a002c9c <__aeabi_dmul+0x1f8>
1a002ea2:	4610      	mov	r0, r2
1a002ea4:	4619      	mov	r1, r3
1a002ea6:	e722      	b.n	1a002cee <__aeabi_dmul+0x24a>
1a002ea8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002eac:	bf18      	it	ne
1a002eae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002eb2:	f47f aec5 	bne.w	1a002c40 <__aeabi_dmul+0x19c>
1a002eb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a002eba:	f47f af0d 	bne.w	1a002cd8 <__aeabi_dmul+0x234>
1a002ebe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a002ec2:	f47f aeeb 	bne.w	1a002c9c <__aeabi_dmul+0x1f8>
1a002ec6:	e712      	b.n	1a002cee <__aeabi_dmul+0x24a>

1a002ec8 <__gedf2>:
1a002ec8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a002ecc:	e006      	b.n	1a002edc <__cmpdf2+0x4>
1a002ece:	bf00      	nop

1a002ed0 <__ledf2>:
1a002ed0:	f04f 0c01 	mov.w	ip, #1
1a002ed4:	e002      	b.n	1a002edc <__cmpdf2+0x4>
1a002ed6:	bf00      	nop

1a002ed8 <__cmpdf2>:
1a002ed8:	f04f 0c01 	mov.w	ip, #1
1a002edc:	f84d cd04 	str.w	ip, [sp, #-4]!
1a002ee0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002ee8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002eec:	bf18      	it	ne
1a002eee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a002ef2:	d01b      	beq.n	1a002f2c <__cmpdf2+0x54>
1a002ef4:	b001      	add	sp, #4
1a002ef6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a002efa:	bf0c      	ite	eq
1a002efc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a002f00:	ea91 0f03 	teqne	r1, r3
1a002f04:	bf02      	ittt	eq
1a002f06:	ea90 0f02 	teqeq	r0, r2
1a002f0a:	2000      	moveq	r0, #0
1a002f0c:	4770      	bxeq	lr
1a002f0e:	f110 0f00 	cmn.w	r0, #0
1a002f12:	ea91 0f03 	teq	r1, r3
1a002f16:	bf58      	it	pl
1a002f18:	4299      	cmppl	r1, r3
1a002f1a:	bf08      	it	eq
1a002f1c:	4290      	cmpeq	r0, r2
1a002f1e:	bf2c      	ite	cs
1a002f20:	17d8      	asrcs	r0, r3, #31
1a002f22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a002f26:	f040 0001 	orr.w	r0, r0, #1
1a002f2a:	4770      	bx	lr
1a002f2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002f30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002f34:	d102      	bne.n	1a002f3c <__cmpdf2+0x64>
1a002f36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a002f3a:	d107      	bne.n	1a002f4c <__cmpdf2+0x74>
1a002f3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002f44:	d1d6      	bne.n	1a002ef4 <__cmpdf2+0x1c>
1a002f46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a002f4a:	d0d3      	beq.n	1a002ef4 <__cmpdf2+0x1c>
1a002f4c:	f85d 0b04 	ldr.w	r0, [sp], #4
1a002f50:	4770      	bx	lr
1a002f52:	bf00      	nop

1a002f54 <__aeabi_cdrcmple>:
1a002f54:	4684      	mov	ip, r0
1a002f56:	4610      	mov	r0, r2
1a002f58:	4662      	mov	r2, ip
1a002f5a:	468c      	mov	ip, r1
1a002f5c:	4619      	mov	r1, r3
1a002f5e:	4663      	mov	r3, ip
1a002f60:	e000      	b.n	1a002f64 <__aeabi_cdcmpeq>
1a002f62:	bf00      	nop

1a002f64 <__aeabi_cdcmpeq>:
1a002f64:	b501      	push	{r0, lr}
1a002f66:	f7ff ffb7 	bl	1a002ed8 <__cmpdf2>
1a002f6a:	2800      	cmp	r0, #0
1a002f6c:	bf48      	it	mi
1a002f6e:	f110 0f00 	cmnmi.w	r0, #0
1a002f72:	bd01      	pop	{r0, pc}

1a002f74 <__aeabi_dcmpeq>:
1a002f74:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002f78:	f7ff fff4 	bl	1a002f64 <__aeabi_cdcmpeq>
1a002f7c:	bf0c      	ite	eq
1a002f7e:	2001      	moveq	r0, #1
1a002f80:	2000      	movne	r0, #0
1a002f82:	f85d fb08 	ldr.w	pc, [sp], #8
1a002f86:	bf00      	nop

1a002f88 <__aeabi_dcmplt>:
1a002f88:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002f8c:	f7ff ffea 	bl	1a002f64 <__aeabi_cdcmpeq>
1a002f90:	bf34      	ite	cc
1a002f92:	2001      	movcc	r0, #1
1a002f94:	2000      	movcs	r0, #0
1a002f96:	f85d fb08 	ldr.w	pc, [sp], #8
1a002f9a:	bf00      	nop

1a002f9c <__aeabi_dcmple>:
1a002f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002fa0:	f7ff ffe0 	bl	1a002f64 <__aeabi_cdcmpeq>
1a002fa4:	bf94      	ite	ls
1a002fa6:	2001      	movls	r0, #1
1a002fa8:	2000      	movhi	r0, #0
1a002faa:	f85d fb08 	ldr.w	pc, [sp], #8
1a002fae:	bf00      	nop

1a002fb0 <__aeabi_dcmpge>:
1a002fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002fb4:	f7ff ffce 	bl	1a002f54 <__aeabi_cdrcmple>
1a002fb8:	bf94      	ite	ls
1a002fba:	2001      	movls	r0, #1
1a002fbc:	2000      	movhi	r0, #0
1a002fbe:	f85d fb08 	ldr.w	pc, [sp], #8
1a002fc2:	bf00      	nop

1a002fc4 <__aeabi_dcmpgt>:
1a002fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002fc8:	f7ff ffc4 	bl	1a002f54 <__aeabi_cdrcmple>
1a002fcc:	bf34      	ite	cc
1a002fce:	2001      	movcc	r0, #1
1a002fd0:	2000      	movcs	r0, #0
1a002fd2:	f85d fb08 	ldr.w	pc, [sp], #8
1a002fd6:	bf00      	nop

1a002fd8 <__aeabi_ldivmod>:
1a002fd8:	b97b      	cbnz	r3, 1a002ffa <__aeabi_ldivmod+0x22>
1a002fda:	b972      	cbnz	r2, 1a002ffa <__aeabi_ldivmod+0x22>
1a002fdc:	2900      	cmp	r1, #0
1a002fde:	bfbe      	ittt	lt
1a002fe0:	2000      	movlt	r0, #0
1a002fe2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a002fe6:	e006      	blt.n	1a002ff6 <__aeabi_ldivmod+0x1e>
1a002fe8:	bf08      	it	eq
1a002fea:	2800      	cmpeq	r0, #0
1a002fec:	bf1c      	itt	ne
1a002fee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a002ff2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002ff6:	f000 b9bf 	b.w	1a003378 <__aeabi_idiv0>
1a002ffa:	f1ad 0c08 	sub.w	ip, sp, #8
1a002ffe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003002:	2900      	cmp	r1, #0
1a003004:	db09      	blt.n	1a00301a <__aeabi_ldivmod+0x42>
1a003006:	2b00      	cmp	r3, #0
1a003008:	db1a      	blt.n	1a003040 <__aeabi_ldivmod+0x68>
1a00300a:	f000 f84d 	bl	1a0030a8 <__udivmoddi4>
1a00300e:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003016:	b004      	add	sp, #16
1a003018:	4770      	bx	lr
1a00301a:	4240      	negs	r0, r0
1a00301c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003020:	2b00      	cmp	r3, #0
1a003022:	db1b      	blt.n	1a00305c <__aeabi_ldivmod+0x84>
1a003024:	f000 f840 	bl	1a0030a8 <__udivmoddi4>
1a003028:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00302c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003030:	b004      	add	sp, #16
1a003032:	4240      	negs	r0, r0
1a003034:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003038:	4252      	negs	r2, r2
1a00303a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00303e:	4770      	bx	lr
1a003040:	4252      	negs	r2, r2
1a003042:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003046:	f000 f82f 	bl	1a0030a8 <__udivmoddi4>
1a00304a:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00304e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003052:	b004      	add	sp, #16
1a003054:	4240      	negs	r0, r0
1a003056:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00305a:	4770      	bx	lr
1a00305c:	4252      	negs	r2, r2
1a00305e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003062:	f000 f821 	bl	1a0030a8 <__udivmoddi4>
1a003066:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00306a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00306e:	b004      	add	sp, #16
1a003070:	4252      	negs	r2, r2
1a003072:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003076:	4770      	bx	lr

1a003078 <__aeabi_uldivmod>:
1a003078:	b953      	cbnz	r3, 1a003090 <__aeabi_uldivmod+0x18>
1a00307a:	b94a      	cbnz	r2, 1a003090 <__aeabi_uldivmod+0x18>
1a00307c:	2900      	cmp	r1, #0
1a00307e:	bf08      	it	eq
1a003080:	2800      	cmpeq	r0, #0
1a003082:	bf1c      	itt	ne
1a003084:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003088:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00308c:	f000 b974 	b.w	1a003378 <__aeabi_idiv0>
1a003090:	f1ad 0c08 	sub.w	ip, sp, #8
1a003094:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003098:	f000 f806 	bl	1a0030a8 <__udivmoddi4>
1a00309c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0030a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0030a4:	b004      	add	sp, #16
1a0030a6:	4770      	bx	lr

1a0030a8 <__udivmoddi4>:
1a0030a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0030ac:	9e08      	ldr	r6, [sp, #32]
1a0030ae:	4604      	mov	r4, r0
1a0030b0:	4688      	mov	r8, r1
1a0030b2:	2b00      	cmp	r3, #0
1a0030b4:	f040 8085 	bne.w	1a0031c2 <__udivmoddi4+0x11a>
1a0030b8:	428a      	cmp	r2, r1
1a0030ba:	4615      	mov	r5, r2
1a0030bc:	d948      	bls.n	1a003150 <__udivmoddi4+0xa8>
1a0030be:	fab2 f282 	clz	r2, r2
1a0030c2:	b14a      	cbz	r2, 1a0030d8 <__udivmoddi4+0x30>
1a0030c4:	f1c2 0720 	rsb	r7, r2, #32
1a0030c8:	fa01 f302 	lsl.w	r3, r1, r2
1a0030cc:	fa20 f707 	lsr.w	r7, r0, r7
1a0030d0:	4095      	lsls	r5, r2
1a0030d2:	ea47 0803 	orr.w	r8, r7, r3
1a0030d6:	4094      	lsls	r4, r2
1a0030d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0030dc:	0c23      	lsrs	r3, r4, #16
1a0030de:	fbb8 f7fe 	udiv	r7, r8, lr
1a0030e2:	fa1f fc85 	uxth.w	ip, r5
1a0030e6:	fb0e 8817 	mls	r8, lr, r7, r8
1a0030ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0030ee:	fb07 f10c 	mul.w	r1, r7, ip
1a0030f2:	4299      	cmp	r1, r3
1a0030f4:	d909      	bls.n	1a00310a <__udivmoddi4+0x62>
1a0030f6:	18eb      	adds	r3, r5, r3
1a0030f8:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0030fc:	f080 80e3 	bcs.w	1a0032c6 <__udivmoddi4+0x21e>
1a003100:	4299      	cmp	r1, r3
1a003102:	f240 80e0 	bls.w	1a0032c6 <__udivmoddi4+0x21e>
1a003106:	3f02      	subs	r7, #2
1a003108:	442b      	add	r3, r5
1a00310a:	1a5b      	subs	r3, r3, r1
1a00310c:	b2a4      	uxth	r4, r4
1a00310e:	fbb3 f0fe 	udiv	r0, r3, lr
1a003112:	fb0e 3310 	mls	r3, lr, r0, r3
1a003116:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00311a:	fb00 fc0c 	mul.w	ip, r0, ip
1a00311e:	45a4      	cmp	ip, r4
1a003120:	d909      	bls.n	1a003136 <__udivmoddi4+0x8e>
1a003122:	192c      	adds	r4, r5, r4
1a003124:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003128:	f080 80cb 	bcs.w	1a0032c2 <__udivmoddi4+0x21a>
1a00312c:	45a4      	cmp	ip, r4
1a00312e:	f240 80c8 	bls.w	1a0032c2 <__udivmoddi4+0x21a>
1a003132:	3802      	subs	r0, #2
1a003134:	442c      	add	r4, r5
1a003136:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00313a:	eba4 040c 	sub.w	r4, r4, ip
1a00313e:	2700      	movs	r7, #0
1a003140:	b11e      	cbz	r6, 1a00314a <__udivmoddi4+0xa2>
1a003142:	40d4      	lsrs	r4, r2
1a003144:	2300      	movs	r3, #0
1a003146:	e9c6 4300 	strd	r4, r3, [r6]
1a00314a:	4639      	mov	r1, r7
1a00314c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003150:	2a00      	cmp	r2, #0
1a003152:	d053      	beq.n	1a0031fc <__udivmoddi4+0x154>
1a003154:	fab2 f282 	clz	r2, r2
1a003158:	2a00      	cmp	r2, #0
1a00315a:	f040 80b6 	bne.w	1a0032ca <__udivmoddi4+0x222>
1a00315e:	1b49      	subs	r1, r1, r5
1a003160:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003164:	fa1f f885 	uxth.w	r8, r5
1a003168:	2701      	movs	r7, #1
1a00316a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00316e:	0c23      	lsrs	r3, r4, #16
1a003170:	fb0e 111c 	mls	r1, lr, ip, r1
1a003174:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003178:	fb08 f10c 	mul.w	r1, r8, ip
1a00317c:	4299      	cmp	r1, r3
1a00317e:	d907      	bls.n	1a003190 <__udivmoddi4+0xe8>
1a003180:	18eb      	adds	r3, r5, r3
1a003182:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003186:	d202      	bcs.n	1a00318e <__udivmoddi4+0xe6>
1a003188:	4299      	cmp	r1, r3
1a00318a:	f200 80ec 	bhi.w	1a003366 <__udivmoddi4+0x2be>
1a00318e:	4684      	mov	ip, r0
1a003190:	1a59      	subs	r1, r3, r1
1a003192:	b2a3      	uxth	r3, r4
1a003194:	fbb1 f0fe 	udiv	r0, r1, lr
1a003198:	fb0e 1410 	mls	r4, lr, r0, r1
1a00319c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0031a0:	fb08 f800 	mul.w	r8, r8, r0
1a0031a4:	45a0      	cmp	r8, r4
1a0031a6:	d907      	bls.n	1a0031b8 <__udivmoddi4+0x110>
1a0031a8:	192c      	adds	r4, r5, r4
1a0031aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0031ae:	d202      	bcs.n	1a0031b6 <__udivmoddi4+0x10e>
1a0031b0:	45a0      	cmp	r8, r4
1a0031b2:	f200 80dc 	bhi.w	1a00336e <__udivmoddi4+0x2c6>
1a0031b6:	4618      	mov	r0, r3
1a0031b8:	eba4 0408 	sub.w	r4, r4, r8
1a0031bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0031c0:	e7be      	b.n	1a003140 <__udivmoddi4+0x98>
1a0031c2:	428b      	cmp	r3, r1
1a0031c4:	d908      	bls.n	1a0031d8 <__udivmoddi4+0x130>
1a0031c6:	2e00      	cmp	r6, #0
1a0031c8:	d078      	beq.n	1a0032bc <__udivmoddi4+0x214>
1a0031ca:	2700      	movs	r7, #0
1a0031cc:	e9c6 0100 	strd	r0, r1, [r6]
1a0031d0:	4638      	mov	r0, r7
1a0031d2:	4639      	mov	r1, r7
1a0031d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0031d8:	fab3 f783 	clz	r7, r3
1a0031dc:	b97f      	cbnz	r7, 1a0031fe <__udivmoddi4+0x156>
1a0031de:	428b      	cmp	r3, r1
1a0031e0:	d302      	bcc.n	1a0031e8 <__udivmoddi4+0x140>
1a0031e2:	4282      	cmp	r2, r0
1a0031e4:	f200 80bd 	bhi.w	1a003362 <__udivmoddi4+0x2ba>
1a0031e8:	1a84      	subs	r4, r0, r2
1a0031ea:	eb61 0303 	sbc.w	r3, r1, r3
1a0031ee:	2001      	movs	r0, #1
1a0031f0:	4698      	mov	r8, r3
1a0031f2:	2e00      	cmp	r6, #0
1a0031f4:	d0a9      	beq.n	1a00314a <__udivmoddi4+0xa2>
1a0031f6:	e9c6 4800 	strd	r4, r8, [r6]
1a0031fa:	e7a6      	b.n	1a00314a <__udivmoddi4+0xa2>
1a0031fc:	deff      	udf	#255	; 0xff
1a0031fe:	f1c7 0520 	rsb	r5, r7, #32
1a003202:	40bb      	lsls	r3, r7
1a003204:	fa22 fc05 	lsr.w	ip, r2, r5
1a003208:	ea4c 0c03 	orr.w	ip, ip, r3
1a00320c:	fa01 f407 	lsl.w	r4, r1, r7
1a003210:	fa20 f805 	lsr.w	r8, r0, r5
1a003214:	fa21 f305 	lsr.w	r3, r1, r5
1a003218:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a00321c:	ea48 0404 	orr.w	r4, r8, r4
1a003220:	fbb3 f9fe 	udiv	r9, r3, lr
1a003224:	0c21      	lsrs	r1, r4, #16
1a003226:	fb0e 3319 	mls	r3, lr, r9, r3
1a00322a:	fa1f f88c 	uxth.w	r8, ip
1a00322e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a003232:	fb09 fa08 	mul.w	sl, r9, r8
1a003236:	459a      	cmp	sl, r3
1a003238:	fa02 f207 	lsl.w	r2, r2, r7
1a00323c:	fa00 f107 	lsl.w	r1, r0, r7
1a003240:	d90b      	bls.n	1a00325a <__udivmoddi4+0x1b2>
1a003242:	eb1c 0303 	adds.w	r3, ip, r3
1a003246:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00324a:	f080 8088 	bcs.w	1a00335e <__udivmoddi4+0x2b6>
1a00324e:	459a      	cmp	sl, r3
1a003250:	f240 8085 	bls.w	1a00335e <__udivmoddi4+0x2b6>
1a003254:	f1a9 0902 	sub.w	r9, r9, #2
1a003258:	4463      	add	r3, ip
1a00325a:	eba3 030a 	sub.w	r3, r3, sl
1a00325e:	b2a4      	uxth	r4, r4
1a003260:	fbb3 f0fe 	udiv	r0, r3, lr
1a003264:	fb0e 3310 	mls	r3, lr, r0, r3
1a003268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00326c:	fb00 f808 	mul.w	r8, r0, r8
1a003270:	45a0      	cmp	r8, r4
1a003272:	d908      	bls.n	1a003286 <__udivmoddi4+0x1de>
1a003274:	eb1c 0404 	adds.w	r4, ip, r4
1a003278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00327c:	d26b      	bcs.n	1a003356 <__udivmoddi4+0x2ae>
1a00327e:	45a0      	cmp	r8, r4
1a003280:	d969      	bls.n	1a003356 <__udivmoddi4+0x2ae>
1a003282:	3802      	subs	r0, #2
1a003284:	4464      	add	r4, ip
1a003286:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00328a:	eba4 0408 	sub.w	r4, r4, r8
1a00328e:	fba0 8902 	umull	r8, r9, r0, r2
1a003292:	454c      	cmp	r4, r9
1a003294:	46c6      	mov	lr, r8
1a003296:	464b      	mov	r3, r9
1a003298:	d354      	bcc.n	1a003344 <__udivmoddi4+0x29c>
1a00329a:	d051      	beq.n	1a003340 <__udivmoddi4+0x298>
1a00329c:	2e00      	cmp	r6, #0
1a00329e:	d069      	beq.n	1a003374 <__udivmoddi4+0x2cc>
1a0032a0:	ebb1 020e 	subs.w	r2, r1, lr
1a0032a4:	eb64 0403 	sbc.w	r4, r4, r3
1a0032a8:	fa04 f505 	lsl.w	r5, r4, r5
1a0032ac:	fa22 f307 	lsr.w	r3, r2, r7
1a0032b0:	40fc      	lsrs	r4, r7
1a0032b2:	431d      	orrs	r5, r3
1a0032b4:	e9c6 5400 	strd	r5, r4, [r6]
1a0032b8:	2700      	movs	r7, #0
1a0032ba:	e746      	b.n	1a00314a <__udivmoddi4+0xa2>
1a0032bc:	4637      	mov	r7, r6
1a0032be:	4630      	mov	r0, r6
1a0032c0:	e743      	b.n	1a00314a <__udivmoddi4+0xa2>
1a0032c2:	4618      	mov	r0, r3
1a0032c4:	e737      	b.n	1a003136 <__udivmoddi4+0x8e>
1a0032c6:	4607      	mov	r7, r0
1a0032c8:	e71f      	b.n	1a00310a <__udivmoddi4+0x62>
1a0032ca:	f1c2 0320 	rsb	r3, r2, #32
1a0032ce:	fa20 f703 	lsr.w	r7, r0, r3
1a0032d2:	4095      	lsls	r5, r2
1a0032d4:	fa01 f002 	lsl.w	r0, r1, r2
1a0032d8:	fa21 f303 	lsr.w	r3, r1, r3
1a0032dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0032e0:	4338      	orrs	r0, r7
1a0032e2:	0c01      	lsrs	r1, r0, #16
1a0032e4:	fbb3 f7fe 	udiv	r7, r3, lr
1a0032e8:	fa1f f885 	uxth.w	r8, r5
1a0032ec:	fb0e 3317 	mls	r3, lr, r7, r3
1a0032f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0032f4:	fb07 f308 	mul.w	r3, r7, r8
1a0032f8:	428b      	cmp	r3, r1
1a0032fa:	fa04 f402 	lsl.w	r4, r4, r2
1a0032fe:	d907      	bls.n	1a003310 <__udivmoddi4+0x268>
1a003300:	1869      	adds	r1, r5, r1
1a003302:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003306:	d228      	bcs.n	1a00335a <__udivmoddi4+0x2b2>
1a003308:	428b      	cmp	r3, r1
1a00330a:	d926      	bls.n	1a00335a <__udivmoddi4+0x2b2>
1a00330c:	3f02      	subs	r7, #2
1a00330e:	4429      	add	r1, r5
1a003310:	1acb      	subs	r3, r1, r3
1a003312:	b281      	uxth	r1, r0
1a003314:	fbb3 f0fe 	udiv	r0, r3, lr
1a003318:	fb0e 3310 	mls	r3, lr, r0, r3
1a00331c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003320:	fb00 f308 	mul.w	r3, r0, r8
1a003324:	428b      	cmp	r3, r1
1a003326:	d907      	bls.n	1a003338 <__udivmoddi4+0x290>
1a003328:	1869      	adds	r1, r5, r1
1a00332a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00332e:	d210      	bcs.n	1a003352 <__udivmoddi4+0x2aa>
1a003330:	428b      	cmp	r3, r1
1a003332:	d90e      	bls.n	1a003352 <__udivmoddi4+0x2aa>
1a003334:	3802      	subs	r0, #2
1a003336:	4429      	add	r1, r5
1a003338:	1ac9      	subs	r1, r1, r3
1a00333a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00333e:	e714      	b.n	1a00316a <__udivmoddi4+0xc2>
1a003340:	4541      	cmp	r1, r8
1a003342:	d2ab      	bcs.n	1a00329c <__udivmoddi4+0x1f4>
1a003344:	ebb8 0e02 	subs.w	lr, r8, r2
1a003348:	eb69 020c 	sbc.w	r2, r9, ip
1a00334c:	3801      	subs	r0, #1
1a00334e:	4613      	mov	r3, r2
1a003350:	e7a4      	b.n	1a00329c <__udivmoddi4+0x1f4>
1a003352:	4660      	mov	r0, ip
1a003354:	e7f0      	b.n	1a003338 <__udivmoddi4+0x290>
1a003356:	4618      	mov	r0, r3
1a003358:	e795      	b.n	1a003286 <__udivmoddi4+0x1de>
1a00335a:	4667      	mov	r7, ip
1a00335c:	e7d8      	b.n	1a003310 <__udivmoddi4+0x268>
1a00335e:	4681      	mov	r9, r0
1a003360:	e77b      	b.n	1a00325a <__udivmoddi4+0x1b2>
1a003362:	4638      	mov	r0, r7
1a003364:	e745      	b.n	1a0031f2 <__udivmoddi4+0x14a>
1a003366:	f1ac 0c02 	sub.w	ip, ip, #2
1a00336a:	442b      	add	r3, r5
1a00336c:	e710      	b.n	1a003190 <__udivmoddi4+0xe8>
1a00336e:	3802      	subs	r0, #2
1a003370:	442c      	add	r4, r5
1a003372:	e721      	b.n	1a0031b8 <__udivmoddi4+0x110>
1a003374:	4637      	mov	r7, r6
1a003376:	e6e8      	b.n	1a00314a <__udivmoddi4+0xa2>

1a003378 <__aeabi_idiv0>:
1a003378:	4770      	bx	lr
1a00337a:	bf00      	nop

1a00337c <_malloc_trim_r>:
1a00337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00337e:	4f24      	ldr	r7, [pc, #144]	; (1a003410 <_malloc_trim_r+0x94>)
1a003380:	460c      	mov	r4, r1
1a003382:	4606      	mov	r6, r0
1a003384:	f000 fd0a 	bl	1a003d9c <__malloc_lock>
1a003388:	68bb      	ldr	r3, [r7, #8]
1a00338a:	685d      	ldr	r5, [r3, #4]
1a00338c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a003390:	310f      	adds	r1, #15
1a003392:	f025 0503 	bic.w	r5, r5, #3
1a003396:	4429      	add	r1, r5
1a003398:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a00339c:	f021 010f 	bic.w	r1, r1, #15
1a0033a0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a0033a4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a0033a8:	db07      	blt.n	1a0033ba <_malloc_trim_r+0x3e>
1a0033aa:	2100      	movs	r1, #0
1a0033ac:	4630      	mov	r0, r6
1a0033ae:	f7fd fdc7 	bl	1a000f40 <_sbrk_r>
1a0033b2:	68bb      	ldr	r3, [r7, #8]
1a0033b4:	442b      	add	r3, r5
1a0033b6:	4298      	cmp	r0, r3
1a0033b8:	d004      	beq.n	1a0033c4 <_malloc_trim_r+0x48>
1a0033ba:	4630      	mov	r0, r6
1a0033bc:	f000 fcf4 	bl	1a003da8 <__malloc_unlock>
1a0033c0:	2000      	movs	r0, #0
1a0033c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0033c4:	4261      	negs	r1, r4
1a0033c6:	4630      	mov	r0, r6
1a0033c8:	f7fd fdba 	bl	1a000f40 <_sbrk_r>
1a0033cc:	3001      	adds	r0, #1
1a0033ce:	d00d      	beq.n	1a0033ec <_malloc_trim_r+0x70>
1a0033d0:	4b10      	ldr	r3, [pc, #64]	; (1a003414 <_malloc_trim_r+0x98>)
1a0033d2:	68ba      	ldr	r2, [r7, #8]
1a0033d4:	6819      	ldr	r1, [r3, #0]
1a0033d6:	1b2d      	subs	r5, r5, r4
1a0033d8:	f045 0501 	orr.w	r5, r5, #1
1a0033dc:	4630      	mov	r0, r6
1a0033de:	1b09      	subs	r1, r1, r4
1a0033e0:	6055      	str	r5, [r2, #4]
1a0033e2:	6019      	str	r1, [r3, #0]
1a0033e4:	f000 fce0 	bl	1a003da8 <__malloc_unlock>
1a0033e8:	2001      	movs	r0, #1
1a0033ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0033ec:	2100      	movs	r1, #0
1a0033ee:	4630      	mov	r0, r6
1a0033f0:	f7fd fda6 	bl	1a000f40 <_sbrk_r>
1a0033f4:	68ba      	ldr	r2, [r7, #8]
1a0033f6:	1a83      	subs	r3, r0, r2
1a0033f8:	2b0f      	cmp	r3, #15
1a0033fa:	ddde      	ble.n	1a0033ba <_malloc_trim_r+0x3e>
1a0033fc:	4c06      	ldr	r4, [pc, #24]	; (1a003418 <_malloc_trim_r+0x9c>)
1a0033fe:	4905      	ldr	r1, [pc, #20]	; (1a003414 <_malloc_trim_r+0x98>)
1a003400:	6824      	ldr	r4, [r4, #0]
1a003402:	f043 0301 	orr.w	r3, r3, #1
1a003406:	1b00      	subs	r0, r0, r4
1a003408:	6053      	str	r3, [r2, #4]
1a00340a:	6008      	str	r0, [r1, #0]
1a00340c:	e7d5      	b.n	1a0033ba <_malloc_trim_r+0x3e>
1a00340e:	bf00      	nop
1a003410:	10000478 	.word	0x10000478
1a003414:	10000a20 	.word	0x10000a20
1a003418:	10000880 	.word	0x10000880

1a00341c <_free_r>:
1a00341c:	2900      	cmp	r1, #0
1a00341e:	d05d      	beq.n	1a0034dc <_free_r+0xc0>
1a003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003422:	460f      	mov	r7, r1
1a003424:	4606      	mov	r6, r0
1a003426:	f000 fcb9 	bl	1a003d9c <__malloc_lock>
1a00342a:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a00342e:	4c73      	ldr	r4, [pc, #460]	; (1a0035fc <_free_r+0x1e0>)
1a003430:	f02c 0301 	bic.w	r3, ip, #1
1a003434:	f1a7 0008 	sub.w	r0, r7, #8
1a003438:	18c2      	adds	r2, r0, r3
1a00343a:	68a1      	ldr	r1, [r4, #8]
1a00343c:	6855      	ldr	r5, [r2, #4]
1a00343e:	4291      	cmp	r1, r2
1a003440:	f025 0503 	bic.w	r5, r5, #3
1a003444:	d07f      	beq.n	1a003546 <_free_r+0x12a>
1a003446:	f01c 0f01 	tst.w	ip, #1
1a00344a:	6055      	str	r5, [r2, #4]
1a00344c:	eb02 0105 	add.w	r1, r2, r5
1a003450:	d133      	bne.n	1a0034ba <_free_r+0x9e>
1a003452:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a003456:	6849      	ldr	r1, [r1, #4]
1a003458:	eba0 000e 	sub.w	r0, r0, lr
1a00345c:	f104 0c08 	add.w	ip, r4, #8
1a003460:	6887      	ldr	r7, [r0, #8]
1a003462:	4567      	cmp	r7, ip
1a003464:	4473      	add	r3, lr
1a003466:	f001 0101 	and.w	r1, r1, #1
1a00346a:	d060      	beq.n	1a00352e <_free_r+0x112>
1a00346c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a003470:	f8c7 e00c 	str.w	lr, [r7, #12]
1a003474:	f8ce 7008 	str.w	r7, [lr, #8]
1a003478:	2900      	cmp	r1, #0
1a00347a:	f000 8089 	beq.w	1a003590 <_free_r+0x174>
1a00347e:	f043 0101 	orr.w	r1, r3, #1
1a003482:	6041      	str	r1, [r0, #4]
1a003484:	6013      	str	r3, [r2, #0]
1a003486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00348a:	d230      	bcs.n	1a0034ee <_free_r+0xd2>
1a00348c:	08db      	lsrs	r3, r3, #3
1a00348e:	1c59      	adds	r1, r3, #1
1a003490:	6865      	ldr	r5, [r4, #4]
1a003492:	109a      	asrs	r2, r3, #2
1a003494:	2301      	movs	r3, #1
1a003496:	4093      	lsls	r3, r2
1a003498:	432b      	orrs	r3, r5
1a00349a:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a00349e:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a0034a2:	6063      	str	r3, [r4, #4]
1a0034a4:	3a08      	subs	r2, #8
1a0034a6:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a0034aa:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a0034ae:	60e8      	str	r0, [r5, #12]
1a0034b0:	4630      	mov	r0, r6
1a0034b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0034b6:	f000 bc77 	b.w	1a003da8 <__malloc_unlock>
1a0034ba:	6849      	ldr	r1, [r1, #4]
1a0034bc:	07c9      	lsls	r1, r1, #31
1a0034be:	d40e      	bmi.n	1a0034de <_free_r+0xc2>
1a0034c0:	442b      	add	r3, r5
1a0034c2:	f104 0c08 	add.w	ip, r4, #8
1a0034c6:	6891      	ldr	r1, [r2, #8]
1a0034c8:	4561      	cmp	r1, ip
1a0034ca:	f043 0501 	orr.w	r5, r3, #1
1a0034ce:	d067      	beq.n	1a0035a0 <_free_r+0x184>
1a0034d0:	68d2      	ldr	r2, [r2, #12]
1a0034d2:	60ca      	str	r2, [r1, #12]
1a0034d4:	6091      	str	r1, [r2, #8]
1a0034d6:	6045      	str	r5, [r0, #4]
1a0034d8:	50c3      	str	r3, [r0, r3]
1a0034da:	e7d4      	b.n	1a003486 <_free_r+0x6a>
1a0034dc:	4770      	bx	lr
1a0034de:	f043 0101 	orr.w	r1, r3, #1
1a0034e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0034e6:	f847 1c04 	str.w	r1, [r7, #-4]
1a0034ea:	6013      	str	r3, [r2, #0]
1a0034ec:	d3ce      	bcc.n	1a00348c <_free_r+0x70>
1a0034ee:	0a5a      	lsrs	r2, r3, #9
1a0034f0:	2a04      	cmp	r2, #4
1a0034f2:	d842      	bhi.n	1a00357a <_free_r+0x15e>
1a0034f4:	099a      	lsrs	r2, r3, #6
1a0034f6:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a0034fa:	00ff      	lsls	r7, r7, #3
1a0034fc:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a003500:	19e5      	adds	r5, r4, r7
1a003502:	59e2      	ldr	r2, [r4, r7]
1a003504:	3d08      	subs	r5, #8
1a003506:	4295      	cmp	r5, r2
1a003508:	d051      	beq.n	1a0035ae <_free_r+0x192>
1a00350a:	6851      	ldr	r1, [r2, #4]
1a00350c:	f021 0103 	bic.w	r1, r1, #3
1a003510:	4299      	cmp	r1, r3
1a003512:	d902      	bls.n	1a00351a <_free_r+0xfe>
1a003514:	6892      	ldr	r2, [r2, #8]
1a003516:	4295      	cmp	r5, r2
1a003518:	d1f7      	bne.n	1a00350a <_free_r+0xee>
1a00351a:	68d5      	ldr	r5, [r2, #12]
1a00351c:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a003520:	60a8      	str	r0, [r5, #8]
1a003522:	60d0      	str	r0, [r2, #12]
1a003524:	4630      	mov	r0, r6
1a003526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a00352a:	f000 bc3d 	b.w	1a003da8 <__malloc_unlock>
1a00352e:	2900      	cmp	r1, #0
1a003530:	d15e      	bne.n	1a0035f0 <_free_r+0x1d4>
1a003532:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a003536:	442b      	add	r3, r5
1a003538:	f043 0401 	orr.w	r4, r3, #1
1a00353c:	60ca      	str	r2, [r1, #12]
1a00353e:	6091      	str	r1, [r2, #8]
1a003540:	6044      	str	r4, [r0, #4]
1a003542:	50c3      	str	r3, [r0, r3]
1a003544:	e7b4      	b.n	1a0034b0 <_free_r+0x94>
1a003546:	f01c 0f01 	tst.w	ip, #1
1a00354a:	442b      	add	r3, r5
1a00354c:	d107      	bne.n	1a00355e <_free_r+0x142>
1a00354e:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a003552:	1a80      	subs	r0, r0, r2
1a003554:	4413      	add	r3, r2
1a003556:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a00355a:	60ca      	str	r2, [r1, #12]
1a00355c:	6091      	str	r1, [r2, #8]
1a00355e:	4a28      	ldr	r2, [pc, #160]	; (1a003600 <_free_r+0x1e4>)
1a003560:	6812      	ldr	r2, [r2, #0]
1a003562:	f043 0101 	orr.w	r1, r3, #1
1a003566:	429a      	cmp	r2, r3
1a003568:	6041      	str	r1, [r0, #4]
1a00356a:	60a0      	str	r0, [r4, #8]
1a00356c:	d8a0      	bhi.n	1a0034b0 <_free_r+0x94>
1a00356e:	4b25      	ldr	r3, [pc, #148]	; (1a003604 <_free_r+0x1e8>)
1a003570:	4630      	mov	r0, r6
1a003572:	6819      	ldr	r1, [r3, #0]
1a003574:	f7ff ff02 	bl	1a00337c <_malloc_trim_r>
1a003578:	e79a      	b.n	1a0034b0 <_free_r+0x94>
1a00357a:	2a14      	cmp	r2, #20
1a00357c:	d90a      	bls.n	1a003594 <_free_r+0x178>
1a00357e:	2a54      	cmp	r2, #84	; 0x54
1a003580:	d81d      	bhi.n	1a0035be <_free_r+0x1a2>
1a003582:	0b1a      	lsrs	r2, r3, #12
1a003584:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a003588:	00ff      	lsls	r7, r7, #3
1a00358a:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a00358e:	e7b7      	b.n	1a003500 <_free_r+0xe4>
1a003590:	442b      	add	r3, r5
1a003592:	e798      	b.n	1a0034c6 <_free_r+0xaa>
1a003594:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a003598:	00ff      	lsls	r7, r7, #3
1a00359a:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a00359e:	e7af      	b.n	1a003500 <_free_r+0xe4>
1a0035a0:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a0035a4:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a0035a8:	6045      	str	r5, [r0, #4]
1a0035aa:	50c3      	str	r3, [r0, r3]
1a0035ac:	e780      	b.n	1a0034b0 <_free_r+0x94>
1a0035ae:	6863      	ldr	r3, [r4, #4]
1a0035b0:	1089      	asrs	r1, r1, #2
1a0035b2:	2701      	movs	r7, #1
1a0035b4:	fa07 f101 	lsl.w	r1, r7, r1
1a0035b8:	4319      	orrs	r1, r3
1a0035ba:	6061      	str	r1, [r4, #4]
1a0035bc:	e7ae      	b.n	1a00351c <_free_r+0x100>
1a0035be:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a0035c2:	d806      	bhi.n	1a0035d2 <_free_r+0x1b6>
1a0035c4:	0bda      	lsrs	r2, r3, #15
1a0035c6:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a0035ca:	00ff      	lsls	r7, r7, #3
1a0035cc:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a0035d0:	e796      	b.n	1a003500 <_free_r+0xe4>
1a0035d2:	f240 5154 	movw	r1, #1364	; 0x554
1a0035d6:	428a      	cmp	r2, r1
1a0035d8:	d806      	bhi.n	1a0035e8 <_free_r+0x1cc>
1a0035da:	0c9a      	lsrs	r2, r3, #18
1a0035dc:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a0035e0:	00ff      	lsls	r7, r7, #3
1a0035e2:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a0035e6:	e78b      	b.n	1a003500 <_free_r+0xe4>
1a0035e8:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a0035ec:	217e      	movs	r1, #126	; 0x7e
1a0035ee:	e787      	b.n	1a003500 <_free_r+0xe4>
1a0035f0:	f043 0101 	orr.w	r1, r3, #1
1a0035f4:	6041      	str	r1, [r0, #4]
1a0035f6:	6013      	str	r3, [r2, #0]
1a0035f8:	e75a      	b.n	1a0034b0 <_free_r+0x94>
1a0035fa:	bf00      	nop
1a0035fc:	10000478 	.word	0x10000478
1a003600:	10000884 	.word	0x10000884
1a003604:	10000a50 	.word	0x10000a50

1a003608 <__libc_init_array>:
1a003608:	b570      	push	{r4, r5, r6, lr}
1a00360a:	4e0d      	ldr	r6, [pc, #52]	; (1a003640 <__libc_init_array+0x38>)
1a00360c:	4d0d      	ldr	r5, [pc, #52]	; (1a003644 <__libc_init_array+0x3c>)
1a00360e:	1b76      	subs	r6, r6, r5
1a003610:	10b6      	asrs	r6, r6, #2
1a003612:	d006      	beq.n	1a003622 <__libc_init_array+0x1a>
1a003614:	2400      	movs	r4, #0
1a003616:	3401      	adds	r4, #1
1a003618:	f855 3b04 	ldr.w	r3, [r5], #4
1a00361c:	4798      	blx	r3
1a00361e:	42a6      	cmp	r6, r4
1a003620:	d1f9      	bne.n	1a003616 <__libc_init_array+0xe>
1a003622:	4e09      	ldr	r6, [pc, #36]	; (1a003648 <__libc_init_array+0x40>)
1a003624:	4d09      	ldr	r5, [pc, #36]	; (1a00364c <__libc_init_array+0x44>)
1a003626:	1b76      	subs	r6, r6, r5
1a003628:	f7fd fc89 	bl	1a000f3e <_init>
1a00362c:	10b6      	asrs	r6, r6, #2
1a00362e:	d006      	beq.n	1a00363e <__libc_init_array+0x36>
1a003630:	2400      	movs	r4, #0
1a003632:	3401      	adds	r4, #1
1a003634:	f855 3b04 	ldr.w	r3, [r5], #4
1a003638:	4798      	blx	r3
1a00363a:	42a6      	cmp	r6, r4
1a00363c:	d1f9      	bne.n	1a003632 <__libc_init_array+0x2a>
1a00363e:	bd70      	pop	{r4, r5, r6, pc}
1a003640:	1a007ccc 	.word	0x1a007ccc
1a003644:	1a007ccc 	.word	0x1a007ccc
1a003648:	1a007cd0 	.word	0x1a007cd0
1a00364c:	1a007ccc 	.word	0x1a007ccc

1a003650 <__retarget_lock_acquire_recursive>:
1a003650:	4770      	bx	lr
1a003652:	bf00      	nop

1a003654 <__retarget_lock_release_recursive>:
1a003654:	4770      	bx	lr
1a003656:	bf00      	nop

1a003658 <_malloc_r>:
1a003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00365c:	f101 050b 	add.w	r5, r1, #11
1a003660:	2d16      	cmp	r5, #22
1a003662:	b083      	sub	sp, #12
1a003664:	4606      	mov	r6, r0
1a003666:	d823      	bhi.n	1a0036b0 <_malloc_r+0x58>
1a003668:	2910      	cmp	r1, #16
1a00366a:	f200 80b9 	bhi.w	1a0037e0 <_malloc_r+0x188>
1a00366e:	f000 fb95 	bl	1a003d9c <__malloc_lock>
1a003672:	2510      	movs	r5, #16
1a003674:	2318      	movs	r3, #24
1a003676:	2002      	movs	r0, #2
1a003678:	4fba      	ldr	r7, [pc, #744]	; (1a003964 <_malloc_r+0x30c>)
1a00367a:	443b      	add	r3, r7
1a00367c:	f1a3 0208 	sub.w	r2, r3, #8
1a003680:	685c      	ldr	r4, [r3, #4]
1a003682:	4294      	cmp	r4, r2
1a003684:	f000 80b9 	beq.w	1a0037fa <_malloc_r+0x1a2>
1a003688:	6863      	ldr	r3, [r4, #4]
1a00368a:	f023 0303 	bic.w	r3, r3, #3
1a00368e:	4423      	add	r3, r4
1a003690:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a003694:	685a      	ldr	r2, [r3, #4]
1a003696:	60e9      	str	r1, [r5, #12]
1a003698:	f042 0201 	orr.w	r2, r2, #1
1a00369c:	4630      	mov	r0, r6
1a00369e:	608d      	str	r5, [r1, #8]
1a0036a0:	605a      	str	r2, [r3, #4]
1a0036a2:	f000 fb81 	bl	1a003da8 <__malloc_unlock>
1a0036a6:	3408      	adds	r4, #8
1a0036a8:	4620      	mov	r0, r4
1a0036aa:	b003      	add	sp, #12
1a0036ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0036b0:	f035 0507 	bics.w	r5, r5, #7
1a0036b4:	f100 8094 	bmi.w	1a0037e0 <_malloc_r+0x188>
1a0036b8:	42a9      	cmp	r1, r5
1a0036ba:	f200 8091 	bhi.w	1a0037e0 <_malloc_r+0x188>
1a0036be:	f000 fb6d 	bl	1a003d9c <__malloc_lock>
1a0036c2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a0036c6:	f0c0 81a2 	bcc.w	1a003a0e <_malloc_r+0x3b6>
1a0036ca:	0a6b      	lsrs	r3, r5, #9
1a0036cc:	f000 808f 	beq.w	1a0037ee <_malloc_r+0x196>
1a0036d0:	2b04      	cmp	r3, #4
1a0036d2:	f200 8178 	bhi.w	1a0039c6 <_malloc_r+0x36e>
1a0036d6:	09ab      	lsrs	r3, r5, #6
1a0036d8:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a0036dc:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a0036e0:	00c3      	lsls	r3, r0, #3
1a0036e2:	4fa0      	ldr	r7, [pc, #640]	; (1a003964 <_malloc_r+0x30c>)
1a0036e4:	443b      	add	r3, r7
1a0036e6:	f1a3 0108 	sub.w	r1, r3, #8
1a0036ea:	685c      	ldr	r4, [r3, #4]
1a0036ec:	42a1      	cmp	r1, r4
1a0036ee:	d106      	bne.n	1a0036fe <_malloc_r+0xa6>
1a0036f0:	e00c      	b.n	1a00370c <_malloc_r+0xb4>
1a0036f2:	2a00      	cmp	r2, #0
1a0036f4:	f280 8127 	bge.w	1a003946 <_malloc_r+0x2ee>
1a0036f8:	68e4      	ldr	r4, [r4, #12]
1a0036fa:	42a1      	cmp	r1, r4
1a0036fc:	d006      	beq.n	1a00370c <_malloc_r+0xb4>
1a0036fe:	6863      	ldr	r3, [r4, #4]
1a003700:	f023 0303 	bic.w	r3, r3, #3
1a003704:	1b5a      	subs	r2, r3, r5
1a003706:	2a0f      	cmp	r2, #15
1a003708:	ddf3      	ble.n	1a0036f2 <_malloc_r+0x9a>
1a00370a:	4660      	mov	r0, ip
1a00370c:	693c      	ldr	r4, [r7, #16]
1a00370e:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a003978 <_malloc_r+0x320>
1a003712:	4564      	cmp	r4, ip
1a003714:	d07c      	beq.n	1a003810 <_malloc_r+0x1b8>
1a003716:	6863      	ldr	r3, [r4, #4]
1a003718:	f023 0303 	bic.w	r3, r3, #3
1a00371c:	1b5a      	subs	r2, r3, r5
1a00371e:	2a0f      	cmp	r2, #15
1a003720:	f300 8183 	bgt.w	1a003a2a <_malloc_r+0x3d2>
1a003724:	2a00      	cmp	r2, #0
1a003726:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a00372a:	f280 8174 	bge.w	1a003a16 <_malloc_r+0x3be>
1a00372e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003732:	f080 8125 	bcs.w	1a003980 <_malloc_r+0x328>
1a003736:	08db      	lsrs	r3, r3, #3
1a003738:	1c59      	adds	r1, r3, #1
1a00373a:	687a      	ldr	r2, [r7, #4]
1a00373c:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a003740:	f8c4 8008 	str.w	r8, [r4, #8]
1a003744:	f04f 0e01 	mov.w	lr, #1
1a003748:	109b      	asrs	r3, r3, #2
1a00374a:	fa0e f303 	lsl.w	r3, lr, r3
1a00374e:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a003752:	4313      	orrs	r3, r2
1a003754:	f1ae 0208 	sub.w	r2, lr, #8
1a003758:	60e2      	str	r2, [r4, #12]
1a00375a:	607b      	str	r3, [r7, #4]
1a00375c:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a003760:	f8c8 400c 	str.w	r4, [r8, #12]
1a003764:	1082      	asrs	r2, r0, #2
1a003766:	2401      	movs	r4, #1
1a003768:	4094      	lsls	r4, r2
1a00376a:	429c      	cmp	r4, r3
1a00376c:	d856      	bhi.n	1a00381c <_malloc_r+0x1c4>
1a00376e:	421c      	tst	r4, r3
1a003770:	d106      	bne.n	1a003780 <_malloc_r+0x128>
1a003772:	f020 0003 	bic.w	r0, r0, #3
1a003776:	0064      	lsls	r4, r4, #1
1a003778:	421c      	tst	r4, r3
1a00377a:	f100 0004 	add.w	r0, r0, #4
1a00377e:	d0fa      	beq.n	1a003776 <_malloc_r+0x11e>
1a003780:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a003784:	46ce      	mov	lr, r9
1a003786:	4680      	mov	r8, r0
1a003788:	f8de 300c 	ldr.w	r3, [lr, #12]
1a00378c:	459e      	cmp	lr, r3
1a00378e:	d107      	bne.n	1a0037a0 <_malloc_r+0x148>
1a003790:	e125      	b.n	1a0039de <_malloc_r+0x386>
1a003792:	2a00      	cmp	r2, #0
1a003794:	f280 812c 	bge.w	1a0039f0 <_malloc_r+0x398>
1a003798:	68db      	ldr	r3, [r3, #12]
1a00379a:	459e      	cmp	lr, r3
1a00379c:	f000 811f 	beq.w	1a0039de <_malloc_r+0x386>
1a0037a0:	6859      	ldr	r1, [r3, #4]
1a0037a2:	f021 0103 	bic.w	r1, r1, #3
1a0037a6:	1b4a      	subs	r2, r1, r5
1a0037a8:	2a0f      	cmp	r2, #15
1a0037aa:	ddf2      	ble.n	1a003792 <_malloc_r+0x13a>
1a0037ac:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a0037b0:	195c      	adds	r4, r3, r5
1a0037b2:	f045 0501 	orr.w	r5, r5, #1
1a0037b6:	605d      	str	r5, [r3, #4]
1a0037b8:	f042 0501 	orr.w	r5, r2, #1
1a0037bc:	f8c8 e00c 	str.w	lr, [r8, #12]
1a0037c0:	4630      	mov	r0, r6
1a0037c2:	f8ce 8008 	str.w	r8, [lr, #8]
1a0037c6:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a0037ca:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a0037ce:	6065      	str	r5, [r4, #4]
1a0037d0:	505a      	str	r2, [r3, r1]
1a0037d2:	9300      	str	r3, [sp, #0]
1a0037d4:	f000 fae8 	bl	1a003da8 <__malloc_unlock>
1a0037d8:	9b00      	ldr	r3, [sp, #0]
1a0037da:	f103 0408 	add.w	r4, r3, #8
1a0037de:	e002      	b.n	1a0037e6 <_malloc_r+0x18e>
1a0037e0:	230c      	movs	r3, #12
1a0037e2:	6033      	str	r3, [r6, #0]
1a0037e4:	2400      	movs	r4, #0
1a0037e6:	4620      	mov	r0, r4
1a0037e8:	b003      	add	sp, #12
1a0037ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0037ee:	f44f 7300 	mov.w	r3, #512	; 0x200
1a0037f2:	2040      	movs	r0, #64	; 0x40
1a0037f4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a0037f8:	e773      	b.n	1a0036e2 <_malloc_r+0x8a>
1a0037fa:	68dc      	ldr	r4, [r3, #12]
1a0037fc:	42a3      	cmp	r3, r4
1a0037fe:	bf08      	it	eq
1a003800:	3002      	addeq	r0, #2
1a003802:	f47f af41 	bne.w	1a003688 <_malloc_r+0x30>
1a003806:	693c      	ldr	r4, [r7, #16]
1a003808:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a003978 <_malloc_r+0x320>
1a00380c:	4564      	cmp	r4, ip
1a00380e:	d182      	bne.n	1a003716 <_malloc_r+0xbe>
1a003810:	687b      	ldr	r3, [r7, #4]
1a003812:	1082      	asrs	r2, r0, #2
1a003814:	2401      	movs	r4, #1
1a003816:	4094      	lsls	r4, r2
1a003818:	429c      	cmp	r4, r3
1a00381a:	d9a8      	bls.n	1a00376e <_malloc_r+0x116>
1a00381c:	68bc      	ldr	r4, [r7, #8]
1a00381e:	6863      	ldr	r3, [r4, #4]
1a003820:	f023 0803 	bic.w	r8, r3, #3
1a003824:	45a8      	cmp	r8, r5
1a003826:	d303      	bcc.n	1a003830 <_malloc_r+0x1d8>
1a003828:	eba8 0305 	sub.w	r3, r8, r5
1a00382c:	2b0f      	cmp	r3, #15
1a00382e:	dc7a      	bgt.n	1a003926 <_malloc_r+0x2ce>
1a003830:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a00397c <_malloc_r+0x324>
1a003834:	4b4c      	ldr	r3, [pc, #304]	; (1a003968 <_malloc_r+0x310>)
1a003836:	f8d9 2000 	ldr.w	r2, [r9]
1a00383a:	681b      	ldr	r3, [r3, #0]
1a00383c:	3201      	adds	r2, #1
1a00383e:	442b      	add	r3, r5
1a003840:	eb04 0a08 	add.w	sl, r4, r8
1a003844:	f000 813c 	beq.w	1a003ac0 <_malloc_r+0x468>
1a003848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00384c:	330f      	adds	r3, #15
1a00384e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a003852:	f02b 0b0f 	bic.w	fp, fp, #15
1a003856:	4659      	mov	r1, fp
1a003858:	4630      	mov	r0, r6
1a00385a:	f7fd fb71 	bl	1a000f40 <_sbrk_r>
1a00385e:	1c41      	adds	r1, r0, #1
1a003860:	4602      	mov	r2, r0
1a003862:	f000 80fc 	beq.w	1a003a5e <_malloc_r+0x406>
1a003866:	4582      	cmp	sl, r0
1a003868:	f200 80f7 	bhi.w	1a003a5a <_malloc_r+0x402>
1a00386c:	4b3f      	ldr	r3, [pc, #252]	; (1a00396c <_malloc_r+0x314>)
1a00386e:	6818      	ldr	r0, [r3, #0]
1a003870:	4458      	add	r0, fp
1a003872:	6018      	str	r0, [r3, #0]
1a003874:	4601      	mov	r1, r0
1a003876:	f000 8157 	beq.w	1a003b28 <_malloc_r+0x4d0>
1a00387a:	f8d9 0000 	ldr.w	r0, [r9]
1a00387e:	9301      	str	r3, [sp, #4]
1a003880:	3001      	adds	r0, #1
1a003882:	bf1b      	ittet	ne
1a003884:	eba2 0a0a 	subne.w	sl, r2, sl
1a003888:	4451      	addne	r1, sl
1a00388a:	f8c9 2000 	streq.w	r2, [r9]
1a00388e:	6019      	strne	r1, [r3, #0]
1a003890:	f012 0a07 	ands.w	sl, r2, #7
1a003894:	f000 8120 	beq.w	1a003ad8 <_malloc_r+0x480>
1a003898:	f1ca 0108 	rsb	r1, sl, #8
1a00389c:	440a      	add	r2, r1
1a00389e:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a0038a2:	4493      	add	fp, r2
1a0038a4:	3108      	adds	r1, #8
1a0038a6:	eba1 010b 	sub.w	r1, r1, fp
1a0038aa:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a0038ae:	4649      	mov	r1, r9
1a0038b0:	4630      	mov	r0, r6
1a0038b2:	9200      	str	r2, [sp, #0]
1a0038b4:	f7fd fb44 	bl	1a000f40 <_sbrk_r>
1a0038b8:	1c42      	adds	r2, r0, #1
1a0038ba:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0038be:	f000 8158 	beq.w	1a003b72 <_malloc_r+0x51a>
1a0038c2:	1a80      	subs	r0, r0, r2
1a0038c4:	eb00 0b09 	add.w	fp, r0, r9
1a0038c8:	6818      	ldr	r0, [r3, #0]
1a0038ca:	60ba      	str	r2, [r7, #8]
1a0038cc:	f04b 0101 	orr.w	r1, fp, #1
1a0038d0:	4448      	add	r0, r9
1a0038d2:	42bc      	cmp	r4, r7
1a0038d4:	6051      	str	r1, [r2, #4]
1a0038d6:	6018      	str	r0, [r3, #0]
1a0038d8:	f000 8132 	beq.w	1a003b40 <_malloc_r+0x4e8>
1a0038dc:	f1b8 0f0f 	cmp.w	r8, #15
1a0038e0:	f240 8130 	bls.w	1a003b44 <_malloc_r+0x4ec>
1a0038e4:	6861      	ldr	r1, [r4, #4]
1a0038e6:	f1a8 0c0c 	sub.w	ip, r8, #12
1a0038ea:	f02c 0c07 	bic.w	ip, ip, #7
1a0038ee:	f001 0101 	and.w	r1, r1, #1
1a0038f2:	eb04 0e0c 	add.w	lr, r4, ip
1a0038f6:	ea41 010c 	orr.w	r1, r1, ip
1a0038fa:	f04f 0805 	mov.w	r8, #5
1a0038fe:	f1bc 0f0f 	cmp.w	ip, #15
1a003902:	6061      	str	r1, [r4, #4]
1a003904:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a003908:	f200 813b 	bhi.w	1a003b82 <_malloc_r+0x52a>
1a00390c:	6851      	ldr	r1, [r2, #4]
1a00390e:	4614      	mov	r4, r2
1a003910:	4b17      	ldr	r3, [pc, #92]	; (1a003970 <_malloc_r+0x318>)
1a003912:	681a      	ldr	r2, [r3, #0]
1a003914:	4282      	cmp	r2, r0
1a003916:	bf38      	it	cc
1a003918:	6018      	strcc	r0, [r3, #0]
1a00391a:	4b16      	ldr	r3, [pc, #88]	; (1a003974 <_malloc_r+0x31c>)
1a00391c:	681a      	ldr	r2, [r3, #0]
1a00391e:	4282      	cmp	r2, r0
1a003920:	bf38      	it	cc
1a003922:	6018      	strcc	r0, [r3, #0]
1a003924:	e09d      	b.n	1a003a62 <_malloc_r+0x40a>
1a003926:	1962      	adds	r2, r4, r5
1a003928:	f043 0301 	orr.w	r3, r3, #1
1a00392c:	f045 0501 	orr.w	r5, r5, #1
1a003930:	6065      	str	r5, [r4, #4]
1a003932:	4630      	mov	r0, r6
1a003934:	60ba      	str	r2, [r7, #8]
1a003936:	6053      	str	r3, [r2, #4]
1a003938:	f000 fa36 	bl	1a003da8 <__malloc_unlock>
1a00393c:	3408      	adds	r4, #8
1a00393e:	4620      	mov	r0, r4
1a003940:	b003      	add	sp, #12
1a003942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003946:	4423      	add	r3, r4
1a003948:	68e1      	ldr	r1, [r4, #12]
1a00394a:	685a      	ldr	r2, [r3, #4]
1a00394c:	68a5      	ldr	r5, [r4, #8]
1a00394e:	f042 0201 	orr.w	r2, r2, #1
1a003952:	60e9      	str	r1, [r5, #12]
1a003954:	4630      	mov	r0, r6
1a003956:	608d      	str	r5, [r1, #8]
1a003958:	605a      	str	r2, [r3, #4]
1a00395a:	f000 fa25 	bl	1a003da8 <__malloc_unlock>
1a00395e:	3408      	adds	r4, #8
1a003960:	e741      	b.n	1a0037e6 <_malloc_r+0x18e>
1a003962:	bf00      	nop
1a003964:	10000478 	.word	0x10000478
1a003968:	10000a50 	.word	0x10000a50
1a00396c:	10000a20 	.word	0x10000a20
1a003970:	10000a48 	.word	0x10000a48
1a003974:	10000a4c 	.word	0x10000a4c
1a003978:	10000480 	.word	0x10000480
1a00397c:	10000880 	.word	0x10000880
1a003980:	0a5a      	lsrs	r2, r3, #9
1a003982:	2a04      	cmp	r2, #4
1a003984:	d963      	bls.n	1a003a4e <_malloc_r+0x3f6>
1a003986:	2a14      	cmp	r2, #20
1a003988:	f200 80b7 	bhi.w	1a003afa <_malloc_r+0x4a2>
1a00398c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a003990:	00c9      	lsls	r1, r1, #3
1a003992:	325b      	adds	r2, #91	; 0x5b
1a003994:	eb07 0e01 	add.w	lr, r7, r1
1a003998:	5879      	ldr	r1, [r7, r1]
1a00399a:	f1ae 0e08 	sub.w	lr, lr, #8
1a00399e:	458e      	cmp	lr, r1
1a0039a0:	f000 8091 	beq.w	1a003ac6 <_malloc_r+0x46e>
1a0039a4:	684a      	ldr	r2, [r1, #4]
1a0039a6:	f022 0203 	bic.w	r2, r2, #3
1a0039aa:	429a      	cmp	r2, r3
1a0039ac:	d902      	bls.n	1a0039b4 <_malloc_r+0x35c>
1a0039ae:	6889      	ldr	r1, [r1, #8]
1a0039b0:	458e      	cmp	lr, r1
1a0039b2:	d1f7      	bne.n	1a0039a4 <_malloc_r+0x34c>
1a0039b4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a0039b8:	687b      	ldr	r3, [r7, #4]
1a0039ba:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a0039be:	f8ce 4008 	str.w	r4, [lr, #8]
1a0039c2:	60cc      	str	r4, [r1, #12]
1a0039c4:	e6ce      	b.n	1a003764 <_malloc_r+0x10c>
1a0039c6:	2b14      	cmp	r3, #20
1a0039c8:	d959      	bls.n	1a003a7e <_malloc_r+0x426>
1a0039ca:	2b54      	cmp	r3, #84	; 0x54
1a0039cc:	f200 809d 	bhi.w	1a003b0a <_malloc_r+0x4b2>
1a0039d0:	0b2b      	lsrs	r3, r5, #12
1a0039d2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a0039d6:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a0039da:	00c3      	lsls	r3, r0, #3
1a0039dc:	e681      	b.n	1a0036e2 <_malloc_r+0x8a>
1a0039de:	f108 0801 	add.w	r8, r8, #1
1a0039e2:	f018 0f03 	tst.w	r8, #3
1a0039e6:	f10e 0e08 	add.w	lr, lr, #8
1a0039ea:	f47f aecd 	bne.w	1a003788 <_malloc_r+0x130>
1a0039ee:	e051      	b.n	1a003a94 <_malloc_r+0x43c>
1a0039f0:	4419      	add	r1, r3
1a0039f2:	461c      	mov	r4, r3
1a0039f4:	684a      	ldr	r2, [r1, #4]
1a0039f6:	68db      	ldr	r3, [r3, #12]
1a0039f8:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a0039fc:	f042 0201 	orr.w	r2, r2, #1
1a003a00:	604a      	str	r2, [r1, #4]
1a003a02:	4630      	mov	r0, r6
1a003a04:	60eb      	str	r3, [r5, #12]
1a003a06:	609d      	str	r5, [r3, #8]
1a003a08:	f000 f9ce 	bl	1a003da8 <__malloc_unlock>
1a003a0c:	e6eb      	b.n	1a0037e6 <_malloc_r+0x18e>
1a003a0e:	08e8      	lsrs	r0, r5, #3
1a003a10:	f105 0308 	add.w	r3, r5, #8
1a003a14:	e630      	b.n	1a003678 <_malloc_r+0x20>
1a003a16:	4423      	add	r3, r4
1a003a18:	4630      	mov	r0, r6
1a003a1a:	685a      	ldr	r2, [r3, #4]
1a003a1c:	f042 0201 	orr.w	r2, r2, #1
1a003a20:	605a      	str	r2, [r3, #4]
1a003a22:	3408      	adds	r4, #8
1a003a24:	f000 f9c0 	bl	1a003da8 <__malloc_unlock>
1a003a28:	e6dd      	b.n	1a0037e6 <_malloc_r+0x18e>
1a003a2a:	1961      	adds	r1, r4, r5
1a003a2c:	f045 0e01 	orr.w	lr, r5, #1
1a003a30:	f042 0501 	orr.w	r5, r2, #1
1a003a34:	f8c4 e004 	str.w	lr, [r4, #4]
1a003a38:	4630      	mov	r0, r6
1a003a3a:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a003a3e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a003a42:	604d      	str	r5, [r1, #4]
1a003a44:	50e2      	str	r2, [r4, r3]
1a003a46:	f000 f9af 	bl	1a003da8 <__malloc_unlock>
1a003a4a:	3408      	adds	r4, #8
1a003a4c:	e6cb      	b.n	1a0037e6 <_malloc_r+0x18e>
1a003a4e:	099a      	lsrs	r2, r3, #6
1a003a50:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a003a54:	00c9      	lsls	r1, r1, #3
1a003a56:	3238      	adds	r2, #56	; 0x38
1a003a58:	e79c      	b.n	1a003994 <_malloc_r+0x33c>
1a003a5a:	42bc      	cmp	r4, r7
1a003a5c:	d05f      	beq.n	1a003b1e <_malloc_r+0x4c6>
1a003a5e:	68bc      	ldr	r4, [r7, #8]
1a003a60:	6861      	ldr	r1, [r4, #4]
1a003a62:	f021 0b03 	bic.w	fp, r1, #3
1a003a66:	45ab      	cmp	fp, r5
1a003a68:	ebab 0305 	sub.w	r3, fp, r5
1a003a6c:	d302      	bcc.n	1a003a74 <_malloc_r+0x41c>
1a003a6e:	2b0f      	cmp	r3, #15
1a003a70:	f73f af59 	bgt.w	1a003926 <_malloc_r+0x2ce>
1a003a74:	4630      	mov	r0, r6
1a003a76:	f000 f997 	bl	1a003da8 <__malloc_unlock>
1a003a7a:	2400      	movs	r4, #0
1a003a7c:	e6b3      	b.n	1a0037e6 <_malloc_r+0x18e>
1a003a7e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a003a82:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a003a86:	00c3      	lsls	r3, r0, #3
1a003a88:	e62b      	b.n	1a0036e2 <_malloc_r+0x8a>
1a003a8a:	f859 3908 	ldr.w	r3, [r9], #-8
1a003a8e:	454b      	cmp	r3, r9
1a003a90:	f040 8096 	bne.w	1a003bc0 <_malloc_r+0x568>
1a003a94:	f010 0f03 	tst.w	r0, #3
1a003a98:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a003a9c:	d1f5      	bne.n	1a003a8a <_malloc_r+0x432>
1a003a9e:	687b      	ldr	r3, [r7, #4]
1a003aa0:	ea23 0304 	bic.w	r3, r3, r4
1a003aa4:	607b      	str	r3, [r7, #4]
1a003aa6:	0064      	lsls	r4, r4, #1
1a003aa8:	429c      	cmp	r4, r3
1a003aaa:	f63f aeb7 	bhi.w	1a00381c <_malloc_r+0x1c4>
1a003aae:	b91c      	cbnz	r4, 1a003ab8 <_malloc_r+0x460>
1a003ab0:	e6b4      	b.n	1a00381c <_malloc_r+0x1c4>
1a003ab2:	0064      	lsls	r4, r4, #1
1a003ab4:	f108 0804 	add.w	r8, r8, #4
1a003ab8:	421c      	tst	r4, r3
1a003aba:	d0fa      	beq.n	1a003ab2 <_malloc_r+0x45a>
1a003abc:	4640      	mov	r0, r8
1a003abe:	e65f      	b.n	1a003780 <_malloc_r+0x128>
1a003ac0:	f103 0b10 	add.w	fp, r3, #16
1a003ac4:	e6c7      	b.n	1a003856 <_malloc_r+0x1fe>
1a003ac6:	687b      	ldr	r3, [r7, #4]
1a003ac8:	1092      	asrs	r2, r2, #2
1a003aca:	f04f 0801 	mov.w	r8, #1
1a003ace:	fa08 f202 	lsl.w	r2, r8, r2
1a003ad2:	4313      	orrs	r3, r2
1a003ad4:	607b      	str	r3, [r7, #4]
1a003ad6:	e770      	b.n	1a0039ba <_malloc_r+0x362>
1a003ad8:	eb02 000b 	add.w	r0, r2, fp
1a003adc:	4240      	negs	r0, r0
1a003ade:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a003ae2:	4649      	mov	r1, r9
1a003ae4:	4630      	mov	r0, r6
1a003ae6:	9200      	str	r2, [sp, #0]
1a003ae8:	f7fd fa2a 	bl	1a000f40 <_sbrk_r>
1a003aec:	1c43      	adds	r3, r0, #1
1a003aee:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003af2:	f47f aee6 	bne.w	1a0038c2 <_malloc_r+0x26a>
1a003af6:	46d1      	mov	r9, sl
1a003af8:	e6e6      	b.n	1a0038c8 <_malloc_r+0x270>
1a003afa:	2a54      	cmp	r2, #84	; 0x54
1a003afc:	d825      	bhi.n	1a003b4a <_malloc_r+0x4f2>
1a003afe:	0b1a      	lsrs	r2, r3, #12
1a003b00:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a003b04:	00c9      	lsls	r1, r1, #3
1a003b06:	326e      	adds	r2, #110	; 0x6e
1a003b08:	e744      	b.n	1a003994 <_malloc_r+0x33c>
1a003b0a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a003b0e:	d825      	bhi.n	1a003b5c <_malloc_r+0x504>
1a003b10:	0beb      	lsrs	r3, r5, #15
1a003b12:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a003b16:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a003b1a:	00c3      	lsls	r3, r0, #3
1a003b1c:	e5e1      	b.n	1a0036e2 <_malloc_r+0x8a>
1a003b1e:	4b29      	ldr	r3, [pc, #164]	; (1a003bc4 <_malloc_r+0x56c>)
1a003b20:	6819      	ldr	r1, [r3, #0]
1a003b22:	4459      	add	r1, fp
1a003b24:	6019      	str	r1, [r3, #0]
1a003b26:	e6a8      	b.n	1a00387a <_malloc_r+0x222>
1a003b28:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a003b2c:	f1bc 0f00 	cmp.w	ip, #0
1a003b30:	f47f aea3 	bne.w	1a00387a <_malloc_r+0x222>
1a003b34:	44c3      	add	fp, r8
1a003b36:	68bc      	ldr	r4, [r7, #8]
1a003b38:	f04b 0101 	orr.w	r1, fp, #1
1a003b3c:	6061      	str	r1, [r4, #4]
1a003b3e:	e6e7      	b.n	1a003910 <_malloc_r+0x2b8>
1a003b40:	4614      	mov	r4, r2
1a003b42:	e6e5      	b.n	1a003910 <_malloc_r+0x2b8>
1a003b44:	2301      	movs	r3, #1
1a003b46:	6053      	str	r3, [r2, #4]
1a003b48:	e794      	b.n	1a003a74 <_malloc_r+0x41c>
1a003b4a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a003b4e:	d823      	bhi.n	1a003b98 <_malloc_r+0x540>
1a003b50:	0bda      	lsrs	r2, r3, #15
1a003b52:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a003b56:	00c9      	lsls	r1, r1, #3
1a003b58:	3277      	adds	r2, #119	; 0x77
1a003b5a:	e71b      	b.n	1a003994 <_malloc_r+0x33c>
1a003b5c:	f240 5254 	movw	r2, #1364	; 0x554
1a003b60:	4293      	cmp	r3, r2
1a003b62:	d823      	bhi.n	1a003bac <_malloc_r+0x554>
1a003b64:	0cab      	lsrs	r3, r5, #18
1a003b66:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a003b6a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a003b6e:	00c3      	lsls	r3, r0, #3
1a003b70:	e5b7      	b.n	1a0036e2 <_malloc_r+0x8a>
1a003b72:	f1aa 0a08 	sub.w	sl, sl, #8
1a003b76:	44d3      	add	fp, sl
1a003b78:	ebab 0b02 	sub.w	fp, fp, r2
1a003b7c:	f04f 0900 	mov.w	r9, #0
1a003b80:	e6a2      	b.n	1a0038c8 <_malloc_r+0x270>
1a003b82:	f104 0108 	add.w	r1, r4, #8
1a003b86:	4630      	mov	r0, r6
1a003b88:	9300      	str	r3, [sp, #0]
1a003b8a:	f7ff fc47 	bl	1a00341c <_free_r>
1a003b8e:	68bc      	ldr	r4, [r7, #8]
1a003b90:	9b00      	ldr	r3, [sp, #0]
1a003b92:	6861      	ldr	r1, [r4, #4]
1a003b94:	6818      	ldr	r0, [r3, #0]
1a003b96:	e6bb      	b.n	1a003910 <_malloc_r+0x2b8>
1a003b98:	f240 5154 	movw	r1, #1364	; 0x554
1a003b9c:	428a      	cmp	r2, r1
1a003b9e:	d80b      	bhi.n	1a003bb8 <_malloc_r+0x560>
1a003ba0:	0c9a      	lsrs	r2, r3, #18
1a003ba2:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a003ba6:	00c9      	lsls	r1, r1, #3
1a003ba8:	327c      	adds	r2, #124	; 0x7c
1a003baa:	e6f3      	b.n	1a003994 <_malloc_r+0x33c>
1a003bac:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a003bb0:	207f      	movs	r0, #127	; 0x7f
1a003bb2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a003bb6:	e594      	b.n	1a0036e2 <_malloc_r+0x8a>
1a003bb8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a003bbc:	227e      	movs	r2, #126	; 0x7e
1a003bbe:	e6e9      	b.n	1a003994 <_malloc_r+0x33c>
1a003bc0:	687b      	ldr	r3, [r7, #4]
1a003bc2:	e770      	b.n	1a003aa6 <_malloc_r+0x44e>
1a003bc4:	10000a20 	.word	0x10000a20

1a003bc8 <memcpy>:
1a003bc8:	4684      	mov	ip, r0
1a003bca:	ea41 0300 	orr.w	r3, r1, r0
1a003bce:	f013 0303 	ands.w	r3, r3, #3
1a003bd2:	d16d      	bne.n	1a003cb0 <memcpy+0xe8>
1a003bd4:	3a40      	subs	r2, #64	; 0x40
1a003bd6:	d341      	bcc.n	1a003c5c <memcpy+0x94>
1a003bd8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003bdc:	f840 3b04 	str.w	r3, [r0], #4
1a003be0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003be4:	f840 3b04 	str.w	r3, [r0], #4
1a003be8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003bec:	f840 3b04 	str.w	r3, [r0], #4
1a003bf0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003bf4:	f840 3b04 	str.w	r3, [r0], #4
1a003bf8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003bfc:	f840 3b04 	str.w	r3, [r0], #4
1a003c00:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c04:	f840 3b04 	str.w	r3, [r0], #4
1a003c08:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c0c:	f840 3b04 	str.w	r3, [r0], #4
1a003c10:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c14:	f840 3b04 	str.w	r3, [r0], #4
1a003c18:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c1c:	f840 3b04 	str.w	r3, [r0], #4
1a003c20:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c24:	f840 3b04 	str.w	r3, [r0], #4
1a003c28:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c2c:	f840 3b04 	str.w	r3, [r0], #4
1a003c30:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c34:	f840 3b04 	str.w	r3, [r0], #4
1a003c38:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c3c:	f840 3b04 	str.w	r3, [r0], #4
1a003c40:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c44:	f840 3b04 	str.w	r3, [r0], #4
1a003c48:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c4c:	f840 3b04 	str.w	r3, [r0], #4
1a003c50:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c54:	f840 3b04 	str.w	r3, [r0], #4
1a003c58:	3a40      	subs	r2, #64	; 0x40
1a003c5a:	d2bd      	bcs.n	1a003bd8 <memcpy+0x10>
1a003c5c:	3230      	adds	r2, #48	; 0x30
1a003c5e:	d311      	bcc.n	1a003c84 <memcpy+0xbc>
1a003c60:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c64:	f840 3b04 	str.w	r3, [r0], #4
1a003c68:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c6c:	f840 3b04 	str.w	r3, [r0], #4
1a003c70:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c74:	f840 3b04 	str.w	r3, [r0], #4
1a003c78:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c7c:	f840 3b04 	str.w	r3, [r0], #4
1a003c80:	3a10      	subs	r2, #16
1a003c82:	d2ed      	bcs.n	1a003c60 <memcpy+0x98>
1a003c84:	320c      	adds	r2, #12
1a003c86:	d305      	bcc.n	1a003c94 <memcpy+0xcc>
1a003c88:	f851 3b04 	ldr.w	r3, [r1], #4
1a003c8c:	f840 3b04 	str.w	r3, [r0], #4
1a003c90:	3a04      	subs	r2, #4
1a003c92:	d2f9      	bcs.n	1a003c88 <memcpy+0xc0>
1a003c94:	3204      	adds	r2, #4
1a003c96:	d008      	beq.n	1a003caa <memcpy+0xe2>
1a003c98:	07d2      	lsls	r2, r2, #31
1a003c9a:	bf1c      	itt	ne
1a003c9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003ca0:	f800 3b01 	strbne.w	r3, [r0], #1
1a003ca4:	d301      	bcc.n	1a003caa <memcpy+0xe2>
1a003ca6:	880b      	ldrh	r3, [r1, #0]
1a003ca8:	8003      	strh	r3, [r0, #0]
1a003caa:	4660      	mov	r0, ip
1a003cac:	4770      	bx	lr
1a003cae:	bf00      	nop
1a003cb0:	2a08      	cmp	r2, #8
1a003cb2:	d313      	bcc.n	1a003cdc <memcpy+0x114>
1a003cb4:	078b      	lsls	r3, r1, #30
1a003cb6:	d08d      	beq.n	1a003bd4 <memcpy+0xc>
1a003cb8:	f010 0303 	ands.w	r3, r0, #3
1a003cbc:	d08a      	beq.n	1a003bd4 <memcpy+0xc>
1a003cbe:	f1c3 0304 	rsb	r3, r3, #4
1a003cc2:	1ad2      	subs	r2, r2, r3
1a003cc4:	07db      	lsls	r3, r3, #31
1a003cc6:	bf1c      	itt	ne
1a003cc8:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003ccc:	f800 3b01 	strbne.w	r3, [r0], #1
1a003cd0:	d380      	bcc.n	1a003bd4 <memcpy+0xc>
1a003cd2:	f831 3b02 	ldrh.w	r3, [r1], #2
1a003cd6:	f820 3b02 	strh.w	r3, [r0], #2
1a003cda:	e77b      	b.n	1a003bd4 <memcpy+0xc>
1a003cdc:	3a04      	subs	r2, #4
1a003cde:	d3d9      	bcc.n	1a003c94 <memcpy+0xcc>
1a003ce0:	3a01      	subs	r2, #1
1a003ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003ce6:	f800 3b01 	strb.w	r3, [r0], #1
1a003cea:	d2f9      	bcs.n	1a003ce0 <memcpy+0x118>
1a003cec:	780b      	ldrb	r3, [r1, #0]
1a003cee:	7003      	strb	r3, [r0, #0]
1a003cf0:	784b      	ldrb	r3, [r1, #1]
1a003cf2:	7043      	strb	r3, [r0, #1]
1a003cf4:	788b      	ldrb	r3, [r1, #2]
1a003cf6:	7083      	strb	r3, [r0, #2]
1a003cf8:	4660      	mov	r0, ip
1a003cfa:	4770      	bx	lr

1a003cfc <memset>:
1a003cfc:	b4f0      	push	{r4, r5, r6, r7}
1a003cfe:	0786      	lsls	r6, r0, #30
1a003d00:	d046      	beq.n	1a003d90 <memset+0x94>
1a003d02:	1e54      	subs	r4, r2, #1
1a003d04:	2a00      	cmp	r2, #0
1a003d06:	d03c      	beq.n	1a003d82 <memset+0x86>
1a003d08:	b2ca      	uxtb	r2, r1
1a003d0a:	4603      	mov	r3, r0
1a003d0c:	e002      	b.n	1a003d14 <memset+0x18>
1a003d0e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a003d12:	d336      	bcc.n	1a003d82 <memset+0x86>
1a003d14:	f803 2b01 	strb.w	r2, [r3], #1
1a003d18:	079d      	lsls	r5, r3, #30
1a003d1a:	d1f8      	bne.n	1a003d0e <memset+0x12>
1a003d1c:	2c03      	cmp	r4, #3
1a003d1e:	d929      	bls.n	1a003d74 <memset+0x78>
1a003d20:	b2cd      	uxtb	r5, r1
1a003d22:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003d26:	2c0f      	cmp	r4, #15
1a003d28:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003d2c:	d933      	bls.n	1a003d96 <memset+0x9a>
1a003d2e:	f1a4 0610 	sub.w	r6, r4, #16
1a003d32:	0936      	lsrs	r6, r6, #4
1a003d34:	f103 0720 	add.w	r7, r3, #32
1a003d38:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a003d3c:	f103 0210 	add.w	r2, r3, #16
1a003d40:	e942 5504 	strd	r5, r5, [r2, #-16]
1a003d44:	e942 5502 	strd	r5, r5, [r2, #-8]
1a003d48:	3210      	adds	r2, #16
1a003d4a:	42ba      	cmp	r2, r7
1a003d4c:	d1f8      	bne.n	1a003d40 <memset+0x44>
1a003d4e:	1c72      	adds	r2, r6, #1
1a003d50:	f014 0f0c 	tst.w	r4, #12
1a003d54:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a003d58:	f004 060f 	and.w	r6, r4, #15
1a003d5c:	d013      	beq.n	1a003d86 <memset+0x8a>
1a003d5e:	1f33      	subs	r3, r6, #4
1a003d60:	f023 0303 	bic.w	r3, r3, #3
1a003d64:	3304      	adds	r3, #4
1a003d66:	4413      	add	r3, r2
1a003d68:	f842 5b04 	str.w	r5, [r2], #4
1a003d6c:	4293      	cmp	r3, r2
1a003d6e:	d1fb      	bne.n	1a003d68 <memset+0x6c>
1a003d70:	f006 0403 	and.w	r4, r6, #3
1a003d74:	b12c      	cbz	r4, 1a003d82 <memset+0x86>
1a003d76:	b2c9      	uxtb	r1, r1
1a003d78:	441c      	add	r4, r3
1a003d7a:	f803 1b01 	strb.w	r1, [r3], #1
1a003d7e:	429c      	cmp	r4, r3
1a003d80:	d1fb      	bne.n	1a003d7a <memset+0x7e>
1a003d82:	bcf0      	pop	{r4, r5, r6, r7}
1a003d84:	4770      	bx	lr
1a003d86:	4634      	mov	r4, r6
1a003d88:	4613      	mov	r3, r2
1a003d8a:	2c00      	cmp	r4, #0
1a003d8c:	d1f3      	bne.n	1a003d76 <memset+0x7a>
1a003d8e:	e7f8      	b.n	1a003d82 <memset+0x86>
1a003d90:	4614      	mov	r4, r2
1a003d92:	4603      	mov	r3, r0
1a003d94:	e7c2      	b.n	1a003d1c <memset+0x20>
1a003d96:	461a      	mov	r2, r3
1a003d98:	4626      	mov	r6, r4
1a003d9a:	e7e0      	b.n	1a003d5e <memset+0x62>

1a003d9c <__malloc_lock>:
1a003d9c:	4801      	ldr	r0, [pc, #4]	; (1a003da4 <__malloc_lock+0x8>)
1a003d9e:	f7ff bc57 	b.w	1a003650 <__retarget_lock_acquire_recursive>
1a003da2:	bf00      	nop
1a003da4:	10000b68 	.word	0x10000b68

1a003da8 <__malloc_unlock>:
1a003da8:	4801      	ldr	r0, [pc, #4]	; (1a003db0 <__malloc_unlock+0x8>)
1a003daa:	f7ff bc53 	b.w	1a003654 <__retarget_lock_release_recursive>
1a003dae:	bf00      	nop
1a003db0:	10000b68 	.word	0x10000b68

1a003db4 <sprintf>:
1a003db4:	b40e      	push	{r1, r2, r3}
1a003db6:	b530      	push	{r4, r5, lr}
1a003db8:	b09c      	sub	sp, #112	; 0x70
1a003dba:	ab1f      	add	r3, sp, #124	; 0x7c
1a003dbc:	4c0c      	ldr	r4, [pc, #48]	; (1a003df0 <sprintf+0x3c>)
1a003dbe:	4d0d      	ldr	r5, [pc, #52]	; (1a003df4 <sprintf+0x40>)
1a003dc0:	f853 2b04 	ldr.w	r2, [r3], #4
1a003dc4:	9301      	str	r3, [sp, #4]
1a003dc6:	4601      	mov	r1, r0
1a003dc8:	9102      	str	r1, [sp, #8]
1a003dca:	9106      	str	r1, [sp, #24]
1a003dcc:	6820      	ldr	r0, [r4, #0]
1a003dce:	a902      	add	r1, sp, #8
1a003dd0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
1a003dd4:	9407      	str	r4, [sp, #28]
1a003dd6:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a003dda:	f000 f881 	bl	1a003ee0 <_svfprintf_r>
1a003dde:	9b02      	ldr	r3, [sp, #8]
1a003de0:	2200      	movs	r2, #0
1a003de2:	701a      	strb	r2, [r3, #0]
1a003de4:	b01c      	add	sp, #112	; 0x70
1a003de6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a003dea:	b003      	add	sp, #12
1a003dec:	4770      	bx	lr
1a003dee:	bf00      	nop
1a003df0:	10000048 	.word	0x10000048
1a003df4:	ffff0208 	.word	0xffff0208
1a003df8:	ffffffff 	.word	0xffffffff
1a003dfc:	ffffffff 	.word	0xffffffff

1a003e00 <strlen>:
1a003e00:	f890 f000 	pld	[r0]
1a003e04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a003e08:	f020 0107 	bic.w	r1, r0, #7
1a003e0c:	f06f 0c00 	mvn.w	ip, #0
1a003e10:	f010 0407 	ands.w	r4, r0, #7
1a003e14:	f891 f020 	pld	[r1, #32]
1a003e18:	f040 8049 	bne.w	1a003eae <strlen+0xae>
1a003e1c:	f04f 0400 	mov.w	r4, #0
1a003e20:	f06f 0007 	mvn.w	r0, #7
1a003e24:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003e28:	f891 f040 	pld	[r1, #64]	; 0x40
1a003e2c:	f100 0008 	add.w	r0, r0, #8
1a003e30:	fa82 f24c 	uadd8	r2, r2, ip
1a003e34:	faa4 f28c 	sel	r2, r4, ip
1a003e38:	fa83 f34c 	uadd8	r3, r3, ip
1a003e3c:	faa2 f38c 	sel	r3, r2, ip
1a003e40:	bb4b      	cbnz	r3, 1a003e96 <strlen+0x96>
1a003e42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a003e46:	fa82 f24c 	uadd8	r2, r2, ip
1a003e4a:	f100 0008 	add.w	r0, r0, #8
1a003e4e:	faa4 f28c 	sel	r2, r4, ip
1a003e52:	fa83 f34c 	uadd8	r3, r3, ip
1a003e56:	faa2 f38c 	sel	r3, r2, ip
1a003e5a:	b9e3      	cbnz	r3, 1a003e96 <strlen+0x96>
1a003e5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a003e60:	fa82 f24c 	uadd8	r2, r2, ip
1a003e64:	f100 0008 	add.w	r0, r0, #8
1a003e68:	faa4 f28c 	sel	r2, r4, ip
1a003e6c:	fa83 f34c 	uadd8	r3, r3, ip
1a003e70:	faa2 f38c 	sel	r3, r2, ip
1a003e74:	b97b      	cbnz	r3, 1a003e96 <strlen+0x96>
1a003e76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a003e7a:	f101 0120 	add.w	r1, r1, #32
1a003e7e:	fa82 f24c 	uadd8	r2, r2, ip
1a003e82:	f100 0008 	add.w	r0, r0, #8
1a003e86:	faa4 f28c 	sel	r2, r4, ip
1a003e8a:	fa83 f34c 	uadd8	r3, r3, ip
1a003e8e:	faa2 f38c 	sel	r3, r2, ip
1a003e92:	2b00      	cmp	r3, #0
1a003e94:	d0c6      	beq.n	1a003e24 <strlen+0x24>
1a003e96:	2a00      	cmp	r2, #0
1a003e98:	bf04      	itt	eq
1a003e9a:	3004      	addeq	r0, #4
1a003e9c:	461a      	moveq	r2, r3
1a003e9e:	ba12      	rev	r2, r2
1a003ea0:	fab2 f282 	clz	r2, r2
1a003ea4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a003ea8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a003eac:	4770      	bx	lr
1a003eae:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003eb2:	f004 0503 	and.w	r5, r4, #3
1a003eb6:	f1c4 0000 	rsb	r0, r4, #0
1a003eba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a003ebe:	f014 0f04 	tst.w	r4, #4
1a003ec2:	f891 f040 	pld	[r1, #64]	; 0x40
1a003ec6:	fa0c f505 	lsl.w	r5, ip, r5
1a003eca:	ea62 0205 	orn	r2, r2, r5
1a003ece:	bf1c      	itt	ne
1a003ed0:	ea63 0305 	ornne	r3, r3, r5
1a003ed4:	4662      	movne	r2, ip
1a003ed6:	f04f 0400 	mov.w	r4, #0
1a003eda:	e7a9      	b.n	1a003e30 <strlen+0x30>
1a003edc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a003ee0 <_svfprintf_r>:
1a003ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003ee4:	b0d5      	sub	sp, #340	; 0x154
1a003ee6:	460c      	mov	r4, r1
1a003ee8:	9107      	str	r1, [sp, #28]
1a003eea:	4693      	mov	fp, r2
1a003eec:	9309      	str	r3, [sp, #36]	; 0x24
1a003eee:	9006      	str	r0, [sp, #24]
1a003ef0:	f002 fcd0 	bl	1a006894 <_localeconv_r>
1a003ef4:	6803      	ldr	r3, [r0, #0]
1a003ef6:	9315      	str	r3, [sp, #84]	; 0x54
1a003ef8:	4618      	mov	r0, r3
1a003efa:	f7ff ff81 	bl	1a003e00 <strlen>
1a003efe:	89a3      	ldrh	r3, [r4, #12]
1a003f00:	9013      	str	r0, [sp, #76]	; 0x4c
1a003f02:	061d      	lsls	r5, r3, #24
1a003f04:	d503      	bpl.n	1a003f0e <_svfprintf_r+0x2e>
1a003f06:	6923      	ldr	r3, [r4, #16]
1a003f08:	2b00      	cmp	r3, #0
1a003f0a:	f001 8018 	beq.w	1a004f3e <_svfprintf_r+0x105e>
1a003f0e:	2300      	movs	r3, #0
1a003f10:	465e      	mov	r6, fp
1a003f12:	ed9f 7b91 	vldr	d7, [pc, #580]	; 1a004158 <_svfprintf_r+0x278>
1a003f16:	9312      	str	r3, [sp, #72]	; 0x48
1a003f18:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a003f1c:	9314      	str	r3, [sp, #80]	; 0x50
1a003f1e:	9316      	str	r3, [sp, #88]	; 0x58
1a003f20:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a003f24:	9317      	str	r3, [sp, #92]	; 0x5c
1a003f26:	9304      	str	r3, [sp, #16]
1a003f28:	ab2b      	add	r3, sp, #172	; 0xac
1a003f2a:	9328      	str	r3, [sp, #160]	; 0xa0
1a003f2c:	4699      	mov	r9, r3
1a003f2e:	7833      	ldrb	r3, [r6, #0]
1a003f30:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a003f34:	2b00      	cmp	r3, #0
1a003f36:	f000 8177 	beq.w	1a004228 <_svfprintf_r+0x348>
1a003f3a:	2b25      	cmp	r3, #37	; 0x25
1a003f3c:	f000 86c4 	beq.w	1a004cc8 <_svfprintf_r+0xde8>
1a003f40:	4635      	mov	r5, r6
1a003f42:	e003      	b.n	1a003f4c <_svfprintf_r+0x6c>
1a003f44:	2b25      	cmp	r3, #37	; 0x25
1a003f46:	f000 8096 	beq.w	1a004076 <_svfprintf_r+0x196>
1a003f4a:	4625      	mov	r5, r4
1a003f4c:	786b      	ldrb	r3, [r5, #1]
1a003f4e:	1c6c      	adds	r4, r5, #1
1a003f50:	2b00      	cmp	r3, #0
1a003f52:	d1f7      	bne.n	1a003f44 <_svfprintf_r+0x64>
1a003f54:	1ba7      	subs	r7, r4, r6
1a003f56:	f000 8167 	beq.w	1a004228 <_svfprintf_r+0x348>
1a003f5a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a003f5e:	3301      	adds	r3, #1
1a003f60:	443a      	add	r2, r7
1a003f62:	2b07      	cmp	r3, #7
1a003f64:	f8c9 6000 	str.w	r6, [r9]
1a003f68:	f8c9 7004 	str.w	r7, [r9, #4]
1a003f6c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a003f70:	f300 8084 	bgt.w	1a00407c <_svfprintf_r+0x19c>
1a003f74:	f109 0908 	add.w	r9, r9, #8
1a003f78:	9a04      	ldr	r2, [sp, #16]
1a003f7a:	786b      	ldrb	r3, [r5, #1]
1a003f7c:	443a      	add	r2, r7
1a003f7e:	9204      	str	r2, [sp, #16]
1a003f80:	2b00      	cmp	r3, #0
1a003f82:	f000 8151 	beq.w	1a004228 <_svfprintf_r+0x348>
1a003f86:	2300      	movs	r3, #0
1a003f88:	f894 8001 	ldrb.w	r8, [r4, #1]
1a003f8c:	9305      	str	r3, [sp, #20]
1a003f8e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a003f92:	9302      	str	r3, [sp, #8]
1a003f94:	f104 0b01 	add.w	fp, r4, #1
1a003f98:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
1a003f9c:	272b      	movs	r7, #43	; 0x2b
1a003f9e:	2120      	movs	r1, #32
1a003fa0:	f10b 0b01 	add.w	fp, fp, #1
1a003fa4:	f1a8 0320 	sub.w	r3, r8, #32
1a003fa8:	2b5a      	cmp	r3, #90	; 0x5a
1a003faa:	f200 836c 	bhi.w	1a004686 <_svfprintf_r+0x7a6>
1a003fae:	e8df f013 	tbh	[pc, r3, lsl #1]
1a003fb2:	034b      	.short	0x034b
1a003fb4:	036a036a 	.word	0x036a036a
1a003fb8:	036a0344 	.word	0x036a0344
1a003fbc:	036a036a 	.word	0x036a036a
1a003fc0:	036a0321 	.word	0x036a0321
1a003fc4:	0215036a 	.word	0x0215036a
1a003fc8:	036a0210 	.word	0x036a0210
1a003fcc:	01f600cb 	.word	0x01f600cb
1a003fd0:	01ef036a 	.word	0x01ef036a
1a003fd4:	00a800a8 	.word	0x00a800a8
1a003fd8:	00a800a8 	.word	0x00a800a8
1a003fdc:	00a800a8 	.word	0x00a800a8
1a003fe0:	00a800a8 	.word	0x00a800a8
1a003fe4:	036a00a8 	.word	0x036a00a8
1a003fe8:	036a036a 	.word	0x036a036a
1a003fec:	036a036a 	.word	0x036a036a
1a003ff0:	036a036a 	.word	0x036a036a
1a003ff4:	036a02df 	.word	0x036a02df
1a003ff8:	01960223 	.word	0x01960223
1a003ffc:	02df02df 	.word	0x02df02df
1a004000:	036a02df 	.word	0x036a02df
1a004004:	036a036a 	.word	0x036a036a
1a004008:	018f036a 	.word	0x018f036a
1a00400c:	036a036a 	.word	0x036a036a
1a004010:	036a017e 	.word	0x036a017e
1a004014:	036a036a 	.word	0x036a036a
1a004018:	036a0152 	.word	0x036a0152
1a00401c:	036a01ca 	.word	0x036a01ca
1a004020:	00b7036a 	.word	0x00b7036a
1a004024:	036a036a 	.word	0x036a036a
1a004028:	036a036a 	.word	0x036a036a
1a00402c:	036a036a 	.word	0x036a036a
1a004030:	036a036a 	.word	0x036a036a
1a004034:	036a02df 	.word	0x036a02df
1a004038:	01d90223 	.word	0x01d90223
1a00403c:	02df02df 	.word	0x02df02df
1a004040:	01bf02df 	.word	0x01bf02df
1a004044:	005b01d9 	.word	0x005b01d9
1a004048:	0147036a 	.word	0x0147036a
1a00404c:	011e036a 	.word	0x011e036a
1a004050:	00db010c 	.word	0x00db010c
1a004054:	036a005b 	.word	0x036a005b
1a004058:	005f0152 	.word	0x005f0152
1a00405c:	036a0355 	.word	0x036a0355
1a004060:	0089036a 	.word	0x0089036a
1a004064:	005f036a 	.word	0x005f036a
1a004068:	9b02      	ldr	r3, [sp, #8]
1a00406a:	f043 0320 	orr.w	r3, r3, #32
1a00406e:	9302      	str	r3, [sp, #8]
1a004070:	f89b 8000 	ldrb.w	r8, [fp]
1a004074:	e794      	b.n	1a003fa0 <_svfprintf_r+0xc0>
1a004076:	1ba7      	subs	r7, r4, r6
1a004078:	d085      	beq.n	1a003f86 <_svfprintf_r+0xa6>
1a00407a:	e76e      	b.n	1a003f5a <_svfprintf_r+0x7a>
1a00407c:	aa28      	add	r2, sp, #160	; 0xa0
1a00407e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004082:	f003 f9f5 	bl	1a007470 <__ssprint_r>
1a004086:	b980      	cbnz	r0, 1a0040aa <_svfprintf_r+0x1ca>
1a004088:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00408c:	e774      	b.n	1a003f78 <_svfprintf_r+0x98>
1a00408e:	aa28      	add	r2, sp, #160	; 0xa0
1a004090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004094:	f003 f9ec 	bl	1a007470 <__ssprint_r>
1a004098:	2800      	cmp	r0, #0
1a00409a:	f000 8221 	beq.w	1a0044e0 <_svfprintf_r+0x600>
1a00409e:	9b08      	ldr	r3, [sp, #32]
1a0040a0:	b11b      	cbz	r3, 1a0040aa <_svfprintf_r+0x1ca>
1a0040a2:	9908      	ldr	r1, [sp, #32]
1a0040a4:	9806      	ldr	r0, [sp, #24]
1a0040a6:	f7ff f9b9 	bl	1a00341c <_free_r>
1a0040aa:	9b07      	ldr	r3, [sp, #28]
1a0040ac:	899b      	ldrh	r3, [r3, #12]
1a0040ae:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0040b2:	9b04      	ldr	r3, [sp, #16]
1a0040b4:	bf18      	it	ne
1a0040b6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
1a0040ba:	9304      	str	r3, [sp, #16]
1a0040bc:	9804      	ldr	r0, [sp, #16]
1a0040be:	b055      	add	sp, #340	; 0x154
1a0040c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0040c4:	4b26      	ldr	r3, [pc, #152]	; (1a004160 <_svfprintf_r+0x280>)
1a0040c6:	9314      	str	r3, [sp, #80]	; 0x50
1a0040c8:	9b02      	ldr	r3, [sp, #8]
1a0040ca:	0699      	lsls	r1, r3, #26
1a0040cc:	d52d      	bpl.n	1a00412a <_svfprintf_r+0x24a>
1a0040ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0040d0:	3407      	adds	r4, #7
1a0040d2:	f024 0307 	bic.w	r3, r4, #7
1a0040d6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0040da:	9309      	str	r3, [sp, #36]	; 0x24
1a0040dc:	9a02      	ldr	r2, [sp, #8]
1a0040de:	07d6      	lsls	r6, r2, #31
1a0040e0:	d50a      	bpl.n	1a0040f8 <_svfprintf_r+0x218>
1a0040e2:	ea54 0305 	orrs.w	r3, r4, r5
1a0040e6:	d007      	beq.n	1a0040f8 <_svfprintf_r+0x218>
1a0040e8:	2330      	movs	r3, #48	; 0x30
1a0040ea:	f042 0202 	orr.w	r2, r2, #2
1a0040ee:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a0040f2:	9202      	str	r2, [sp, #8]
1a0040f4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0040f8:	9b02      	ldr	r3, [sp, #8]
1a0040fa:	f423 6780 	bic.w	r7, r3, #1024	; 0x400
1a0040fe:	2302      	movs	r3, #2
1a004100:	e044      	b.n	1a00418c <_svfprintf_r+0x2ac>
1a004102:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a004106:	2200      	movs	r2, #0
1a004108:	f81b 8b01 	ldrb.w	r8, [fp], #1
1a00410c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a004110:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a004114:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a004118:	2b09      	cmp	r3, #9
1a00411a:	d9f5      	bls.n	1a004108 <_svfprintf_r+0x228>
1a00411c:	9205      	str	r2, [sp, #20]
1a00411e:	e741      	b.n	1a003fa4 <_svfprintf_r+0xc4>
1a004120:	4b10      	ldr	r3, [pc, #64]	; (1a004164 <_svfprintf_r+0x284>)
1a004122:	9314      	str	r3, [sp, #80]	; 0x50
1a004124:	9b02      	ldr	r3, [sp, #8]
1a004126:	0699      	lsls	r1, r3, #26
1a004128:	d4d1      	bmi.n	1a0040ce <_svfprintf_r+0x1ee>
1a00412a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00412c:	f853 4b04 	ldr.w	r4, [r3], #4
1a004130:	9309      	str	r3, [sp, #36]	; 0x24
1a004132:	9b02      	ldr	r3, [sp, #8]
1a004134:	06da      	lsls	r2, r3, #27
1a004136:	f100 85ef 	bmi.w	1a004d18 <_svfprintf_r+0xe38>
1a00413a:	9b02      	ldr	r3, [sp, #8]
1a00413c:	065b      	lsls	r3, r3, #25
1a00413e:	f140 85e7 	bpl.w	1a004d10 <_svfprintf_r+0xe30>
1a004142:	b2a4      	uxth	r4, r4
1a004144:	2500      	movs	r5, #0
1a004146:	e7c9      	b.n	1a0040dc <_svfprintf_r+0x1fc>
1a004148:	f89b 8000 	ldrb.w	r8, [fp]
1a00414c:	9b02      	ldr	r3, [sp, #8]
1a00414e:	f043 0304 	orr.w	r3, r3, #4
1a004152:	9302      	str	r3, [sp, #8]
1a004154:	e724      	b.n	1a003fa0 <_svfprintf_r+0xc0>
1a004156:	bf00      	nop
	...
1a004160:	1a007b70 	.word	0x1a007b70
1a004164:	1a007a48 	.word	0x1a007a48
1a004168:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a00416a:	f647 0230 	movw	r2, #30768	; 0x7830
1a00416e:	f854 3b04 	ldr.w	r3, [r4], #4
1a004172:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a004176:	9a02      	ldr	r2, [sp, #8]
1a004178:	9409      	str	r4, [sp, #36]	; 0x24
1a00417a:	461c      	mov	r4, r3
1a00417c:	4b9d      	ldr	r3, [pc, #628]	; (1a0043f4 <_svfprintf_r+0x514>)
1a00417e:	9314      	str	r3, [sp, #80]	; 0x50
1a004180:	f042 0702 	orr.w	r7, r2, #2
1a004184:	2500      	movs	r5, #0
1a004186:	2302      	movs	r3, #2
1a004188:	f04f 0878 	mov.w	r8, #120	; 0x78
1a00418c:	2200      	movs	r2, #0
1a00418e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a004192:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a004196:	f000 829b 	beq.w	1a0046d0 <_svfprintf_r+0x7f0>
1a00419a:	f027 0280 	bic.w	r2, r7, #128	; 0x80
1a00419e:	9202      	str	r2, [sp, #8]
1a0041a0:	ea54 0205 	orrs.w	r2, r4, r5
1a0041a4:	f040 8293 	bne.w	1a0046ce <_svfprintf_r+0x7ee>
1a0041a8:	f1ba 0f00 	cmp.w	sl, #0
1a0041ac:	f040 8490 	bne.w	1a004ad0 <_svfprintf_r+0xbf0>
1a0041b0:	2b00      	cmp	r3, #0
1a0041b2:	f040 80b8 	bne.w	1a004326 <_svfprintf_r+0x446>
1a0041b6:	f017 0701 	ands.w	r7, r7, #1
1a0041ba:	f000 85a7 	beq.w	1a004d0c <_svfprintf_r+0xe2c>
1a0041be:	2330      	movs	r3, #48	; 0x30
1a0041c0:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a0041c4:	f20d 164f 	addw	r6, sp, #335	; 0x14f
1a0041c8:	e274      	b.n	1a0046b4 <_svfprintf_r+0x7d4>
1a0041ca:	9f02      	ldr	r7, [sp, #8]
1a0041cc:	06be      	lsls	r6, r7, #26
1a0041ce:	d474      	bmi.n	1a0042ba <_svfprintf_r+0x3da>
1a0041d0:	9b02      	ldr	r3, [sp, #8]
1a0041d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0041d4:	06dd      	lsls	r5, r3, #27
1a0041d6:	f852 4b04 	ldr.w	r4, [r2], #4
1a0041da:	f101 8399 	bmi.w	1a005910 <_svfprintf_r+0x1a30>
1a0041de:	9f02      	ldr	r7, [sp, #8]
1a0041e0:	0678      	lsls	r0, r7, #25
1a0041e2:	f141 8070 	bpl.w	1a0052c6 <_svfprintf_r+0x13e6>
1a0041e6:	9209      	str	r2, [sp, #36]	; 0x24
1a0041e8:	b2a4      	uxth	r4, r4
1a0041ea:	2500      	movs	r5, #0
1a0041ec:	e06c      	b.n	1a0042c8 <_svfprintf_r+0x3e8>
1a0041ee:	9902      	ldr	r1, [sp, #8]
1a0041f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0041f2:	068c      	lsls	r4, r1, #26
1a0041f4:	f102 0304 	add.w	r3, r2, #4
1a0041f8:	f100 8591 	bmi.w	1a004d1e <_svfprintf_r+0xe3e>
1a0041fc:	9a02      	ldr	r2, [sp, #8]
1a0041fe:	06d0      	lsls	r0, r2, #27
1a004200:	f100 87ee 	bmi.w	1a0051e0 <_svfprintf_r+0x1300>
1a004204:	9a02      	ldr	r2, [sp, #8]
1a004206:	0651      	lsls	r1, r2, #25
1a004208:	f101 80a6 	bmi.w	1a005358 <_svfprintf_r+0x1478>
1a00420c:	9a02      	ldr	r2, [sp, #8]
1a00420e:	0592      	lsls	r2, r2, #22
1a004210:	f140 87e6 	bpl.w	1a0051e0 <_svfprintf_r+0x1300>
1a004214:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a004216:	9309      	str	r3, [sp, #36]	; 0x24
1a004218:	6812      	ldr	r2, [r2, #0]
1a00421a:	9b04      	ldr	r3, [sp, #16]
1a00421c:	7013      	strb	r3, [r2, #0]
1a00421e:	465e      	mov	r6, fp
1a004220:	7833      	ldrb	r3, [r6, #0]
1a004222:	2b00      	cmp	r3, #0
1a004224:	f47f ae89 	bne.w	1a003f3a <_svfprintf_r+0x5a>
1a004228:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a00422a:	2b00      	cmp	r3, #0
1a00422c:	f43f af3d 	beq.w	1a0040aa <_svfprintf_r+0x1ca>
1a004230:	9c07      	ldr	r4, [sp, #28]
1a004232:	9806      	ldr	r0, [sp, #24]
1a004234:	aa28      	add	r2, sp, #160	; 0xa0
1a004236:	4621      	mov	r1, r4
1a004238:	f003 f91a 	bl	1a007470 <__ssprint_r>
1a00423c:	89a3      	ldrh	r3, [r4, #12]
1a00423e:	e736      	b.n	1a0040ae <_svfprintf_r+0x1ce>
1a004240:	f89b 8000 	ldrb.w	r8, [fp]
1a004244:	9b02      	ldr	r3, [sp, #8]
1a004246:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a00424a:	f000 8663 	beq.w	1a004f14 <_svfprintf_r+0x1034>
1a00424e:	f043 0310 	orr.w	r3, r3, #16
1a004252:	9302      	str	r3, [sp, #8]
1a004254:	e6a4      	b.n	1a003fa0 <_svfprintf_r+0xc0>
1a004256:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a004258:	f854 6b04 	ldr.w	r6, [r4], #4
1a00425c:	2500      	movs	r5, #0
1a00425e:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a004262:	2e00      	cmp	r6, #0
1a004264:	f000 867a 	beq.w	1a004f5c <_svfprintf_r+0x107c>
1a004268:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a00426c:	f000 87f9 	beq.w	1a005262 <_svfprintf_r+0x1382>
1a004270:	4652      	mov	r2, sl
1a004272:	4629      	mov	r1, r5
1a004274:	4630      	mov	r0, r6
1a004276:	f002 fb13 	bl	1a0068a0 <memchr>
1a00427a:	9008      	str	r0, [sp, #32]
1a00427c:	2800      	cmp	r0, #0
1a00427e:	f001 8150 	beq.w	1a005522 <_svfprintf_r+0x1642>
1a004282:	9b08      	ldr	r3, [sp, #32]
1a004284:	46aa      	mov	sl, r5
1a004286:	1b9f      	subs	r7, r3, r6
1a004288:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
1a00428c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004290:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004294:	9409      	str	r4, [sp, #36]	; 0x24
1a004296:	9303      	str	r3, [sp, #12]
1a004298:	f8cd a020 	str.w	sl, [sp, #32]
1a00429c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
1a0042a0:	2a00      	cmp	r2, #0
1a0042a2:	f000 80bb 	beq.w	1a00441c <_svfprintf_r+0x53c>
1a0042a6:	9b03      	ldr	r3, [sp, #12]
1a0042a8:	3301      	adds	r3, #1
1a0042aa:	9303      	str	r3, [sp, #12]
1a0042ac:	e0b6      	b.n	1a00441c <_svfprintf_r+0x53c>
1a0042ae:	9b02      	ldr	r3, [sp, #8]
1a0042b0:	f043 0710 	orr.w	r7, r3, #16
1a0042b4:	069b      	lsls	r3, r3, #26
1a0042b6:	f140 8617 	bpl.w	1a004ee8 <_svfprintf_r+0x1008>
1a0042ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0042bc:	3407      	adds	r4, #7
1a0042be:	f024 0307 	bic.w	r3, r4, #7
1a0042c2:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0042c6:	9309      	str	r3, [sp, #36]	; 0x24
1a0042c8:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
1a0042cc:	2300      	movs	r3, #0
1a0042ce:	e75d      	b.n	1a00418c <_svfprintf_r+0x2ac>
1a0042d0:	9b02      	ldr	r3, [sp, #8]
1a0042d2:	f89b 8000 	ldrb.w	r8, [fp]
1a0042d6:	f043 0308 	orr.w	r3, r3, #8
1a0042da:	9302      	str	r3, [sp, #8]
1a0042dc:	e660      	b.n	1a003fa0 <_svfprintf_r+0xc0>
1a0042de:	9b02      	ldr	r3, [sp, #8]
1a0042e0:	069c      	lsls	r4, r3, #26
1a0042e2:	f043 0710 	orr.w	r7, r3, #16
1a0042e6:	f140 85f1 	bpl.w	1a004ecc <_svfprintf_r+0xfec>
1a0042ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0042ec:	3407      	adds	r4, #7
1a0042ee:	f024 0307 	bic.w	r3, r4, #7
1a0042f2:	4619      	mov	r1, r3
1a0042f4:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a0042f8:	9109      	str	r1, [sp, #36]	; 0x24
1a0042fa:	4614      	mov	r4, r2
1a0042fc:	461d      	mov	r5, r3
1a0042fe:	2a00      	cmp	r2, #0
1a004300:	f173 0300 	sbcs.w	r3, r3, #0
1a004304:	f2c0 84d7 	blt.w	1a004cb6 <_svfprintf_r+0xdd6>
1a004308:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a00430c:	f000 81c7 	beq.w	1a00469e <_svfprintf_r+0x7be>
1a004310:	f027 0380 	bic.w	r3, r7, #128	; 0x80
1a004314:	9302      	str	r3, [sp, #8]
1a004316:	ea54 0305 	orrs.w	r3, r4, r5
1a00431a:	f040 81bf 	bne.w	1a00469c <_svfprintf_r+0x7bc>
1a00431e:	f1ba 0f00 	cmp.w	sl, #0
1a004322:	f041 803f 	bne.w	1a0053a4 <_svfprintf_r+0x14c4>
1a004326:	f04f 0a00 	mov.w	sl, #0
1a00432a:	4657      	mov	r7, sl
1a00432c:	ae54      	add	r6, sp, #336	; 0x150
1a00432e:	e1c1      	b.n	1a0046b4 <_svfprintf_r+0x7d4>
1a004330:	f89b 8000 	ldrb.w	r8, [fp]
1a004334:	9b02      	ldr	r3, [sp, #8]
1a004336:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a00433a:	f000 85e2 	beq.w	1a004f02 <_svfprintf_r+0x1022>
1a00433e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004342:	9302      	str	r3, [sp, #8]
1a004344:	e62c      	b.n	1a003fa0 <_svfprintf_r+0xc0>
1a004346:	9b02      	ldr	r3, [sp, #8]
1a004348:	069a      	lsls	r2, r3, #26
1a00434a:	f043 0710 	orr.w	r7, r3, #16
1a00434e:	f140 84f1 	bpl.w	1a004d34 <_svfprintf_r+0xe54>
1a004352:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a004354:	3407      	adds	r4, #7
1a004356:	f024 0307 	bic.w	r3, r4, #7
1a00435a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00435e:	9309      	str	r3, [sp, #36]	; 0x24
1a004360:	2301      	movs	r3, #1
1a004362:	e713      	b.n	1a00418c <_svfprintf_r+0x2ac>
1a004364:	9f02      	ldr	r7, [sp, #8]
1a004366:	06b8      	lsls	r0, r7, #26
1a004368:	d4bf      	bmi.n	1a0042ea <_svfprintf_r+0x40a>
1a00436a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00436c:	1d1a      	adds	r2, r3, #4
1a00436e:	9b02      	ldr	r3, [sp, #8]
1a004370:	06d9      	lsls	r1, r3, #27
1a004372:	f101 82d0 	bmi.w	1a005916 <_svfprintf_r+0x1a36>
1a004376:	9f02      	ldr	r7, [sp, #8]
1a004378:	463b      	mov	r3, r7
1a00437a:	065b      	lsls	r3, r3, #25
1a00437c:	f140 8796 	bpl.w	1a0052ac <_svfprintf_r+0x13cc>
1a004380:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004382:	9209      	str	r2, [sp, #36]	; 0x24
1a004384:	f9b3 4000 	ldrsh.w	r4, [r3]
1a004388:	17e5      	asrs	r5, r4, #31
1a00438a:	4622      	mov	r2, r4
1a00438c:	462b      	mov	r3, r5
1a00438e:	e7b6      	b.n	1a0042fe <_svfprintf_r+0x41e>
1a004390:	9b02      	ldr	r3, [sp, #8]
1a004392:	f89b 8000 	ldrb.w	r8, [fp]
1a004396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00439a:	9302      	str	r3, [sp, #8]
1a00439c:	e600      	b.n	1a003fa0 <_svfprintf_r+0xc0>
1a00439e:	465a      	mov	r2, fp
1a0043a0:	f812 8b01 	ldrb.w	r8, [r2], #1
1a0043a4:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a0043a8:	f001 828e 	beq.w	1a0058c8 <_svfprintf_r+0x19e8>
1a0043ac:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0043b0:	2b09      	cmp	r3, #9
1a0043b2:	4693      	mov	fp, r2
1a0043b4:	f04f 0a00 	mov.w	sl, #0
1a0043b8:	f63f adf4 	bhi.w	1a003fa4 <_svfprintf_r+0xc4>
1a0043bc:	f81b 8b01 	ldrb.w	r8, [fp], #1
1a0043c0:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
1a0043c4:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
1a0043c8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0043cc:	2b09      	cmp	r3, #9
1a0043ce:	d9f5      	bls.n	1a0043bc <_svfprintf_r+0x4dc>
1a0043d0:	e5e8      	b.n	1a003fa4 <_svfprintf_r+0xc4>
1a0043d2:	f88d 7083 	strb.w	r7, [sp, #131]	; 0x83
1a0043d6:	f89b 8000 	ldrb.w	r8, [fp]
1a0043da:	e5e1      	b.n	1a003fa0 <_svfprintf_r+0xc0>
1a0043dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0043de:	f89b 8000 	ldrb.w	r8, [fp]
1a0043e2:	f853 2b04 	ldr.w	r2, [r3], #4
1a0043e6:	9205      	str	r2, [sp, #20]
1a0043e8:	2a00      	cmp	r2, #0
1a0043ea:	f2c0 8585 	blt.w	1a004ef8 <_svfprintf_r+0x1018>
1a0043ee:	9309      	str	r3, [sp, #36]	; 0x24
1a0043f0:	e5d6      	b.n	1a003fa0 <_svfprintf_r+0xc0>
1a0043f2:	bf00      	nop
1a0043f4:	1a007b70 	.word	0x1a007b70
1a0043f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0043fa:	2300      	movs	r3, #0
1a0043fc:	f854 2b04 	ldr.w	r2, [r4], #4
1a004400:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a004404:	2701      	movs	r7, #1
1a004406:	461a      	mov	r2, r3
1a004408:	9703      	str	r7, [sp, #12]
1a00440a:	9409      	str	r4, [sp, #36]	; 0x24
1a00440c:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a004410:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a004414:	9208      	str	r2, [sp, #32]
1a004416:	4692      	mov	sl, r2
1a004418:	920c      	str	r2, [sp, #48]	; 0x30
1a00441a:	ae3b      	add	r6, sp, #236	; 0xec
1a00441c:	9b02      	ldr	r3, [sp, #8]
1a00441e:	f013 0302 	ands.w	r3, r3, #2
1a004422:	930a      	str	r3, [sp, #40]	; 0x28
1a004424:	d002      	beq.n	1a00442c <_svfprintf_r+0x54c>
1a004426:	9b03      	ldr	r3, [sp, #12]
1a004428:	3302      	adds	r3, #2
1a00442a:	9303      	str	r3, [sp, #12]
1a00442c:	9b02      	ldr	r3, [sp, #8]
1a00442e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004430:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a004434:	930b      	str	r3, [sp, #44]	; 0x2c
1a004436:	d104      	bne.n	1a004442 <_svfprintf_r+0x562>
1a004438:	9b05      	ldr	r3, [sp, #20]
1a00443a:	9903      	ldr	r1, [sp, #12]
1a00443c:	1a5d      	subs	r5, r3, r1
1a00443e:	2d00      	cmp	r5, #0
1a004440:	dc5a      	bgt.n	1a0044f8 <_svfprintf_r+0x618>
1a004442:	b172      	cbz	r2, 1a004462 <_svfprintf_r+0x582>
1a004444:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004446:	3201      	adds	r2, #1
1a004448:	3401      	adds	r4, #1
1a00444a:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a00444e:	2101      	movs	r1, #1
1a004450:	2a07      	cmp	r2, #7
1a004452:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004456:	e9c9 0100 	strd	r0, r1, [r9]
1a00445a:	f300 82e9 	bgt.w	1a004a30 <_svfprintf_r+0xb50>
1a00445e:	f109 0908 	add.w	r9, r9, #8
1a004462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004464:	b16b      	cbz	r3, 1a004482 <_svfprintf_r+0x5a2>
1a004466:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004468:	3301      	adds	r3, #1
1a00446a:	3402      	adds	r4, #2
1a00446c:	a921      	add	r1, sp, #132	; 0x84
1a00446e:	2202      	movs	r2, #2
1a004470:	2b07      	cmp	r3, #7
1a004472:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004476:	e9c9 1200 	strd	r1, r2, [r9]
1a00447a:	f300 82e5 	bgt.w	1a004a48 <_svfprintf_r+0xb68>
1a00447e:	f109 0908 	add.w	r9, r9, #8
1a004482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004484:	2b80      	cmp	r3, #128	; 0x80
1a004486:	f000 81f8 	beq.w	1a00487a <_svfprintf_r+0x99a>
1a00448a:	ebaa 0507 	sub.w	r5, sl, r7
1a00448e:	2d00      	cmp	r5, #0
1a004490:	f300 8236 	bgt.w	1a004900 <_svfprintf_r+0xa20>
1a004494:	9b02      	ldr	r3, [sp, #8]
1a004496:	05da      	lsls	r2, r3, #23
1a004498:	f100 8185 	bmi.w	1a0047a6 <_svfprintf_r+0x8c6>
1a00449c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00449e:	f8c9 6000 	str.w	r6, [r9]
1a0044a2:	3301      	adds	r3, #1
1a0044a4:	443c      	add	r4, r7
1a0044a6:	2b07      	cmp	r3, #7
1a0044a8:	942a      	str	r4, [sp, #168]	; 0xa8
1a0044aa:	f8c9 7004 	str.w	r7, [r9, #4]
1a0044ae:	9329      	str	r3, [sp, #164]	; 0xa4
1a0044b0:	f300 82b2 	bgt.w	1a004a18 <_svfprintf_r+0xb38>
1a0044b4:	f109 0908 	add.w	r9, r9, #8
1a0044b8:	9b02      	ldr	r3, [sp, #8]
1a0044ba:	0759      	lsls	r1, r3, #29
1a0044bc:	d505      	bpl.n	1a0044ca <_svfprintf_r+0x5ea>
1a0044be:	9b05      	ldr	r3, [sp, #20]
1a0044c0:	9a03      	ldr	r2, [sp, #12]
1a0044c2:	1a9d      	subs	r5, r3, r2
1a0044c4:	2d00      	cmp	r5, #0
1a0044c6:	f300 82cb 	bgt.w	1a004a60 <_svfprintf_r+0xb80>
1a0044ca:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
1a0044ce:	9903      	ldr	r1, [sp, #12]
1a0044d0:	428a      	cmp	r2, r1
1a0044d2:	bfac      	ite	ge
1a0044d4:	189b      	addge	r3, r3, r2
1a0044d6:	185b      	addlt	r3, r3, r1
1a0044d8:	9304      	str	r3, [sp, #16]
1a0044da:	2c00      	cmp	r4, #0
1a0044dc:	f47f add7 	bne.w	1a00408e <_svfprintf_r+0x1ae>
1a0044e0:	2300      	movs	r3, #0
1a0044e2:	9329      	str	r3, [sp, #164]	; 0xa4
1a0044e4:	9b08      	ldr	r3, [sp, #32]
1a0044e6:	b11b      	cbz	r3, 1a0044f0 <_svfprintf_r+0x610>
1a0044e8:	9908      	ldr	r1, [sp, #32]
1a0044ea:	9806      	ldr	r0, [sp, #24]
1a0044ec:	f7fe ff96 	bl	1a00341c <_free_r>
1a0044f0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0044f4:	465e      	mov	r6, fp
1a0044f6:	e693      	b.n	1a004220 <_svfprintf_r+0x340>
1a0044f8:	2d10      	cmp	r5, #16
1a0044fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0044fc:	dd29      	ble.n	1a004552 <_svfprintf_r+0x672>
1a0044fe:	4620      	mov	r0, r4
1a004500:	4649      	mov	r1, r9
1a004502:	2310      	movs	r3, #16
1a004504:	46b1      	mov	r9, r6
1a004506:	971e      	str	r7, [sp, #120]	; 0x78
1a004508:	9c06      	ldr	r4, [sp, #24]
1a00450a:	9e07      	ldr	r6, [sp, #28]
1a00450c:	e004      	b.n	1a004518 <_svfprintf_r+0x638>
1a00450e:	3d10      	subs	r5, #16
1a004510:	2d10      	cmp	r5, #16
1a004512:	f101 0108 	add.w	r1, r1, #8
1a004516:	dd18      	ble.n	1a00454a <_svfprintf_r+0x66a>
1a004518:	3201      	adds	r2, #1
1a00451a:	4fc4      	ldr	r7, [pc, #784]	; (1a00482c <_svfprintf_r+0x94c>)
1a00451c:	3010      	adds	r0, #16
1a00451e:	2a07      	cmp	r2, #7
1a004520:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a004524:	e9c1 7300 	strd	r7, r3, [r1]
1a004528:	ddf1      	ble.n	1a00450e <_svfprintf_r+0x62e>
1a00452a:	aa28      	add	r2, sp, #160	; 0xa0
1a00452c:	4631      	mov	r1, r6
1a00452e:	4620      	mov	r0, r4
1a004530:	f002 ff9e 	bl	1a007470 <__ssprint_r>
1a004534:	2800      	cmp	r0, #0
1a004536:	f47f adb2 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a00453a:	3d10      	subs	r5, #16
1a00453c:	2d10      	cmp	r5, #16
1a00453e:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a004542:	a92b      	add	r1, sp, #172	; 0xac
1a004544:	f04f 0310 	mov.w	r3, #16
1a004548:	dce6      	bgt.n	1a004518 <_svfprintf_r+0x638>
1a00454a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
1a00454c:	464e      	mov	r6, r9
1a00454e:	4604      	mov	r4, r0
1a004550:	4689      	mov	r9, r1
1a004552:	3201      	adds	r2, #1
1a004554:	4bb5      	ldr	r3, [pc, #724]	; (1a00482c <_svfprintf_r+0x94c>)
1a004556:	442c      	add	r4, r5
1a004558:	2a07      	cmp	r2, #7
1a00455a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00455e:	e9c9 3500 	strd	r3, r5, [r9]
1a004562:	f300 85c9 	bgt.w	1a0050f8 <_svfprintf_r+0x1218>
1a004566:	f109 0908 	add.w	r9, r9, #8
1a00456a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00456e:	e768      	b.n	1a004442 <_svfprintf_r+0x562>
1a004570:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a004572:	3407      	adds	r4, #7
1a004574:	f024 0307 	bic.w	r3, r4, #7
1a004578:	ecb3 7b02 	vldmia	r3!, {d7}
1a00457c:	ec55 4b17 	vmov	r4, r5, d7
1a004580:	9309      	str	r3, [sp, #36]	; 0x24
1a004582:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a004586:	931b      	str	r3, [sp, #108]	; 0x6c
1a004588:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a00458c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a004590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004594:	4ba6      	ldr	r3, [pc, #664]	; (1a004830 <_svfprintf_r+0x950>)
1a004596:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00459a:	f003 f839 	bl	1a007610 <__aeabi_dcmpun>
1a00459e:	2800      	cmp	r0, #0
1a0045a0:	f040 83d1 	bne.w	1a004d46 <_svfprintf_r+0xe66>
1a0045a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0045a8:	4ba1      	ldr	r3, [pc, #644]	; (1a004830 <_svfprintf_r+0x950>)
1a0045aa:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a0045ae:	f7fe fcf5 	bl	1a002f9c <__aeabi_dcmple>
1a0045b2:	2800      	cmp	r0, #0
1a0045b4:	f040 83c7 	bne.w	1a004d46 <_svfprintf_r+0xe66>
1a0045b8:	2200      	movs	r2, #0
1a0045ba:	2300      	movs	r3, #0
1a0045bc:	4620      	mov	r0, r4
1a0045be:	4629      	mov	r1, r5
1a0045c0:	f7fe fce2 	bl	1a002f88 <__aeabi_dcmplt>
1a0045c4:	2800      	cmp	r0, #0
1a0045c6:	f040 86a0 	bne.w	1a00530a <_svfprintf_r+0x142a>
1a0045ca:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0045ce:	4e99      	ldr	r6, [pc, #612]	; (1a004834 <_svfprintf_r+0x954>)
1a0045d0:	4b99      	ldr	r3, [pc, #612]	; (1a004838 <_svfprintf_r+0x958>)
1a0045d2:	9802      	ldr	r0, [sp, #8]
1a0045d4:	2100      	movs	r1, #0
1a0045d6:	2703      	movs	r7, #3
1a0045d8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a0045dc:	9703      	str	r7, [sp, #12]
1a0045de:	9108      	str	r1, [sp, #32]
1a0045e0:	9002      	str	r0, [sp, #8]
1a0045e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a0045e6:	bfc8      	it	gt
1a0045e8:	461e      	movgt	r6, r3
1a0045ea:	468a      	mov	sl, r1
1a0045ec:	910c      	str	r1, [sp, #48]	; 0x30
1a0045ee:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a0045f2:	e655      	b.n	1a0042a0 <_svfprintf_r+0x3c0>
1a0045f4:	9d06      	ldr	r5, [sp, #24]
1a0045f6:	4628      	mov	r0, r5
1a0045f8:	f002 f94c 	bl	1a006894 <_localeconv_r>
1a0045fc:	6843      	ldr	r3, [r0, #4]
1a0045fe:	9317      	str	r3, [sp, #92]	; 0x5c
1a004600:	4618      	mov	r0, r3
1a004602:	f7ff fbfd 	bl	1a003e00 <strlen>
1a004606:	9019      	str	r0, [sp, #100]	; 0x64
1a004608:	4604      	mov	r4, r0
1a00460a:	4628      	mov	r0, r5
1a00460c:	f002 f942 	bl	1a006894 <_localeconv_r>
1a004610:	6883      	ldr	r3, [r0, #8]
1a004612:	9318      	str	r3, [sp, #96]	; 0x60
1a004614:	2120      	movs	r1, #32
1a004616:	2c00      	cmp	r4, #0
1a004618:	f43f ad2a 	beq.w	1a004070 <_svfprintf_r+0x190>
1a00461c:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a00461e:	f89b 8000 	ldrb.w	r8, [fp]
1a004622:	2b00      	cmp	r3, #0
1a004624:	f43f acbc 	beq.w	1a003fa0 <_svfprintf_r+0xc0>
1a004628:	781b      	ldrb	r3, [r3, #0]
1a00462a:	2b00      	cmp	r3, #0
1a00462c:	f43f acb8 	beq.w	1a003fa0 <_svfprintf_r+0xc0>
1a004630:	9b02      	ldr	r3, [sp, #8]
1a004632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a004636:	9302      	str	r3, [sp, #8]
1a004638:	e4b2      	b.n	1a003fa0 <_svfprintf_r+0xc0>
1a00463a:	9b02      	ldr	r3, [sp, #8]
1a00463c:	f89b 8000 	ldrb.w	r8, [fp]
1a004640:	f043 0301 	orr.w	r3, r3, #1
1a004644:	9302      	str	r3, [sp, #8]
1a004646:	e4ab      	b.n	1a003fa0 <_svfprintf_r+0xc0>
1a004648:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a00464c:	f89b 8000 	ldrb.w	r8, [fp]
1a004650:	2b00      	cmp	r3, #0
1a004652:	f47f aca5 	bne.w	1a003fa0 <_svfprintf_r+0xc0>
1a004656:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a00465a:	e4a1      	b.n	1a003fa0 <_svfprintf_r+0xc0>
1a00465c:	9f02      	ldr	r7, [sp, #8]
1a00465e:	463b      	mov	r3, r7
1a004660:	069b      	lsls	r3, r3, #26
1a004662:	f53f ae76 	bmi.w	1a004352 <_svfprintf_r+0x472>
1a004666:	9b02      	ldr	r3, [sp, #8]
1a004668:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a00466a:	06de      	lsls	r6, r3, #27
1a00466c:	f852 4b04 	ldr.w	r4, [r2], #4
1a004670:	f101 814b 	bmi.w	1a00590a <_svfprintf_r+0x1a2a>
1a004674:	9f02      	ldr	r7, [sp, #8]
1a004676:	067d      	lsls	r5, r7, #25
1a004678:	f140 862f 	bpl.w	1a0052da <_svfprintf_r+0x13fa>
1a00467c:	9209      	str	r2, [sp, #36]	; 0x24
1a00467e:	b2a4      	uxth	r4, r4
1a004680:	2500      	movs	r5, #0
1a004682:	2301      	movs	r3, #1
1a004684:	e582      	b.n	1a00418c <_svfprintf_r+0x2ac>
1a004686:	f1b8 0f00 	cmp.w	r8, #0
1a00468a:	f43f adcd 	beq.w	1a004228 <_svfprintf_r+0x348>
1a00468e:	2300      	movs	r3, #0
1a004690:	2701      	movs	r7, #1
1a004692:	461a      	mov	r2, r3
1a004694:	9703      	str	r7, [sp, #12]
1a004696:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a00469a:	e6b7      	b.n	1a00440c <_svfprintf_r+0x52c>
1a00469c:	9f02      	ldr	r7, [sp, #8]
1a00469e:	2d00      	cmp	r5, #0
1a0046a0:	bf08      	it	eq
1a0046a2:	2c0a      	cmpeq	r4, #10
1a0046a4:	d239      	bcs.n	1a00471a <_svfprintf_r+0x83a>
1a0046a6:	3430      	adds	r4, #48	; 0x30
1a0046a8:	9702      	str	r7, [sp, #8]
1a0046aa:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a0046ae:	2701      	movs	r7, #1
1a0046b0:	f20d 164f 	addw	r6, sp, #335	; 0x14f
1a0046b4:	2300      	movs	r3, #0
1a0046b6:	4557      	cmp	r7, sl
1a0046b8:	9308      	str	r3, [sp, #32]
1a0046ba:	930c      	str	r3, [sp, #48]	; 0x30
1a0046bc:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a0046c0:	463b      	mov	r3, r7
1a0046c2:	bfb8      	it	lt
1a0046c4:	4653      	movlt	r3, sl
1a0046c6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0046ca:	9303      	str	r3, [sp, #12]
1a0046cc:	e5e8      	b.n	1a0042a0 <_svfprintf_r+0x3c0>
1a0046ce:	9f02      	ldr	r7, [sp, #8]
1a0046d0:	2b01      	cmp	r3, #1
1a0046d2:	d0e4      	beq.n	1a00469e <_svfprintf_r+0x7be>
1a0046d4:	2b02      	cmp	r3, #2
1a0046d6:	f000 8202 	beq.w	1a004ade <_svfprintf_r+0xbfe>
1a0046da:	a954      	add	r1, sp, #336	; 0x150
1a0046dc:	e000      	b.n	1a0046e0 <_svfprintf_r+0x800>
1a0046de:	4631      	mov	r1, r6
1a0046e0:	08e2      	lsrs	r2, r4, #3
1a0046e2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a0046e6:	08e8      	lsrs	r0, r5, #3
1a0046e8:	f004 0307 	and.w	r3, r4, #7
1a0046ec:	4605      	mov	r5, r0
1a0046ee:	4614      	mov	r4, r2
1a0046f0:	3330      	adds	r3, #48	; 0x30
1a0046f2:	ea54 0205 	orrs.w	r2, r4, r5
1a0046f6:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0046fa:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
1a0046fe:	d1ee      	bne.n	1a0046de <_svfprintf_r+0x7fe>
1a004700:	07f8      	lsls	r0, r7, #31
1a004702:	d54c      	bpl.n	1a00479e <_svfprintf_r+0x8be>
1a004704:	2b30      	cmp	r3, #48	; 0x30
1a004706:	d04a      	beq.n	1a00479e <_svfprintf_r+0x8be>
1a004708:	2330      	movs	r3, #48	; 0x30
1a00470a:	3902      	subs	r1, #2
1a00470c:	f806 3c01 	strb.w	r3, [r6, #-1]
1a004710:	ab54      	add	r3, sp, #336	; 0x150
1a004712:	9702      	str	r7, [sp, #8]
1a004714:	460e      	mov	r6, r1
1a004716:	1a5f      	subs	r7, r3, r1
1a004718:	e7cc      	b.n	1a0046b4 <_svfprintf_r+0x7d4>
1a00471a:	f407 6380 	and.w	r3, r7, #1024	; 0x400
1a00471e:	2200      	movs	r2, #0
1a004720:	f8cd b008 	str.w	fp, [sp, #8]
1a004724:	f8cd 800c 	str.w	r8, [sp, #12]
1a004728:	f8cd 9020 	str.w	r9, [sp, #32]
1a00472c:	ae54      	add	r6, sp, #336	; 0x150
1a00472e:	46b9      	mov	r9, r7
1a004730:	4693      	mov	fp, r2
1a004732:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a004736:	461f      	mov	r7, r3
1a004738:	e007      	b.n	1a00474a <_svfprintf_r+0x86a>
1a00473a:	f7fe fc9d 	bl	1a003078 <__aeabi_uldivmod>
1a00473e:	2d00      	cmp	r5, #0
1a004740:	bf08      	it	eq
1a004742:	2c0a      	cmpeq	r4, #10
1a004744:	d320      	bcc.n	1a004788 <_svfprintf_r+0x8a8>
1a004746:	4604      	mov	r4, r0
1a004748:	460d      	mov	r5, r1
1a00474a:	220a      	movs	r2, #10
1a00474c:	2300      	movs	r3, #0
1a00474e:	4620      	mov	r0, r4
1a004750:	4629      	mov	r1, r5
1a004752:	f7fe fc91 	bl	1a003078 <__aeabi_uldivmod>
1a004756:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a00475a:	f806 cc01 	strb.w	ip, [r6, #-1]
1a00475e:	4620      	mov	r0, r4
1a004760:	4629      	mov	r1, r5
1a004762:	220a      	movs	r2, #10
1a004764:	2300      	movs	r3, #0
1a004766:	f10b 0b01 	add.w	fp, fp, #1
1a00476a:	3e01      	subs	r6, #1
1a00476c:	2f00      	cmp	r7, #0
1a00476e:	d0e4      	beq.n	1a00473a <_svfprintf_r+0x85a>
1a004770:	f898 c000 	ldrb.w	ip, [r8]
1a004774:	45e3      	cmp	fp, ip
1a004776:	d1e0      	bne.n	1a00473a <_svfprintf_r+0x85a>
1a004778:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
1a00477c:	d0dd      	beq.n	1a00473a <_svfprintf_r+0x85a>
1a00477e:	429d      	cmp	r5, r3
1a004780:	bf08      	it	eq
1a004782:	4294      	cmpeq	r4, r2
1a004784:	f080 8669 	bcs.w	1a00545a <_svfprintf_r+0x157a>
1a004788:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
1a00478c:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a004790:	464f      	mov	r7, r9
1a004792:	f8dd b008 	ldr.w	fp, [sp, #8]
1a004796:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a00479a:	f8dd 9020 	ldr.w	r9, [sp, #32]
1a00479e:	9702      	str	r7, [sp, #8]
1a0047a0:	ab54      	add	r3, sp, #336	; 0x150
1a0047a2:	1b9f      	subs	r7, r3, r6
1a0047a4:	e786      	b.n	1a0046b4 <_svfprintf_r+0x7d4>
1a0047a6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a0047aa:	f340 80e3 	ble.w	1a004974 <_svfprintf_r+0xa94>
1a0047ae:	2200      	movs	r2, #0
1a0047b0:	2300      	movs	r3, #0
1a0047b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0047b6:	f7fe fbdd 	bl	1a002f74 <__aeabi_dcmpeq>
1a0047ba:	2800      	cmp	r0, #0
1a0047bc:	f000 81a8 	beq.w	1a004b10 <_svfprintf_r+0xc30>
1a0047c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0047c2:	4a1e      	ldr	r2, [pc, #120]	; (1a00483c <_svfprintf_r+0x95c>)
1a0047c4:	f8c9 2000 	str.w	r2, [r9]
1a0047c8:	3301      	adds	r3, #1
1a0047ca:	3401      	adds	r4, #1
1a0047cc:	2201      	movs	r2, #1
1a0047ce:	2b07      	cmp	r3, #7
1a0047d0:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0047d4:	f8c9 2004 	str.w	r2, [r9, #4]
1a0047d8:	f300 84d1 	bgt.w	1a00517e <_svfprintf_r+0x129e>
1a0047dc:	f109 0908 	add.w	r9, r9, #8
1a0047e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0047e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0047e4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0047e6:	4293      	cmp	r3, r2
1a0047e8:	f280 828a 	bge.w	1a004d00 <_svfprintf_r+0xe20>
1a0047ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0047ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0047f0:	f8c9 2000 	str.w	r2, [r9]
1a0047f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0047f6:	f8c9 2004 	str.w	r2, [r9, #4]
1a0047fa:	3301      	adds	r3, #1
1a0047fc:	4414      	add	r4, r2
1a0047fe:	2b07      	cmp	r3, #7
1a004800:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004804:	f300 838f 	bgt.w	1a004f26 <_svfprintf_r+0x1046>
1a004808:	f109 0908 	add.w	r9, r9, #8
1a00480c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00480e:	1e5d      	subs	r5, r3, #1
1a004810:	2d00      	cmp	r5, #0
1a004812:	f77f ae51 	ble.w	1a0044b8 <_svfprintf_r+0x5d8>
1a004816:	2d10      	cmp	r5, #16
1a004818:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00481a:	4b09      	ldr	r3, [pc, #36]	; (1a004840 <_svfprintf_r+0x960>)
1a00481c:	f340 84bc 	ble.w	1a005198 <_svfprintf_r+0x12b8>
1a004820:	2610      	movs	r6, #16
1a004822:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a004826:	469a      	mov	sl, r3
1a004828:	e012      	b.n	1a004850 <_svfprintf_r+0x970>
1a00482a:	bf00      	nop
1a00482c:	1a007b90 	.word	0x1a007b90
1a004830:	7fefffff 	.word	0x7fefffff
1a004834:	1a007b60 	.word	0x1a007b60
1a004838:	1a007b64 	.word	0x1a007b64
1a00483c:	1a007b8c 	.word	0x1a007b8c
1a004840:	1a007ba0 	.word	0x1a007ba0
1a004844:	f109 0908 	add.w	r9, r9, #8
1a004848:	3d10      	subs	r5, #16
1a00484a:	2d10      	cmp	r5, #16
1a00484c:	f340 84a3 	ble.w	1a005196 <_svfprintf_r+0x12b6>
1a004850:	3201      	adds	r2, #1
1a004852:	3410      	adds	r4, #16
1a004854:	2a07      	cmp	r2, #7
1a004856:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00485a:	e9c9 a600 	strd	sl, r6, [r9]
1a00485e:	ddf1      	ble.n	1a004844 <_svfprintf_r+0x964>
1a004860:	aa28      	add	r2, sp, #160	; 0xa0
1a004862:	4641      	mov	r1, r8
1a004864:	4638      	mov	r0, r7
1a004866:	f002 fe03 	bl	1a007470 <__ssprint_r>
1a00486a:	2800      	cmp	r0, #0
1a00486c:	f47f ac17 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004870:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004874:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004878:	e7e6      	b.n	1a004848 <_svfprintf_r+0x968>
1a00487a:	9b05      	ldr	r3, [sp, #20]
1a00487c:	9a03      	ldr	r2, [sp, #12]
1a00487e:	1a9d      	subs	r5, r3, r2
1a004880:	2d00      	cmp	r5, #0
1a004882:	f77f ae02 	ble.w	1a00448a <_svfprintf_r+0x5aa>
1a004886:	2d10      	cmp	r5, #16
1a004888:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00488a:	4b9f      	ldr	r3, [pc, #636]	; (1a004b08 <_svfprintf_r+0xc28>)
1a00488c:	dd28      	ble.n	1a0048e0 <_svfprintf_r+0xa00>
1a00488e:	4620      	mov	r0, r4
1a004890:	970a      	str	r7, [sp, #40]	; 0x28
1a004892:	4649      	mov	r1, r9
1a004894:	9c06      	ldr	r4, [sp, #24]
1a004896:	46b1      	mov	r9, r6
1a004898:	461f      	mov	r7, r3
1a00489a:	9e07      	ldr	r6, [sp, #28]
1a00489c:	e004      	b.n	1a0048a8 <_svfprintf_r+0x9c8>
1a00489e:	3d10      	subs	r5, #16
1a0048a0:	2d10      	cmp	r5, #16
1a0048a2:	f101 0108 	add.w	r1, r1, #8
1a0048a6:	dd16      	ble.n	1a0048d6 <_svfprintf_r+0x9f6>
1a0048a8:	3201      	adds	r2, #1
1a0048aa:	3010      	adds	r0, #16
1a0048ac:	2310      	movs	r3, #16
1a0048ae:	2a07      	cmp	r2, #7
1a0048b0:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a0048b4:	600f      	str	r7, [r1, #0]
1a0048b6:	604b      	str	r3, [r1, #4]
1a0048b8:	ddf1      	ble.n	1a00489e <_svfprintf_r+0x9be>
1a0048ba:	aa28      	add	r2, sp, #160	; 0xa0
1a0048bc:	4631      	mov	r1, r6
1a0048be:	4620      	mov	r0, r4
1a0048c0:	f002 fdd6 	bl	1a007470 <__ssprint_r>
1a0048c4:	2800      	cmp	r0, #0
1a0048c6:	f47f abea 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a0048ca:	3d10      	subs	r5, #16
1a0048cc:	2d10      	cmp	r5, #16
1a0048ce:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a0048d2:	a92b      	add	r1, sp, #172	; 0xac
1a0048d4:	dce8      	bgt.n	1a0048a8 <_svfprintf_r+0x9c8>
1a0048d6:	463b      	mov	r3, r7
1a0048d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a0048da:	464e      	mov	r6, r9
1a0048dc:	4604      	mov	r4, r0
1a0048de:	4689      	mov	r9, r1
1a0048e0:	3201      	adds	r2, #1
1a0048e2:	442c      	add	r4, r5
1a0048e4:	2a07      	cmp	r2, #7
1a0048e6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0048ea:	e9c9 3500 	strd	r3, r5, [r9]
1a0048ee:	f300 846a 	bgt.w	1a0051c6 <_svfprintf_r+0x12e6>
1a0048f2:	ebaa 0507 	sub.w	r5, sl, r7
1a0048f6:	2d00      	cmp	r5, #0
1a0048f8:	f109 0908 	add.w	r9, r9, #8
1a0048fc:	f77f adca 	ble.w	1a004494 <_svfprintf_r+0x5b4>
1a004900:	2d10      	cmp	r5, #16
1a004902:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004904:	4b80      	ldr	r3, [pc, #512]	; (1a004b08 <_svfprintf_r+0xc28>)
1a004906:	dd29      	ble.n	1a00495c <_svfprintf_r+0xa7c>
1a004908:	4620      	mov	r0, r4
1a00490a:	970a      	str	r7, [sp, #40]	; 0x28
1a00490c:	4649      	mov	r1, r9
1a00490e:	f04f 0a10 	mov.w	sl, #16
1a004912:	46b1      	mov	r9, r6
1a004914:	9c06      	ldr	r4, [sp, #24]
1a004916:	9e07      	ldr	r6, [sp, #28]
1a004918:	461f      	mov	r7, r3
1a00491a:	e004      	b.n	1a004926 <_svfprintf_r+0xa46>
1a00491c:	3d10      	subs	r5, #16
1a00491e:	2d10      	cmp	r5, #16
1a004920:	f101 0108 	add.w	r1, r1, #8
1a004924:	dd15      	ble.n	1a004952 <_svfprintf_r+0xa72>
1a004926:	3201      	adds	r2, #1
1a004928:	3010      	adds	r0, #16
1a00492a:	2a07      	cmp	r2, #7
1a00492c:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a004930:	e9c1 7a00 	strd	r7, sl, [r1]
1a004934:	ddf2      	ble.n	1a00491c <_svfprintf_r+0xa3c>
1a004936:	aa28      	add	r2, sp, #160	; 0xa0
1a004938:	4631      	mov	r1, r6
1a00493a:	4620      	mov	r0, r4
1a00493c:	f002 fd98 	bl	1a007470 <__ssprint_r>
1a004940:	2800      	cmp	r0, #0
1a004942:	f47f abac 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004946:	3d10      	subs	r5, #16
1a004948:	2d10      	cmp	r5, #16
1a00494a:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00494e:	a92b      	add	r1, sp, #172	; 0xac
1a004950:	dce9      	bgt.n	1a004926 <_svfprintf_r+0xa46>
1a004952:	463b      	mov	r3, r7
1a004954:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a004956:	464e      	mov	r6, r9
1a004958:	4604      	mov	r4, r0
1a00495a:	4689      	mov	r9, r1
1a00495c:	3201      	adds	r2, #1
1a00495e:	442c      	add	r4, r5
1a004960:	2a07      	cmp	r2, #7
1a004962:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004966:	e9c9 3500 	strd	r3, r5, [r9]
1a00496a:	f300 8197 	bgt.w	1a004c9c <_svfprintf_r+0xdbc>
1a00496e:	f109 0908 	add.w	r9, r9, #8
1a004972:	e58f      	b.n	1a004494 <_svfprintf_r+0x5b4>
1a004974:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004976:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004978:	2a01      	cmp	r2, #1
1a00497a:	f104 0401 	add.w	r4, r4, #1
1a00497e:	f103 0501 	add.w	r5, r3, #1
1a004982:	f109 0708 	add.w	r7, r9, #8
1a004986:	f340 8148 	ble.w	1a004c1a <_svfprintf_r+0xd3a>
1a00498a:	2301      	movs	r3, #1
1a00498c:	2d07      	cmp	r5, #7
1a00498e:	f8c9 6000 	str.w	r6, [r9]
1a004992:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a004996:	f8c9 3004 	str.w	r3, [r9, #4]
1a00499a:	f300 8198 	bgt.w	1a004cce <_svfprintf_r+0xdee>
1a00499e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0049a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0049a2:	1c69      	adds	r1, r5, #1
1a0049a4:	441c      	add	r4, r3
1a0049a6:	2907      	cmp	r1, #7
1a0049a8:	910b      	str	r1, [sp, #44]	; 0x2c
1a0049aa:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a0049ae:	e9c7 2300 	strd	r2, r3, [r7]
1a0049b2:	f300 8198 	bgt.w	1a004ce6 <_svfprintf_r+0xe06>
1a0049b6:	3708      	adds	r7, #8
1a0049b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0049ba:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a0049bc:	f102 0a01 	add.w	sl, r2, #1
1a0049c0:	2300      	movs	r3, #0
1a0049c2:	2200      	movs	r2, #0
1a0049c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0049c8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
1a0049cc:	f107 0908 	add.w	r9, r7, #8
1a0049d0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a0049d4:	f7fe face 	bl	1a002f74 <__aeabi_dcmpeq>
1a0049d8:	2800      	cmp	r0, #0
1a0049da:	f040 8131 	bne.w	1a004c40 <_svfprintf_r+0xd60>
1a0049de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0049e0:	f8c7 8004 	str.w	r8, [r7, #4]
1a0049e4:	3601      	adds	r6, #1
1a0049e6:	4444      	add	r4, r8
1a0049e8:	2b07      	cmp	r3, #7
1a0049ea:	603e      	str	r6, [r7, #0]
1a0049ec:	942a      	str	r4, [sp, #168]	; 0xa8
1a0049ee:	9329      	str	r3, [sp, #164]	; 0xa4
1a0049f0:	f300 8367 	bgt.w	1a0050c2 <_svfprintf_r+0x11e2>
1a0049f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0049f6:	f107 0310 	add.w	r3, r7, #16
1a0049fa:	3202      	adds	r2, #2
1a0049fc:	464f      	mov	r7, r9
1a0049fe:	920a      	str	r2, [sp, #40]	; 0x28
1a004a00:	4699      	mov	r9, r3
1a004a02:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a004a04:	607a      	str	r2, [r7, #4]
1a004a06:	4414      	add	r4, r2
1a004a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004a0a:	942a      	str	r4, [sp, #168]	; 0xa8
1a004a0c:	ab24      	add	r3, sp, #144	; 0x90
1a004a0e:	2a07      	cmp	r2, #7
1a004a10:	9229      	str	r2, [sp, #164]	; 0xa4
1a004a12:	603b      	str	r3, [r7, #0]
1a004a14:	f77f ad50 	ble.w	1a0044b8 <_svfprintf_r+0x5d8>
1a004a18:	aa28      	add	r2, sp, #160	; 0xa0
1a004a1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004a1e:	f002 fd27 	bl	1a007470 <__ssprint_r>
1a004a22:	2800      	cmp	r0, #0
1a004a24:	f47f ab3b 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004a28:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004a2a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004a2e:	e543      	b.n	1a0044b8 <_svfprintf_r+0x5d8>
1a004a30:	aa28      	add	r2, sp, #160	; 0xa0
1a004a32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004a36:	f002 fd1b 	bl	1a007470 <__ssprint_r>
1a004a3a:	2800      	cmp	r0, #0
1a004a3c:	f47f ab2f 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004a40:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004a42:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004a46:	e50c      	b.n	1a004462 <_svfprintf_r+0x582>
1a004a48:	aa28      	add	r2, sp, #160	; 0xa0
1a004a4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004a4e:	f002 fd0f 	bl	1a007470 <__ssprint_r>
1a004a52:	2800      	cmp	r0, #0
1a004a54:	f47f ab23 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004a58:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004a5a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004a5e:	e510      	b.n	1a004482 <_svfprintf_r+0x5a2>
1a004a60:	2d10      	cmp	r5, #16
1a004a62:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004a64:	dd20      	ble.n	1a004aa8 <_svfprintf_r+0xbc8>
1a004a66:	2610      	movs	r6, #16
1a004a68:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a004a6c:	e004      	b.n	1a004a78 <_svfprintf_r+0xb98>
1a004a6e:	3d10      	subs	r5, #16
1a004a70:	2d10      	cmp	r5, #16
1a004a72:	f109 0908 	add.w	r9, r9, #8
1a004a76:	dd17      	ble.n	1a004aa8 <_svfprintf_r+0xbc8>
1a004a78:	3301      	adds	r3, #1
1a004a7a:	4a24      	ldr	r2, [pc, #144]	; (1a004b0c <_svfprintf_r+0xc2c>)
1a004a7c:	3410      	adds	r4, #16
1a004a7e:	2b07      	cmp	r3, #7
1a004a80:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004a84:	e9c9 2600 	strd	r2, r6, [r9]
1a004a88:	ddf1      	ble.n	1a004a6e <_svfprintf_r+0xb8e>
1a004a8a:	aa28      	add	r2, sp, #160	; 0xa0
1a004a8c:	4641      	mov	r1, r8
1a004a8e:	4638      	mov	r0, r7
1a004a90:	f002 fcee 	bl	1a007470 <__ssprint_r>
1a004a94:	2800      	cmp	r0, #0
1a004a96:	f47f ab02 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004a9a:	3d10      	subs	r5, #16
1a004a9c:	2d10      	cmp	r5, #16
1a004a9e:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004aa2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004aa6:	dce7      	bgt.n	1a004a78 <_svfprintf_r+0xb98>
1a004aa8:	3301      	adds	r3, #1
1a004aaa:	4a18      	ldr	r2, [pc, #96]	; (1a004b0c <_svfprintf_r+0xc2c>)
1a004aac:	442c      	add	r4, r5
1a004aae:	2b07      	cmp	r3, #7
1a004ab0:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004ab4:	e9c9 2500 	strd	r2, r5, [r9]
1a004ab8:	f77f ad07 	ble.w	1a0044ca <_svfprintf_r+0x5ea>
1a004abc:	aa28      	add	r2, sp, #160	; 0xa0
1a004abe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004ac2:	f002 fcd5 	bl	1a007470 <__ssprint_r>
1a004ac6:	2800      	cmp	r0, #0
1a004ac8:	f47f aae9 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004acc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004ace:	e4fc      	b.n	1a0044ca <_svfprintf_r+0x5ea>
1a004ad0:	2b01      	cmp	r3, #1
1a004ad2:	f000 8467 	beq.w	1a0053a4 <_svfprintf_r+0x14c4>
1a004ad6:	2b02      	cmp	r3, #2
1a004ad8:	9f02      	ldr	r7, [sp, #8]
1a004ada:	f47f adfe 	bne.w	1a0046da <_svfprintf_r+0x7fa>
1a004ade:	9814      	ldr	r0, [sp, #80]	; 0x50
1a004ae0:	ae54      	add	r6, sp, #336	; 0x150
1a004ae2:	0923      	lsrs	r3, r4, #4
1a004ae4:	f004 010f 	and.w	r1, r4, #15
1a004ae8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a004aec:	092a      	lsrs	r2, r5, #4
1a004aee:	461c      	mov	r4, r3
1a004af0:	4615      	mov	r5, r2
1a004af2:	5c43      	ldrb	r3, [r0, r1]
1a004af4:	f806 3d01 	strb.w	r3, [r6, #-1]!
1a004af8:	ea54 0305 	orrs.w	r3, r4, r5
1a004afc:	d1f1      	bne.n	1a004ae2 <_svfprintf_r+0xc02>
1a004afe:	ab54      	add	r3, sp, #336	; 0x150
1a004b00:	9702      	str	r7, [sp, #8]
1a004b02:	1b9f      	subs	r7, r3, r6
1a004b04:	e5d6      	b.n	1a0046b4 <_svfprintf_r+0x7d4>
1a004b06:	bf00      	nop
1a004b08:	1a007ba0 	.word	0x1a007ba0
1a004b0c:	1a007b90 	.word	0x1a007b90
1a004b10:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004b12:	2b00      	cmp	r3, #0
1a004b14:	f340 82ff 	ble.w	1a005116 <_svfprintf_r+0x1236>
1a004b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004b1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004b1c:	4293      	cmp	r3, r2
1a004b1e:	bfa8      	it	ge
1a004b20:	4613      	movge	r3, r2
1a004b22:	2b00      	cmp	r3, #0
1a004b24:	461d      	mov	r5, r3
1a004b26:	dd0d      	ble.n	1a004b44 <_svfprintf_r+0xc64>
1a004b28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004b2a:	f8c9 6000 	str.w	r6, [r9]
1a004b2e:	3301      	adds	r3, #1
1a004b30:	442c      	add	r4, r5
1a004b32:	2b07      	cmp	r3, #7
1a004b34:	942a      	str	r4, [sp, #168]	; 0xa8
1a004b36:	f8c9 5004 	str.w	r5, [r9, #4]
1a004b3a:	9329      	str	r3, [sp, #164]	; 0xa4
1a004b3c:	f300 8480 	bgt.w	1a005440 <_svfprintf_r+0x1560>
1a004b40:	f109 0908 	add.w	r9, r9, #8
1a004b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004b46:	2d00      	cmp	r5, #0
1a004b48:	bfa8      	it	ge
1a004b4a:	1b5b      	subge	r3, r3, r5
1a004b4c:	2b00      	cmp	r3, #0
1a004b4e:	461d      	mov	r5, r3
1a004b50:	f300 8213 	bgt.w	1a004f7a <_svfprintf_r+0x109a>
1a004b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004b56:	4433      	add	r3, r6
1a004b58:	469a      	mov	sl, r3
1a004b5a:	9b02      	ldr	r3, [sp, #8]
1a004b5c:	055f      	lsls	r7, r3, #21
1a004b5e:	f100 8233 	bmi.w	1a004fc8 <_svfprintf_r+0x10e8>
1a004b62:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004b64:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004b66:	4293      	cmp	r3, r2
1a004b68:	db03      	blt.n	1a004b72 <_svfprintf_r+0xc92>
1a004b6a:	9a02      	ldr	r2, [sp, #8]
1a004b6c:	07d5      	lsls	r5, r2, #31
1a004b6e:	f140 83de 	bpl.w	1a00532e <_svfprintf_r+0x144e>
1a004b72:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004b74:	9915      	ldr	r1, [sp, #84]	; 0x54
1a004b76:	f8c9 1000 	str.w	r1, [r9]
1a004b7a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a004b7c:	f8c9 1004 	str.w	r1, [r9, #4]
1a004b80:	3201      	adds	r2, #1
1a004b82:	440c      	add	r4, r1
1a004b84:	2a07      	cmp	r2, #7
1a004b86:	942a      	str	r4, [sp, #168]	; 0xa8
1a004b88:	9229      	str	r2, [sp, #164]	; 0xa4
1a004b8a:	f300 847c 	bgt.w	1a005486 <_svfprintf_r+0x15a6>
1a004b8e:	f109 0908 	add.w	r9, r9, #8
1a004b92:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004b94:	18b5      	adds	r5, r6, r2
1a004b96:	eba5 050a 	sub.w	r5, r5, sl
1a004b9a:	1ad3      	subs	r3, r2, r3
1a004b9c:	429d      	cmp	r5, r3
1a004b9e:	bfa8      	it	ge
1a004ba0:	461d      	movge	r5, r3
1a004ba2:	2d00      	cmp	r5, #0
1a004ba4:	dd0d      	ble.n	1a004bc2 <_svfprintf_r+0xce2>
1a004ba6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004ba8:	f8c9 a000 	str.w	sl, [r9]
1a004bac:	3201      	adds	r2, #1
1a004bae:	442c      	add	r4, r5
1a004bb0:	2a07      	cmp	r2, #7
1a004bb2:	942a      	str	r4, [sp, #168]	; 0xa8
1a004bb4:	f8c9 5004 	str.w	r5, [r9, #4]
1a004bb8:	9229      	str	r2, [sp, #164]	; 0xa4
1a004bba:	f300 8579 	bgt.w	1a0056b0 <_svfprintf_r+0x17d0>
1a004bbe:	f109 0908 	add.w	r9, r9, #8
1a004bc2:	2d00      	cmp	r5, #0
1a004bc4:	bfac      	ite	ge
1a004bc6:	1b5d      	subge	r5, r3, r5
1a004bc8:	461d      	movlt	r5, r3
1a004bca:	2d00      	cmp	r5, #0
1a004bcc:	f77f ac74 	ble.w	1a0044b8 <_svfprintf_r+0x5d8>
1a004bd0:	2d10      	cmp	r5, #16
1a004bd2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004bd4:	4bc2      	ldr	r3, [pc, #776]	; (1a004ee0 <_svfprintf_r+0x1000>)
1a004bd6:	f340 82df 	ble.w	1a005198 <_svfprintf_r+0x12b8>
1a004bda:	2610      	movs	r6, #16
1a004bdc:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a004be0:	469a      	mov	sl, r3
1a004be2:	e005      	b.n	1a004bf0 <_svfprintf_r+0xd10>
1a004be4:	f109 0908 	add.w	r9, r9, #8
1a004be8:	3d10      	subs	r5, #16
1a004bea:	2d10      	cmp	r5, #16
1a004bec:	f340 82d3 	ble.w	1a005196 <_svfprintf_r+0x12b6>
1a004bf0:	3201      	adds	r2, #1
1a004bf2:	3410      	adds	r4, #16
1a004bf4:	2a07      	cmp	r2, #7
1a004bf6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004bfa:	e9c9 a600 	strd	sl, r6, [r9]
1a004bfe:	ddf1      	ble.n	1a004be4 <_svfprintf_r+0xd04>
1a004c00:	aa28      	add	r2, sp, #160	; 0xa0
1a004c02:	4641      	mov	r1, r8
1a004c04:	4638      	mov	r0, r7
1a004c06:	f002 fc33 	bl	1a007470 <__ssprint_r>
1a004c0a:	2800      	cmp	r0, #0
1a004c0c:	f47f aa47 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004c10:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004c14:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004c18:	e7e6      	b.n	1a004be8 <_svfprintf_r+0xd08>
1a004c1a:	9a02      	ldr	r2, [sp, #8]
1a004c1c:	07d0      	lsls	r0, r2, #31
1a004c1e:	f53f aeb4 	bmi.w	1a00498a <_svfprintf_r+0xaaa>
1a004c22:	2201      	movs	r2, #1
1a004c24:	2d07      	cmp	r5, #7
1a004c26:	f8c9 6000 	str.w	r6, [r9]
1a004c2a:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a004c2e:	f8c9 2004 	str.w	r2, [r9, #4]
1a004c32:	f300 8246 	bgt.w	1a0050c2 <_svfprintf_r+0x11e2>
1a004c36:	3302      	adds	r3, #2
1a004c38:	930a      	str	r3, [sp, #40]	; 0x28
1a004c3a:	f109 0910 	add.w	r9, r9, #16
1a004c3e:	e6e0      	b.n	1a004a02 <_svfprintf_r+0xb22>
1a004c40:	f1b8 0f00 	cmp.w	r8, #0
1a004c44:	f77f aedd 	ble.w	1a004a02 <_svfprintf_r+0xb22>
1a004c48:	f1b8 0f10 	cmp.w	r8, #16
1a004c4c:	4ba4      	ldr	r3, [pc, #656]	; (1a004ee0 <_svfprintf_r+0x1000>)
1a004c4e:	f340 8639 	ble.w	1a0058c4 <_svfprintf_r+0x19e4>
1a004c52:	461a      	mov	r2, r3
1a004c54:	4655      	mov	r5, sl
1a004c56:	4623      	mov	r3, r4
1a004c58:	2610      	movs	r6, #16
1a004c5a:	f8dd 9018 	ldr.w	r9, [sp, #24]
1a004c5e:	f8dd a01c 	ldr.w	sl, [sp, #28]
1a004c62:	4614      	mov	r4, r2
1a004c64:	e007      	b.n	1a004c76 <_svfprintf_r+0xd96>
1a004c66:	3708      	adds	r7, #8
1a004c68:	f1a8 0810 	sub.w	r8, r8, #16
1a004c6c:	f1b8 0f10 	cmp.w	r8, #16
1a004c70:	f340 8304 	ble.w	1a00527c <_svfprintf_r+0x139c>
1a004c74:	3501      	adds	r5, #1
1a004c76:	3310      	adds	r3, #16
1a004c78:	2d07      	cmp	r5, #7
1a004c7a:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a004c7e:	e9c7 4600 	strd	r4, r6, [r7]
1a004c82:	ddf0      	ble.n	1a004c66 <_svfprintf_r+0xd86>
1a004c84:	aa28      	add	r2, sp, #160	; 0xa0
1a004c86:	4651      	mov	r1, sl
1a004c88:	4648      	mov	r0, r9
1a004c8a:	f002 fbf1 	bl	1a007470 <__ssprint_r>
1a004c8e:	2800      	cmp	r0, #0
1a004c90:	f47f aa05 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004c94:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a004c98:	af2b      	add	r7, sp, #172	; 0xac
1a004c9a:	e7e5      	b.n	1a004c68 <_svfprintf_r+0xd88>
1a004c9c:	aa28      	add	r2, sp, #160	; 0xa0
1a004c9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004ca2:	f002 fbe5 	bl	1a007470 <__ssprint_r>
1a004ca6:	2800      	cmp	r0, #0
1a004ca8:	f47f a9f9 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004cac:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004cae:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004cb2:	f7ff bbef 	b.w	1a004494 <_svfprintf_r+0x5b4>
1a004cb6:	232d      	movs	r3, #45	; 0x2d
1a004cb8:	4264      	negs	r4, r4
1a004cba:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a004cbe:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a004cc2:	2301      	movs	r3, #1
1a004cc4:	f7ff ba65 	b.w	1a004192 <_svfprintf_r+0x2b2>
1a004cc8:	4634      	mov	r4, r6
1a004cca:	f7ff b95c 	b.w	1a003f86 <_svfprintf_r+0xa6>
1a004cce:	aa28      	add	r2, sp, #160	; 0xa0
1a004cd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004cd4:	f002 fbcc 	bl	1a007470 <__ssprint_r>
1a004cd8:	2800      	cmp	r0, #0
1a004cda:	f47f a9e0 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004cde:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a004ce2:	af2b      	add	r7, sp, #172	; 0xac
1a004ce4:	e65b      	b.n	1a00499e <_svfprintf_r+0xabe>
1a004ce6:	aa28      	add	r2, sp, #160	; 0xa0
1a004ce8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004cec:	f002 fbc0 	bl	1a007470 <__ssprint_r>
1a004cf0:	2800      	cmp	r0, #0
1a004cf2:	f47f a9d4 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004cf6:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004cfa:	af2b      	add	r7, sp, #172	; 0xac
1a004cfc:	930b      	str	r3, [sp, #44]	; 0x2c
1a004cfe:	e65b      	b.n	1a0049b8 <_svfprintf_r+0xad8>
1a004d00:	9b02      	ldr	r3, [sp, #8]
1a004d02:	07db      	lsls	r3, r3, #31
1a004d04:	f53f ad72 	bmi.w	1a0047ec <_svfprintf_r+0x90c>
1a004d08:	f7ff bbd6 	b.w	1a0044b8 <_svfprintf_r+0x5d8>
1a004d0c:	ae54      	add	r6, sp, #336	; 0x150
1a004d0e:	e4d1      	b.n	1a0046b4 <_svfprintf_r+0x7d4>
1a004d10:	9b02      	ldr	r3, [sp, #8]
1a004d12:	059f      	lsls	r7, r3, #22
1a004d14:	f100 831c 	bmi.w	1a005350 <_svfprintf_r+0x1470>
1a004d18:	2500      	movs	r5, #0
1a004d1a:	f7ff b9df 	b.w	1a0040dc <_svfprintf_r+0x1fc>
1a004d1e:	9904      	ldr	r1, [sp, #16]
1a004d20:	6812      	ldr	r2, [r2, #0]
1a004d22:	9309      	str	r3, [sp, #36]	; 0x24
1a004d24:	17cd      	asrs	r5, r1, #31
1a004d26:	4608      	mov	r0, r1
1a004d28:	4629      	mov	r1, r5
1a004d2a:	e9c2 0100 	strd	r0, r1, [r2]
1a004d2e:	465e      	mov	r6, fp
1a004d30:	f7ff ba76 	b.w	1a004220 <_svfprintf_r+0x340>
1a004d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004d36:	1d1a      	adds	r2, r3, #4
1a004d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004d3a:	9209      	str	r2, [sp, #36]	; 0x24
1a004d3c:	681c      	ldr	r4, [r3, #0]
1a004d3e:	2500      	movs	r5, #0
1a004d40:	2301      	movs	r3, #1
1a004d42:	f7ff ba23 	b.w	1a00418c <_svfprintf_r+0x2ac>
1a004d46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004d4a:	4602      	mov	r2, r0
1a004d4c:	460b      	mov	r3, r1
1a004d4e:	f002 fc5f 	bl	1a007610 <__aeabi_dcmpun>
1a004d52:	2800      	cmp	r0, #0
1a004d54:	f040 8528 	bne.w	1a0057a8 <_svfprintf_r+0x18c8>
1a004d58:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a004d5c:	f000 850d 	beq.w	1a00577a <_svfprintf_r+0x189a>
1a004d60:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a004d64:	f000 83e9 	beq.w	1a00553a <_svfprintf_r+0x165a>
1a004d68:	f028 0320 	bic.w	r3, r8, #32
1a004d6c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a004d70:	9303      	str	r3, [sp, #12]
1a004d72:	f000 8307 	beq.w	1a005384 <_svfprintf_r+0x14a4>
1a004d76:	2b47      	cmp	r3, #71	; 0x47
1a004d78:	d104      	bne.n	1a004d84 <_svfprintf_r+0xea4>
1a004d7a:	f1ba 0f00 	cmp.w	sl, #0
1a004d7e:	bf08      	it	eq
1a004d80:	f04f 0a01 	moveq.w	sl, #1
1a004d84:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a004d88:	9902      	ldr	r1, [sp, #8]
1a004d8a:	2d00      	cmp	r5, #0
1a004d8c:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a004d90:	f2c0 8476 	blt.w	1a005680 <_svfprintf_r+0x17a0>
1a004d94:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a004d98:	2300      	movs	r3, #0
1a004d9a:	931e      	str	r3, [sp, #120]	; 0x78
1a004d9c:	910a      	str	r1, [sp, #40]	; 0x28
1a004d9e:	9308      	str	r3, [sp, #32]
1a004da0:	9202      	str	r2, [sp, #8]
1a004da2:	9b03      	ldr	r3, [sp, #12]
1a004da4:	2b46      	cmp	r3, #70	; 0x46
1a004da6:	f000 837c 	beq.w	1a0054a2 <_svfprintf_r+0x15c2>
1a004daa:	2b45      	cmp	r3, #69	; 0x45
1a004dac:	f000 84d4 	beq.w	1a005758 <_svfprintf_r+0x1878>
1a004db0:	aa26      	add	r2, sp, #152	; 0x98
1a004db2:	ab23      	add	r3, sp, #140	; 0x8c
1a004db4:	e9cd 3200 	strd	r3, r2, [sp]
1a004db8:	2102      	movs	r1, #2
1a004dba:	ab22      	add	r3, sp, #136	; 0x88
1a004dbc:	4652      	mov	r2, sl
1a004dbe:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004dc2:	9806      	ldr	r0, [sp, #24]
1a004dc4:	f000 fe3c 	bl	1a005a40 <_dtoa_r>
1a004dc8:	9b03      	ldr	r3, [sp, #12]
1a004dca:	2b47      	cmp	r3, #71	; 0x47
1a004dcc:	4606      	mov	r6, r0
1a004dce:	f040 858e 	bne.w	1a0058ee <_svfprintf_r+0x1a0e>
1a004dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004dd4:	07db      	lsls	r3, r3, #31
1a004dd6:	f100 847b 	bmi.w	1a0056d0 <_svfprintf_r+0x17f0>
1a004dda:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a004ddc:	1bbb      	subs	r3, r7, r6
1a004dde:	9312      	str	r3, [sp, #72]	; 0x48
1a004de0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004de2:	930e      	str	r3, [sp, #56]	; 0x38
1a004de4:	9b03      	ldr	r3, [sp, #12]
1a004de6:	2b47      	cmp	r3, #71	; 0x47
1a004de8:	f000 82ee 	beq.w	1a0053c8 <_svfprintf_r+0x14e8>
1a004dec:	9b03      	ldr	r3, [sp, #12]
1a004dee:	2b46      	cmp	r3, #70	; 0x46
1a004df0:	f000 8380 	beq.w	1a0054f4 <_svfprintf_r+0x1614>
1a004df4:	9903      	ldr	r1, [sp, #12]
1a004df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004df8:	2941      	cmp	r1, #65	; 0x41
1a004dfa:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a004dfe:	fa5f f388 	uxtb.w	r3, r8
1a004e02:	bf03      	ittte	eq
1a004e04:	330f      	addeq	r3, #15
1a004e06:	b2db      	uxtbeq	r3, r3
1a004e08:	2101      	moveq	r1, #1
1a004e0a:	2100      	movne	r1, #0
1a004e0c:	2a00      	cmp	r2, #0
1a004e0e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a004e12:	bfb8      	it	lt
1a004e14:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a004e16:	9222      	str	r2, [sp, #136]	; 0x88
1a004e18:	bfb6      	itet	lt
1a004e1a:	f1c3 0201 	rsblt	r2, r3, #1
1a004e1e:	232b      	movge	r3, #43	; 0x2b
1a004e20:	232d      	movlt	r3, #45	; 0x2d
1a004e22:	2a09      	cmp	r2, #9
1a004e24:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a004e28:	f340 84ae 	ble.w	1a005788 <_svfprintf_r+0x18a8>
1a004e2c:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a004e30:	4620      	mov	r0, r4
1a004e32:	4d2c      	ldr	r5, [pc, #176]	; (1a004ee4 <_svfprintf_r+0x1004>)
1a004e34:	e001      	b.n	1a004e3a <_svfprintf_r+0xf5a>
1a004e36:	4608      	mov	r0, r1
1a004e38:	461a      	mov	r2, r3
1a004e3a:	fb85 3102 	smull	r3, r1, r5, r2
1a004e3e:	17d3      	asrs	r3, r2, #31
1a004e40:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a004e44:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a004e48:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a004e4c:	3130      	adds	r1, #48	; 0x30
1a004e4e:	2a63      	cmp	r2, #99	; 0x63
1a004e50:	f800 1c01 	strb.w	r1, [r0, #-1]
1a004e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a004e58:	dced      	bgt.n	1a004e36 <_svfprintf_r+0xf56>
1a004e5a:	3330      	adds	r3, #48	; 0x30
1a004e5c:	1e82      	subs	r2, r0, #2
1a004e5e:	b2db      	uxtb	r3, r3
1a004e60:	4294      	cmp	r4, r2
1a004e62:	f801 3c01 	strb.w	r3, [r1, #-1]
1a004e66:	f240 8545 	bls.w	1a0058f4 <_svfprintf_r+0x1a14>
1a004e6a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a004e6e:	e001      	b.n	1a004e74 <_svfprintf_r+0xf94>
1a004e70:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004e74:	f802 3b01 	strb.w	r3, [r2], #1
1a004e78:	428c      	cmp	r4, r1
1a004e7a:	d1f9      	bne.n	1a004e70 <_svfprintf_r+0xf90>
1a004e7c:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a004e80:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a004e84:	1a1b      	subs	r3, r3, r0
1a004e86:	4413      	add	r3, r2
1a004e88:	aa24      	add	r2, sp, #144	; 0x90
1a004e8a:	1a9b      	subs	r3, r3, r2
1a004e8c:	9316      	str	r3, [sp, #88]	; 0x58
1a004e8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004e90:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a004e92:	2b01      	cmp	r3, #1
1a004e94:	eb03 0702 	add.w	r7, r3, r2
1a004e98:	f340 84ee 	ble.w	1a005878 <_svfprintf_r+0x1998>
1a004e9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004e9e:	441f      	add	r7, r3
1a004ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004ea2:	2200      	movs	r2, #0
1a004ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a004ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a004eac:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a004eb0:	9302      	str	r3, [sp, #8]
1a004eb2:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004eb6:	920c      	str	r2, [sp, #48]	; 0x30
1a004eb8:	9303      	str	r3, [sp, #12]
1a004eba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a004ebc:	2b00      	cmp	r3, #0
1a004ebe:	f040 82aa 	bne.w	1a005416 <_svfprintf_r+0x1536>
1a004ec2:	469a      	mov	sl, r3
1a004ec4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004ec8:	f7ff b9ea 	b.w	1a0042a0 <_svfprintf_r+0x3c0>
1a004ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004ece:	1d1a      	adds	r2, r3, #4
1a004ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004ed2:	9209      	str	r2, [sp, #36]	; 0x24
1a004ed4:	681c      	ldr	r4, [r3, #0]
1a004ed6:	17e5      	asrs	r5, r4, #31
1a004ed8:	4622      	mov	r2, r4
1a004eda:	462b      	mov	r3, r5
1a004edc:	f7ff ba0f 	b.w	1a0042fe <_svfprintf_r+0x41e>
1a004ee0:	1a007ba0 	.word	0x1a007ba0
1a004ee4:	66666667 	.word	0x66666667
1a004ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004eea:	1d1a      	adds	r2, r3, #4
1a004eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004eee:	9209      	str	r2, [sp, #36]	; 0x24
1a004ef0:	681c      	ldr	r4, [r3, #0]
1a004ef2:	2500      	movs	r5, #0
1a004ef4:	f7ff b9e8 	b.w	1a0042c8 <_svfprintf_r+0x3e8>
1a004ef8:	4252      	negs	r2, r2
1a004efa:	9205      	str	r2, [sp, #20]
1a004efc:	9309      	str	r3, [sp, #36]	; 0x24
1a004efe:	f7ff b925 	b.w	1a00414c <_svfprintf_r+0x26c>
1a004f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a004f06:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a004f0a:	9302      	str	r3, [sp, #8]
1a004f0c:	f10b 0b01 	add.w	fp, fp, #1
1a004f10:	f7ff b846 	b.w	1a003fa0 <_svfprintf_r+0xc0>
1a004f14:	f043 0320 	orr.w	r3, r3, #32
1a004f18:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a004f1c:	9302      	str	r3, [sp, #8]
1a004f1e:	f10b 0b01 	add.w	fp, fp, #1
1a004f22:	f7ff b83d 	b.w	1a003fa0 <_svfprintf_r+0xc0>
1a004f26:	aa28      	add	r2, sp, #160	; 0xa0
1a004f28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004f2c:	f002 faa0 	bl	1a007470 <__ssprint_r>
1a004f30:	2800      	cmp	r0, #0
1a004f32:	f47f a8b4 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004f36:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004f38:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004f3c:	e466      	b.n	1a00480c <_svfprintf_r+0x92c>
1a004f3e:	2140      	movs	r1, #64	; 0x40
1a004f40:	9806      	ldr	r0, [sp, #24]
1a004f42:	f7fe fb89 	bl	1a003658 <_malloc_r>
1a004f46:	9b07      	ldr	r3, [sp, #28]
1a004f48:	6018      	str	r0, [r3, #0]
1a004f4a:	6118      	str	r0, [r3, #16]
1a004f4c:	2800      	cmp	r0, #0
1a004f4e:	f000 84c6 	beq.w	1a0058de <_svfprintf_r+0x19fe>
1a004f52:	9a07      	ldr	r2, [sp, #28]
1a004f54:	2340      	movs	r3, #64	; 0x40
1a004f56:	6153      	str	r3, [r2, #20]
1a004f58:	f7fe bfd9 	b.w	1a003f0e <_svfprintf_r+0x2e>
1a004f5c:	4657      	mov	r7, sl
1a004f5e:	2f06      	cmp	r7, #6
1a004f60:	bf28      	it	cs
1a004f62:	2706      	movcs	r7, #6
1a004f64:	46b2      	mov	sl, r6
1a004f66:	960c      	str	r6, [sp, #48]	; 0x30
1a004f68:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
1a004f6c:	9608      	str	r6, [sp, #32]
1a004f6e:	4632      	mov	r2, r6
1a004f70:	9703      	str	r7, [sp, #12]
1a004f72:	9409      	str	r4, [sp, #36]	; 0x24
1a004f74:	4ebe      	ldr	r6, [pc, #760]	; (1a005270 <_svfprintf_r+0x1390>)
1a004f76:	f7ff b993 	b.w	1a0042a0 <_svfprintf_r+0x3c0>
1a004f7a:	2d10      	cmp	r5, #16
1a004f7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004f7e:	4bbd      	ldr	r3, [pc, #756]	; (1a005274 <_svfprintf_r+0x1394>)
1a004f80:	f340 81b8 	ble.w	1a0052f4 <_svfprintf_r+0x1414>
1a004f84:	4619      	mov	r1, r3
1a004f86:	2710      	movs	r7, #16
1a004f88:	4623      	mov	r3, r4
1a004f8a:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
1a004f8e:	460c      	mov	r4, r1
1a004f90:	e005      	b.n	1a004f9e <_svfprintf_r+0x10be>
1a004f92:	f109 0908 	add.w	r9, r9, #8
1a004f96:	3d10      	subs	r5, #16
1a004f98:	2d10      	cmp	r5, #16
1a004f9a:	f340 81a8 	ble.w	1a0052ee <_svfprintf_r+0x140e>
1a004f9e:	3201      	adds	r2, #1
1a004fa0:	3310      	adds	r3, #16
1a004fa2:	2a07      	cmp	r2, #7
1a004fa4:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a004fa8:	e9c9 4700 	strd	r4, r7, [r9]
1a004fac:	ddf1      	ble.n	1a004f92 <_svfprintf_r+0x10b2>
1a004fae:	aa28      	add	r2, sp, #160	; 0xa0
1a004fb0:	4651      	mov	r1, sl
1a004fb2:	4640      	mov	r0, r8
1a004fb4:	f002 fa5c 	bl	1a007470 <__ssprint_r>
1a004fb8:	2800      	cmp	r0, #0
1a004fba:	f47f a870 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a004fbe:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a004fc2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004fc6:	e7e6      	b.n	1a004f96 <_svfprintf_r+0x10b6>
1a004fc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004fca:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a004fce:	18f3      	adds	r3, r6, r3
1a004fd0:	930a      	str	r3, [sp, #40]	; 0x28
1a004fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004fd4:	960e      	str	r6, [sp, #56]	; 0x38
1a004fd6:	464a      	mov	r2, r9
1a004fd8:	4656      	mov	r6, sl
1a004fda:	4fa6      	ldr	r7, [pc, #664]	; (1a005274 <_svfprintf_r+0x1394>)
1a004fdc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a004fe0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
1a004fe4:	4621      	mov	r1, r4
1a004fe6:	e9dd b906 	ldrd	fp, r9, [sp, #24]
1a004fea:	2b00      	cmp	r3, #0
1a004fec:	d033      	beq.n	1a005056 <_svfprintf_r+0x1176>
1a004fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004ff0:	2b00      	cmp	r3, #0
1a004ff2:	d134      	bne.n	1a00505e <_svfprintf_r+0x117e>
1a004ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004ff6:	3b01      	subs	r3, #1
1a004ff8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a004ffc:	930f      	str	r3, [sp, #60]	; 0x3c
1a004ffe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005000:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a005002:	6010      	str	r0, [r2, #0]
1a005004:	3301      	adds	r3, #1
1a005006:	4451      	add	r1, sl
1a005008:	2b07      	cmp	r3, #7
1a00500a:	912a      	str	r1, [sp, #168]	; 0xa8
1a00500c:	f8c2 a004 	str.w	sl, [r2, #4]
1a005010:	9329      	str	r3, [sp, #164]	; 0xa4
1a005012:	dc66      	bgt.n	1a0050e2 <_svfprintf_r+0x1202>
1a005014:	3208      	adds	r2, #8
1a005016:	980a      	ldr	r0, [sp, #40]	; 0x28
1a005018:	f898 3000 	ldrb.w	r3, [r8]
1a00501c:	1b85      	subs	r5, r0, r6
1a00501e:	429d      	cmp	r5, r3
1a005020:	bfa8      	it	ge
1a005022:	461d      	movge	r5, r3
1a005024:	2d00      	cmp	r5, #0
1a005026:	dd0c      	ble.n	1a005042 <_svfprintf_r+0x1162>
1a005028:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00502a:	6016      	str	r6, [r2, #0]
1a00502c:	3301      	adds	r3, #1
1a00502e:	4429      	add	r1, r5
1a005030:	2b07      	cmp	r3, #7
1a005032:	912a      	str	r1, [sp, #168]	; 0xa8
1a005034:	6055      	str	r5, [r2, #4]
1a005036:	9329      	str	r3, [sp, #164]	; 0xa4
1a005038:	f300 80b8 	bgt.w	1a0051ac <_svfprintf_r+0x12cc>
1a00503c:	f898 3000 	ldrb.w	r3, [r8]
1a005040:	3208      	adds	r2, #8
1a005042:	2d00      	cmp	r5, #0
1a005044:	bfac      	ite	ge
1a005046:	1b5d      	subge	r5, r3, r5
1a005048:	461d      	movlt	r5, r3
1a00504a:	2d00      	cmp	r5, #0
1a00504c:	dc0b      	bgt.n	1a005066 <_svfprintf_r+0x1186>
1a00504e:	441e      	add	r6, r3
1a005050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005052:	2b00      	cmp	r3, #0
1a005054:	d1cb      	bne.n	1a004fee <_svfprintf_r+0x110e>
1a005056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005058:	2b00      	cmp	r3, #0
1a00505a:	f000 81a6 	beq.w	1a0053aa <_svfprintf_r+0x14ca>
1a00505e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005060:	3b01      	subs	r3, #1
1a005062:	930c      	str	r3, [sp, #48]	; 0x30
1a005064:	e7cb      	b.n	1a004ffe <_svfprintf_r+0x111e>
1a005066:	2d10      	cmp	r5, #16
1a005068:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a00506a:	dd1c      	ble.n	1a0050a6 <_svfprintf_r+0x11c6>
1a00506c:	2410      	movs	r4, #16
1a00506e:	e004      	b.n	1a00507a <_svfprintf_r+0x119a>
1a005070:	3d10      	subs	r5, #16
1a005072:	2d10      	cmp	r5, #16
1a005074:	f102 0208 	add.w	r2, r2, #8
1a005078:	dd15      	ble.n	1a0050a6 <_svfprintf_r+0x11c6>
1a00507a:	3001      	adds	r0, #1
1a00507c:	3110      	adds	r1, #16
1a00507e:	2807      	cmp	r0, #7
1a005080:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a005084:	e9c2 7400 	strd	r7, r4, [r2]
1a005088:	ddf2      	ble.n	1a005070 <_svfprintf_r+0x1190>
1a00508a:	aa28      	add	r2, sp, #160	; 0xa0
1a00508c:	4649      	mov	r1, r9
1a00508e:	4658      	mov	r0, fp
1a005090:	f002 f9ee 	bl	1a007470 <__ssprint_r>
1a005094:	2800      	cmp	r0, #0
1a005096:	f47f a802 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a00509a:	3d10      	subs	r5, #16
1a00509c:	2d10      	cmp	r5, #16
1a00509e:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a0050a2:	aa2b      	add	r2, sp, #172	; 0xac
1a0050a4:	dce9      	bgt.n	1a00507a <_svfprintf_r+0x119a>
1a0050a6:	3001      	adds	r0, #1
1a0050a8:	4429      	add	r1, r5
1a0050aa:	2807      	cmp	r0, #7
1a0050ac:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a0050b0:	e9c2 7500 	strd	r7, r5, [r2]
1a0050b4:	f300 81b6 	bgt.w	1a005424 <_svfprintf_r+0x1544>
1a0050b8:	f898 3000 	ldrb.w	r3, [r8]
1a0050bc:	3208      	adds	r2, #8
1a0050be:	441e      	add	r6, r3
1a0050c0:	e7c6      	b.n	1a005050 <_svfprintf_r+0x1170>
1a0050c2:	aa28      	add	r2, sp, #160	; 0xa0
1a0050c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0050c8:	f002 f9d2 	bl	1a007470 <__ssprint_r>
1a0050cc:	2800      	cmp	r0, #0
1a0050ce:	f47e afe6 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a0050d2:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a0050d6:	3301      	adds	r3, #1
1a0050d8:	930a      	str	r3, [sp, #40]	; 0x28
1a0050da:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
1a0050de:	af2b      	add	r7, sp, #172	; 0xac
1a0050e0:	e48f      	b.n	1a004a02 <_svfprintf_r+0xb22>
1a0050e2:	aa28      	add	r2, sp, #160	; 0xa0
1a0050e4:	4649      	mov	r1, r9
1a0050e6:	4658      	mov	r0, fp
1a0050e8:	f002 f9c2 	bl	1a007470 <__ssprint_r>
1a0050ec:	2800      	cmp	r0, #0
1a0050ee:	f47e afd6 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a0050f2:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a0050f4:	aa2b      	add	r2, sp, #172	; 0xac
1a0050f6:	e78e      	b.n	1a005016 <_svfprintf_r+0x1136>
1a0050f8:	aa28      	add	r2, sp, #160	; 0xa0
1a0050fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0050fe:	f002 f9b7 	bl	1a007470 <__ssprint_r>
1a005102:	2800      	cmp	r0, #0
1a005104:	f47e afcb 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a005108:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00510c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00510e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a005112:	f7ff b996 	b.w	1a004442 <_svfprintf_r+0x562>
1a005116:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005118:	4957      	ldr	r1, [pc, #348]	; (1a005278 <_svfprintf_r+0x1398>)
1a00511a:	f8c9 1000 	str.w	r1, [r9]
1a00511e:	3201      	adds	r2, #1
1a005120:	3401      	adds	r4, #1
1a005122:	2101      	movs	r1, #1
1a005124:	2a07      	cmp	r2, #7
1a005126:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00512a:	f8c9 1004 	str.w	r1, [r9, #4]
1a00512e:	f300 80f1 	bgt.w	1a005314 <_svfprintf_r+0x1434>
1a005132:	f109 0908 	add.w	r9, r9, #8
1a005136:	2b00      	cmp	r3, #0
1a005138:	d15a      	bne.n	1a0051f0 <_svfprintf_r+0x1310>
1a00513a:	9b02      	ldr	r3, [sp, #8]
1a00513c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00513e:	f003 0301 	and.w	r3, r3, #1
1a005142:	4313      	orrs	r3, r2
1a005144:	f43f a9b8 	beq.w	1a0044b8 <_svfprintf_r+0x5d8>
1a005148:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00514a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00514c:	f8c9 3000 	str.w	r3, [r9]
1a005150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a005152:	f8c9 3004 	str.w	r3, [r9, #4]
1a005156:	3201      	adds	r2, #1
1a005158:	441c      	add	r4, r3
1a00515a:	2a07      	cmp	r2, #7
1a00515c:	942a      	str	r4, [sp, #168]	; 0xa8
1a00515e:	9229      	str	r2, [sp, #164]	; 0xa4
1a005160:	f300 8102 	bgt.w	1a005368 <_svfprintf_r+0x1488>
1a005164:	f109 0908 	add.w	r9, r9, #8
1a005168:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00516a:	3201      	adds	r2, #1
1a00516c:	441c      	add	r4, r3
1a00516e:	2a07      	cmp	r2, #7
1a005170:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a005174:	e9c9 6300 	strd	r6, r3, [r9]
1a005178:	f77f a99c 	ble.w	1a0044b4 <_svfprintf_r+0x5d4>
1a00517c:	e44c      	b.n	1a004a18 <_svfprintf_r+0xb38>
1a00517e:	aa28      	add	r2, sp, #160	; 0xa0
1a005180:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a005184:	f002 f974 	bl	1a007470 <__ssprint_r>
1a005188:	2800      	cmp	r0, #0
1a00518a:	f47e af88 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a00518e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a005192:	f7ff bb25 	b.w	1a0047e0 <_svfprintf_r+0x900>
1a005196:	4653      	mov	r3, sl
1a005198:	3201      	adds	r2, #1
1a00519a:	442c      	add	r4, r5
1a00519c:	2a07      	cmp	r2, #7
1a00519e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0051a2:	e9c9 3500 	strd	r3, r5, [r9]
1a0051a6:	f77f a985 	ble.w	1a0044b4 <_svfprintf_r+0x5d4>
1a0051aa:	e435      	b.n	1a004a18 <_svfprintf_r+0xb38>
1a0051ac:	aa28      	add	r2, sp, #160	; 0xa0
1a0051ae:	4649      	mov	r1, r9
1a0051b0:	4658      	mov	r0, fp
1a0051b2:	f002 f95d 	bl	1a007470 <__ssprint_r>
1a0051b6:	2800      	cmp	r0, #0
1a0051b8:	f47e af71 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a0051bc:	f898 3000 	ldrb.w	r3, [r8]
1a0051c0:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a0051c2:	aa2b      	add	r2, sp, #172	; 0xac
1a0051c4:	e73d      	b.n	1a005042 <_svfprintf_r+0x1162>
1a0051c6:	aa28      	add	r2, sp, #160	; 0xa0
1a0051c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0051cc:	f002 f950 	bl	1a007470 <__ssprint_r>
1a0051d0:	2800      	cmp	r0, #0
1a0051d2:	f47e af64 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a0051d6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0051d8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0051dc:	f7ff b955 	b.w	1a00448a <_svfprintf_r+0x5aa>
1a0051e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0051e2:	6812      	ldr	r2, [r2, #0]
1a0051e4:	9309      	str	r3, [sp, #36]	; 0x24
1a0051e6:	9b04      	ldr	r3, [sp, #16]
1a0051e8:	6013      	str	r3, [r2, #0]
1a0051ea:	465e      	mov	r6, fp
1a0051ec:	f7ff b818 	b.w	1a004220 <_svfprintf_r+0x340>
1a0051f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0051f2:	9915      	ldr	r1, [sp, #84]	; 0x54
1a0051f4:	f8c9 1000 	str.w	r1, [r9]
1a0051f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a0051fa:	f8c9 1004 	str.w	r1, [r9, #4]
1a0051fe:	3201      	adds	r2, #1
1a005200:	440c      	add	r4, r1
1a005202:	2a07      	cmp	r2, #7
1a005204:	942a      	str	r4, [sp, #168]	; 0xa8
1a005206:	9229      	str	r2, [sp, #164]	; 0xa4
1a005208:	f300 80ae 	bgt.w	1a005368 <_svfprintf_r+0x1488>
1a00520c:	f109 0908 	add.w	r9, r9, #8
1a005210:	2b00      	cmp	r3, #0
1a005212:	daa9      	bge.n	1a005168 <_svfprintf_r+0x1288>
1a005214:	425d      	negs	r5, r3
1a005216:	3310      	adds	r3, #16
1a005218:	4b16      	ldr	r3, [pc, #88]	; (1a005274 <_svfprintf_r+0x1394>)
1a00521a:	f280 8287 	bge.w	1a00572c <_svfprintf_r+0x184c>
1a00521e:	4619      	mov	r1, r3
1a005220:	2710      	movs	r7, #16
1a005222:	4623      	mov	r3, r4
1a005224:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
1a005228:	460c      	mov	r4, r1
1a00522a:	e005      	b.n	1a005238 <_svfprintf_r+0x1358>
1a00522c:	f109 0908 	add.w	r9, r9, #8
1a005230:	3d10      	subs	r5, #16
1a005232:	2d10      	cmp	r5, #16
1a005234:	f340 8277 	ble.w	1a005726 <_svfprintf_r+0x1846>
1a005238:	3201      	adds	r2, #1
1a00523a:	3310      	adds	r3, #16
1a00523c:	2a07      	cmp	r2, #7
1a00523e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a005242:	e9c9 4700 	strd	r4, r7, [r9]
1a005246:	ddf1      	ble.n	1a00522c <_svfprintf_r+0x134c>
1a005248:	aa28      	add	r2, sp, #160	; 0xa0
1a00524a:	4651      	mov	r1, sl
1a00524c:	4640      	mov	r0, r8
1a00524e:	f002 f90f 	bl	1a007470 <__ssprint_r>
1a005252:	2800      	cmp	r0, #0
1a005254:	f47e af23 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a005258:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a00525c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a005260:	e7e6      	b.n	1a005230 <_svfprintf_r+0x1350>
1a005262:	4630      	mov	r0, r6
1a005264:	f7fe fdcc 	bl	1a003e00 <strlen>
1a005268:	46aa      	mov	sl, r5
1a00526a:	4607      	mov	r7, r0
1a00526c:	f7ff b80c 	b.w	1a004288 <_svfprintf_r+0x3a8>
1a005270:	1a007b84 	.word	0x1a007b84
1a005274:	1a007ba0 	.word	0x1a007ba0
1a005278:	1a007b8c 	.word	0x1a007b8c
1a00527c:	4622      	mov	r2, r4
1a00527e:	461c      	mov	r4, r3
1a005280:	4613      	mov	r3, r2
1a005282:	462a      	mov	r2, r5
1a005284:	3201      	adds	r2, #1
1a005286:	920a      	str	r2, [sp, #40]	; 0x28
1a005288:	f107 0208 	add.w	r2, r7, #8
1a00528c:	e9c7 3800 	strd	r3, r8, [r7]
1a005290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005292:	9329      	str	r3, [sp, #164]	; 0xa4
1a005294:	4444      	add	r4, r8
1a005296:	2b07      	cmp	r3, #7
1a005298:	942a      	str	r4, [sp, #168]	; 0xa8
1a00529a:	f73f af12 	bgt.w	1a0050c2 <_svfprintf_r+0x11e2>
1a00529e:	3301      	adds	r3, #1
1a0052a0:	930a      	str	r3, [sp, #40]	; 0x28
1a0052a2:	f102 0908 	add.w	r9, r2, #8
1a0052a6:	4617      	mov	r7, r2
1a0052a8:	f7ff bbab 	b.w	1a004a02 <_svfprintf_r+0xb22>
1a0052ac:	9f02      	ldr	r7, [sp, #8]
1a0052ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0052b0:	f417 7f00 	tst.w	r7, #512	; 0x200
1a0052b4:	d044      	beq.n	1a005340 <_svfprintf_r+0x1460>
1a0052b6:	f993 4000 	ldrsb.w	r4, [r3]
1a0052ba:	9209      	str	r2, [sp, #36]	; 0x24
1a0052bc:	17e5      	asrs	r5, r4, #31
1a0052be:	4622      	mov	r2, r4
1a0052c0:	462b      	mov	r3, r5
1a0052c2:	f7ff b81c 	b.w	1a0042fe <_svfprintf_r+0x41e>
1a0052c6:	9f02      	ldr	r7, [sp, #8]
1a0052c8:	05b9      	lsls	r1, r7, #22
1a0052ca:	bf47      	ittee	mi
1a0052cc:	9209      	strmi	r2, [sp, #36]	; 0x24
1a0052ce:	b2e4      	uxtbmi	r4, r4
1a0052d0:	9f02      	ldrpl	r7, [sp, #8]
1a0052d2:	9209      	strpl	r2, [sp, #36]	; 0x24
1a0052d4:	2500      	movs	r5, #0
1a0052d6:	f7fe bff7 	b.w	1a0042c8 <_svfprintf_r+0x3e8>
1a0052da:	9f02      	ldr	r7, [sp, #8]
1a0052dc:	9209      	str	r2, [sp, #36]	; 0x24
1a0052de:	05b8      	lsls	r0, r7, #22
1a0052e0:	bf4c      	ite	mi
1a0052e2:	b2e4      	uxtbmi	r4, r4
1a0052e4:	9f02      	ldrpl	r7, [sp, #8]
1a0052e6:	2500      	movs	r5, #0
1a0052e8:	2301      	movs	r3, #1
1a0052ea:	f7fe bf4f 	b.w	1a00418c <_svfprintf_r+0x2ac>
1a0052ee:	4621      	mov	r1, r4
1a0052f0:	461c      	mov	r4, r3
1a0052f2:	460b      	mov	r3, r1
1a0052f4:	3201      	adds	r2, #1
1a0052f6:	442c      	add	r4, r5
1a0052f8:	2a07      	cmp	r2, #7
1a0052fa:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0052fe:	e9c9 3500 	strd	r3, r5, [r9]
1a005302:	dc42      	bgt.n	1a00538a <_svfprintf_r+0x14aa>
1a005304:	f109 0908 	add.w	r9, r9, #8
1a005308:	e424      	b.n	1a004b54 <_svfprintf_r+0xc74>
1a00530a:	222d      	movs	r2, #45	; 0x2d
1a00530c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a005310:	f7ff b95d 	b.w	1a0045ce <_svfprintf_r+0x6ee>
1a005314:	aa28      	add	r2, sp, #160	; 0xa0
1a005316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00531a:	f002 f8a9 	bl	1a007470 <__ssprint_r>
1a00531e:	2800      	cmp	r0, #0
1a005320:	f47e aebd 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a005324:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005326:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005328:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00532c:	e703      	b.n	1a005136 <_svfprintf_r+0x1256>
1a00532e:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005330:	18b5      	adds	r5, r6, r2
1a005332:	eba5 050a 	sub.w	r5, r5, sl
1a005336:	1ad3      	subs	r3, r2, r3
1a005338:	429d      	cmp	r5, r3
1a00533a:	bfa8      	it	ge
1a00533c:	461d      	movge	r5, r3
1a00533e:	e440      	b.n	1a004bc2 <_svfprintf_r+0xce2>
1a005340:	681c      	ldr	r4, [r3, #0]
1a005342:	9209      	str	r2, [sp, #36]	; 0x24
1a005344:	17e5      	asrs	r5, r4, #31
1a005346:	9f02      	ldr	r7, [sp, #8]
1a005348:	4622      	mov	r2, r4
1a00534a:	462b      	mov	r3, r5
1a00534c:	f7fe bfd7 	b.w	1a0042fe <_svfprintf_r+0x41e>
1a005350:	b2e4      	uxtb	r4, r4
1a005352:	2500      	movs	r5, #0
1a005354:	f7fe bec2 	b.w	1a0040dc <_svfprintf_r+0x1fc>
1a005358:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a00535a:	9309      	str	r3, [sp, #36]	; 0x24
1a00535c:	6812      	ldr	r2, [r2, #0]
1a00535e:	9b04      	ldr	r3, [sp, #16]
1a005360:	8013      	strh	r3, [r2, #0]
1a005362:	465e      	mov	r6, fp
1a005364:	f7fe bf5c 	b.w	1a004220 <_svfprintf_r+0x340>
1a005368:	aa28      	add	r2, sp, #160	; 0xa0
1a00536a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00536e:	f002 f87f 	bl	1a007470 <__ssprint_r>
1a005372:	2800      	cmp	r0, #0
1a005374:	f47e ae93 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a005378:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00537a:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a00537e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a005382:	e745      	b.n	1a005210 <_svfprintf_r+0x1330>
1a005384:	f04f 0a06 	mov.w	sl, #6
1a005388:	e4fc      	b.n	1a004d84 <_svfprintf_r+0xea4>
1a00538a:	aa28      	add	r2, sp, #160	; 0xa0
1a00538c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a005390:	f002 f86e 	bl	1a007470 <__ssprint_r>
1a005394:	2800      	cmp	r0, #0
1a005396:	f47e ae82 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a00539a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00539c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0053a0:	f7ff bbd8 	b.w	1a004b54 <_svfprintf_r+0xc74>
1a0053a4:	9f02      	ldr	r7, [sp, #8]
1a0053a6:	f7ff b97e 	b.w	1a0046a6 <_svfprintf_r+0x7c6>
1a0053aa:	46b2      	mov	sl, r6
1a0053ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0053ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a0053b0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a0053b4:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0053b8:	18f3      	adds	r3, r6, r3
1a0053ba:	459a      	cmp	sl, r3
1a0053bc:	460c      	mov	r4, r1
1a0053be:	4691      	mov	r9, r2
1a0053c0:	bf28      	it	cs
1a0053c2:	469a      	movcs	sl, r3
1a0053c4:	f7ff bbcd 	b.w	1a004b62 <_svfprintf_r+0xc82>
1a0053c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0053ca:	1cda      	adds	r2, r3, #3
1a0053cc:	db01      	blt.n	1a0053d2 <_svfprintf_r+0x14f2>
1a0053ce:	459a      	cmp	sl, r3
1a0053d0:	da05      	bge.n	1a0053de <_svfprintf_r+0x14fe>
1a0053d2:	f1a8 0802 	sub.w	r8, r8, #2
1a0053d6:	f028 0320 	bic.w	r3, r8, #32
1a0053da:	9303      	str	r3, [sp, #12]
1a0053dc:	e50a      	b.n	1a004df4 <_svfprintf_r+0xf14>
1a0053de:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0053e0:	4619      	mov	r1, r3
1a0053e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0053e4:	4299      	cmp	r1, r3
1a0053e6:	f300 8159 	bgt.w	1a00569c <_svfprintf_r+0x17bc>
1a0053ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0053ec:	07d7      	lsls	r7, r2, #31
1a0053ee:	f140 81c9 	bpl.w	1a005784 <_svfprintf_r+0x18a4>
1a0053f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0053f4:	189f      	adds	r7, r3, r2
1a0053f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0053f8:	055d      	lsls	r5, r3, #21
1a0053fa:	d503      	bpl.n	1a005404 <_svfprintf_r+0x1524>
1a0053fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0053fe:	2b00      	cmp	r3, #0
1a005400:	f300 81f6 	bgt.w	1a0057f0 <_svfprintf_r+0x1910>
1a005404:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a005408:	9303      	str	r3, [sp, #12]
1a00540a:	f04f 0867 	mov.w	r8, #103	; 0x67
1a00540e:	2300      	movs	r3, #0
1a005410:	930c      	str	r3, [sp, #48]	; 0x30
1a005412:	930f      	str	r3, [sp, #60]	; 0x3c
1a005414:	e551      	b.n	1a004eba <_svfprintf_r+0xfda>
1a005416:	222d      	movs	r2, #45	; 0x2d
1a005418:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a00541c:	f04f 0a00 	mov.w	sl, #0
1a005420:	f7fe bf41 	b.w	1a0042a6 <_svfprintf_r+0x3c6>
1a005424:	aa28      	add	r2, sp, #160	; 0xa0
1a005426:	4649      	mov	r1, r9
1a005428:	4658      	mov	r0, fp
1a00542a:	f002 f821 	bl	1a007470 <__ssprint_r>
1a00542e:	2800      	cmp	r0, #0
1a005430:	f47e ae35 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a005434:	f898 3000 	ldrb.w	r3, [r8]
1a005438:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00543a:	aa2b      	add	r2, sp, #172	; 0xac
1a00543c:	441e      	add	r6, r3
1a00543e:	e607      	b.n	1a005050 <_svfprintf_r+0x1170>
1a005440:	aa28      	add	r2, sp, #160	; 0xa0
1a005442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a005446:	f002 f813 	bl	1a007470 <__ssprint_r>
1a00544a:	2800      	cmp	r0, #0
1a00544c:	f47e ae27 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a005450:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005452:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a005456:	f7ff bb75 	b.w	1a004b44 <_svfprintf_r+0xc64>
1a00545a:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a00545c:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a00545e:	1af6      	subs	r6, r6, r3
1a005460:	461a      	mov	r2, r3
1a005462:	4630      	mov	r0, r6
1a005464:	f001 ffca 	bl	1a0073fc <strncpy>
1a005468:	f898 3001 	ldrb.w	r3, [r8, #1]
1a00546c:	b10b      	cbz	r3, 1a005472 <_svfprintf_r+0x1592>
1a00546e:	f108 0801 	add.w	r8, r8, #1
1a005472:	220a      	movs	r2, #10
1a005474:	2300      	movs	r3, #0
1a005476:	4620      	mov	r0, r4
1a005478:	4629      	mov	r1, r5
1a00547a:	f04f 0b00 	mov.w	fp, #0
1a00547e:	f7fd fdfb 	bl	1a003078 <__aeabi_uldivmod>
1a005482:	f7ff b960 	b.w	1a004746 <_svfprintf_r+0x866>
1a005486:	aa28      	add	r2, sp, #160	; 0xa0
1a005488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00548c:	f001 fff0 	bl	1a007470 <__ssprint_r>
1a005490:	2800      	cmp	r0, #0
1a005492:	f47e ae04 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a005496:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005498:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00549a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00549e:	f7ff bb78 	b.w	1a004b92 <_svfprintf_r+0xcb2>
1a0054a2:	aa26      	add	r2, sp, #152	; 0x98
1a0054a4:	ab23      	add	r3, sp, #140	; 0x8c
1a0054a6:	e9cd 3200 	strd	r3, r2, [sp]
1a0054aa:	2103      	movs	r1, #3
1a0054ac:	ab22      	add	r3, sp, #136	; 0x88
1a0054ae:	4652      	mov	r2, sl
1a0054b0:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0054b4:	9806      	ldr	r0, [sp, #24]
1a0054b6:	f000 fac3 	bl	1a005a40 <_dtoa_r>
1a0054ba:	7803      	ldrb	r3, [r0, #0]
1a0054bc:	2b30      	cmp	r3, #48	; 0x30
1a0054be:	4606      	mov	r6, r0
1a0054c0:	f000 81cd 	beq.w	1a00585e <_svfprintf_r+0x197e>
1a0054c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0054c6:	4453      	add	r3, sl
1a0054c8:	18f4      	adds	r4, r6, r3
1a0054ca:	2200      	movs	r2, #0
1a0054cc:	2300      	movs	r3, #0
1a0054ce:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a0054d2:	f7fd fd4f 	bl	1a002f74 <__aeabi_dcmpeq>
1a0054d6:	b108      	cbz	r0, 1a0054dc <_svfprintf_r+0x15fc>
1a0054d8:	4627      	mov	r7, r4
1a0054da:	e47f      	b.n	1a004ddc <_svfprintf_r+0xefc>
1a0054dc:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a0054de:	42a7      	cmp	r7, r4
1a0054e0:	f4bf ac7c 	bcs.w	1a004ddc <_svfprintf_r+0xefc>
1a0054e4:	2230      	movs	r2, #48	; 0x30
1a0054e6:	1c7b      	adds	r3, r7, #1
1a0054e8:	9326      	str	r3, [sp, #152]	; 0x98
1a0054ea:	703a      	strb	r2, [r7, #0]
1a0054ec:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a0054ee:	42bc      	cmp	r4, r7
1a0054f0:	d8f9      	bhi.n	1a0054e6 <_svfprintf_r+0x1606>
1a0054f2:	e473      	b.n	1a004ddc <_svfprintf_r+0xefc>
1a0054f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0054f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a0054f8:	f003 0301 	and.w	r3, r3, #1
1a0054fc:	2a00      	cmp	r2, #0
1a0054fe:	ea43 030a 	orr.w	r3, r3, sl
1a005502:	f340 81bf 	ble.w	1a005884 <_svfprintf_r+0x19a4>
1a005506:	2b00      	cmp	r3, #0
1a005508:	f040 819a 	bne.w	1a005840 <_svfprintf_r+0x1960>
1a00550c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a00550e:	f04f 0866 	mov.w	r8, #102	; 0x66
1a005512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005514:	055a      	lsls	r2, r3, #21
1a005516:	f100 816d 	bmi.w	1a0057f4 <_svfprintf_r+0x1914>
1a00551a:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a00551e:	9303      	str	r3, [sp, #12]
1a005520:	e775      	b.n	1a00540e <_svfprintf_r+0x152e>
1a005522:	4657      	mov	r7, sl
1a005524:	f8cd a00c 	str.w	sl, [sp, #12]
1a005528:	9409      	str	r4, [sp, #36]	; 0x24
1a00552a:	4682      	mov	sl, r0
1a00552c:	900c      	str	r0, [sp, #48]	; 0x30
1a00552e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a005532:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005536:	f7fe beb3 	b.w	1a0042a0 <_svfprintf_r+0x3c0>
1a00553a:	2330      	movs	r3, #48	; 0x30
1a00553c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a005540:	2358      	movs	r3, #88	; 0x58
1a005542:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a005546:	9b02      	ldr	r3, [sp, #8]
1a005548:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
1a00554c:	f043 0302 	orr.w	r3, r3, #2
1a005550:	930a      	str	r3, [sp, #40]	; 0x28
1a005552:	f300 80dd 	bgt.w	1a005710 <_svfprintf_r+0x1830>
1a005556:	2300      	movs	r3, #0
1a005558:	9308      	str	r3, [sp, #32]
1a00555a:	ae3b      	add	r6, sp, #236	; 0xec
1a00555c:	9a02      	ldr	r2, [sp, #8]
1a00555e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a005560:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a005564:	9202      	str	r2, [sp, #8]
1a005566:	2b00      	cmp	r3, #0
1a005568:	f028 0220 	bic.w	r2, r8, #32
1a00556c:	9203      	str	r2, [sp, #12]
1a00556e:	f2c0 808c 	blt.w	1a00568a <_svfprintf_r+0x17aa>
1a005572:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005576:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a00557a:	2300      	movs	r3, #0
1a00557c:	931e      	str	r3, [sp, #120]	; 0x78
1a00557e:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a005582:	f000 811d 	beq.w	1a0057c0 <_svfprintf_r+0x18e0>
1a005586:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a00558a:	f47f ac0a 	bne.w	1a004da2 <_svfprintf_r+0xec2>
1a00558e:	a822      	add	r0, sp, #136	; 0x88
1a005590:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005594:	f001 fefc 	bl	1a007390 <frexp>
1a005598:	2200      	movs	r2, #0
1a00559a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00559e:	ec51 0b10 	vmov	r0, r1, d0
1a0055a2:	f7fd fa7f 	bl	1a002aa4 <__aeabi_dmul>
1a0055a6:	2200      	movs	r2, #0
1a0055a8:	2300      	movs	r3, #0
1a0055aa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0055ae:	f7fd fce1 	bl	1a002f74 <__aeabi_dcmpeq>
1a0055b2:	b108      	cbz	r0, 1a0055b8 <_svfprintf_r+0x16d8>
1a0055b4:	2301      	movs	r3, #1
1a0055b6:	9322      	str	r3, [sp, #136]	; 0x88
1a0055b8:	4bb6      	ldr	r3, [pc, #728]	; (1a005894 <_svfprintf_r+0x19b4>)
1a0055ba:	930b      	str	r3, [sp, #44]	; 0x2c
1a0055bc:	e9cd b80e 	strd	fp, r8, [sp, #56]	; 0x38
1a0055c0:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
1a0055c4:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a0055c8:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
1a0055cc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a0055d0:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a0055d4:	46b2      	mov	sl, r6
1a0055d6:	960c      	str	r6, [sp, #48]	; 0x30
1a0055d8:	e003      	b.n	1a0055e2 <_svfprintf_r+0x1702>
1a0055da:	f7fd fccb 	bl	1a002f74 <__aeabi_dcmpeq>
1a0055de:	bb20      	cbnz	r0, 1a00562a <_svfprintf_r+0x174a>
1a0055e0:	46ba      	mov	sl, r7
1a0055e2:	2200      	movs	r2, #0
1a0055e4:	4bac      	ldr	r3, [pc, #688]	; (1a005898 <_svfprintf_r+0x19b8>)
1a0055e6:	4640      	mov	r0, r8
1a0055e8:	4649      	mov	r1, r9
1a0055ea:	f7fd fa5b 	bl	1a002aa4 <__aeabi_dmul>
1a0055ee:	4689      	mov	r9, r1
1a0055f0:	4680      	mov	r8, r0
1a0055f2:	f002 f823 	bl	1a00763c <__aeabi_d2iz>
1a0055f6:	4606      	mov	r6, r0
1a0055f8:	f7fd f9ea 	bl	1a0029d0 <__aeabi_i2d>
1a0055fc:	4602      	mov	r2, r0
1a0055fe:	460b      	mov	r3, r1
1a005600:	4640      	mov	r0, r8
1a005602:	4649      	mov	r1, r9
1a005604:	f7fd f896 	bl	1a002734 <__aeabi_dsub>
1a005608:	4657      	mov	r7, sl
1a00560a:	f81b 4006 	ldrb.w	r4, [fp, r6]
1a00560e:	f807 4b01 	strb.w	r4, [r7], #1
1a005612:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a005616:	462c      	mov	r4, r5
1a005618:	4680      	mov	r8, r0
1a00561a:	4689      	mov	r9, r1
1a00561c:	f04f 0200 	mov.w	r2, #0
1a005620:	f04f 0300 	mov.w	r3, #0
1a005624:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a005628:	d1d7      	bne.n	1a0055da <_svfprintf_r+0x16fa>
1a00562a:	4640      	mov	r0, r8
1a00562c:	4649      	mov	r1, r9
1a00562e:	2200      	movs	r2, #0
1a005630:	4b9a      	ldr	r3, [pc, #616]	; (1a00589c <_svfprintf_r+0x19bc>)
1a005632:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
1a005636:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
1a00563a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a00563e:	4635      	mov	r5, r6
1a005640:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
1a005644:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a005646:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a00564a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00564e:	f7fd fcb9 	bl	1a002fc4 <__aeabi_dcmpgt>
1a005652:	2800      	cmp	r0, #0
1a005654:	d13f      	bne.n	1a0056d6 <_svfprintf_r+0x17f6>
1a005656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00565a:	2200      	movs	r2, #0
1a00565c:	4b8f      	ldr	r3, [pc, #572]	; (1a00589c <_svfprintf_r+0x19bc>)
1a00565e:	f7fd fc89 	bl	1a002f74 <__aeabi_dcmpeq>
1a005662:	b108      	cbz	r0, 1a005668 <_svfprintf_r+0x1788>
1a005664:	07e9      	lsls	r1, r5, #31
1a005666:	d436      	bmi.n	1a0056d6 <_svfprintf_r+0x17f6>
1a005668:	2c00      	cmp	r4, #0
1a00566a:	f6ff abb7 	blt.w	1a004ddc <_svfprintf_r+0xefc>
1a00566e:	1c63      	adds	r3, r4, #1
1a005670:	443b      	add	r3, r7
1a005672:	2230      	movs	r2, #48	; 0x30
1a005674:	f807 2b01 	strb.w	r2, [r7], #1
1a005678:	42bb      	cmp	r3, r7
1a00567a:	d1fb      	bne.n	1a005674 <_svfprintf_r+0x1794>
1a00567c:	f7ff bbae 	b.w	1a004ddc <_svfprintf_r+0xefc>
1a005680:	9b02      	ldr	r3, [sp, #8]
1a005682:	930a      	str	r3, [sp, #40]	; 0x28
1a005684:	2300      	movs	r3, #0
1a005686:	9308      	str	r3, [sp, #32]
1a005688:	9202      	str	r2, [sp, #8]
1a00568a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a00568e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a005692:	931d      	str	r3, [sp, #116]	; 0x74
1a005694:	232d      	movs	r3, #45	; 0x2d
1a005696:	911c      	str	r1, [sp, #112]	; 0x70
1a005698:	931e      	str	r3, [sp, #120]	; 0x78
1a00569a:	e770      	b.n	1a00557e <_svfprintf_r+0x169e>
1a00569c:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a0056a0:	189f      	adds	r7, r3, r2
1a0056a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0056a4:	2b00      	cmp	r3, #0
1a0056a6:	f340 80d1 	ble.w	1a00584c <_svfprintf_r+0x196c>
1a0056aa:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0056ae:	e730      	b.n	1a005512 <_svfprintf_r+0x1632>
1a0056b0:	aa28      	add	r2, sp, #160	; 0xa0
1a0056b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0056b6:	f001 fedb 	bl	1a007470 <__ssprint_r>
1a0056ba:	2800      	cmp	r0, #0
1a0056bc:	f47e acef 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a0056c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0056c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0056c4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0056c6:	1ad3      	subs	r3, r2, r3
1a0056c8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0056cc:	f7ff ba79 	b.w	1a004bc2 <_svfprintf_r+0xce2>
1a0056d0:	eb06 040a 	add.w	r4, r6, sl
1a0056d4:	e6f9      	b.n	1a0054ca <_svfprintf_r+0x15ea>
1a0056d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0056d8:	9326      	str	r3, [sp, #152]	; 0x98
1a0056da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0056dc:	f817 2c01 	ldrb.w	r2, [r7, #-1]
1a0056e0:	7bd9      	ldrb	r1, [r3, #15]
1a0056e2:	4291      	cmp	r1, r2
1a0056e4:	463b      	mov	r3, r7
1a0056e6:	d109      	bne.n	1a0056fc <_svfprintf_r+0x181c>
1a0056e8:	2030      	movs	r0, #48	; 0x30
1a0056ea:	f803 0c01 	strb.w	r0, [r3, #-1]
1a0056ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a0056f0:	1e5a      	subs	r2, r3, #1
1a0056f2:	9226      	str	r2, [sp, #152]	; 0x98
1a0056f4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a0056f8:	4291      	cmp	r1, r2
1a0056fa:	d0f6      	beq.n	1a0056ea <_svfprintf_r+0x180a>
1a0056fc:	2a39      	cmp	r2, #57	; 0x39
1a0056fe:	bf0b      	itete	eq
1a005700:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a005702:	3201      	addne	r2, #1
1a005704:	7a92      	ldrbeq	r2, [r2, #10]
1a005706:	b2d2      	uxtbne	r2, r2
1a005708:	f803 2c01 	strb.w	r2, [r3, #-1]
1a00570c:	f7ff bb66 	b.w	1a004ddc <_svfprintf_r+0xefc>
1a005710:	f10a 0101 	add.w	r1, sl, #1
1a005714:	9806      	ldr	r0, [sp, #24]
1a005716:	f7fd ff9f 	bl	1a003658 <_malloc_r>
1a00571a:	4606      	mov	r6, r0
1a00571c:	2800      	cmp	r0, #0
1a00571e:	f000 80ed 	beq.w	1a0058fc <_svfprintf_r+0x1a1c>
1a005722:	9008      	str	r0, [sp, #32]
1a005724:	e71a      	b.n	1a00555c <_svfprintf_r+0x167c>
1a005726:	4621      	mov	r1, r4
1a005728:	461c      	mov	r4, r3
1a00572a:	460b      	mov	r3, r1
1a00572c:	3201      	adds	r2, #1
1a00572e:	442c      	add	r4, r5
1a005730:	2a07      	cmp	r2, #7
1a005732:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a005736:	e9c9 3500 	strd	r3, r5, [r9]
1a00573a:	f77f ad13 	ble.w	1a005164 <_svfprintf_r+0x1284>
1a00573e:	aa28      	add	r2, sp, #160	; 0xa0
1a005740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a005744:	f001 fe94 	bl	1a007470 <__ssprint_r>
1a005748:	2800      	cmp	r0, #0
1a00574a:	f47e aca8 	bne.w	1a00409e <_svfprintf_r+0x1be>
1a00574e:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a005752:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a005756:	e507      	b.n	1a005168 <_svfprintf_r+0x1288>
1a005758:	f10a 0401 	add.w	r4, sl, #1
1a00575c:	a926      	add	r1, sp, #152	; 0x98
1a00575e:	ab23      	add	r3, sp, #140	; 0x8c
1a005760:	e9cd 3100 	strd	r3, r1, [sp]
1a005764:	4622      	mov	r2, r4
1a005766:	ab22      	add	r3, sp, #136	; 0x88
1a005768:	2102      	movs	r1, #2
1a00576a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00576e:	9806      	ldr	r0, [sp, #24]
1a005770:	f000 f966 	bl	1a005a40 <_dtoa_r>
1a005774:	4606      	mov	r6, r0
1a005776:	4434      	add	r4, r6
1a005778:	e6a7      	b.n	1a0054ca <_svfprintf_r+0x15ea>
1a00577a:	2330      	movs	r3, #48	; 0x30
1a00577c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a005780:	2378      	movs	r3, #120	; 0x78
1a005782:	e6de      	b.n	1a005542 <_svfprintf_r+0x1662>
1a005784:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a005786:	e636      	b.n	1a0053f6 <_svfprintf_r+0x1516>
1a005788:	2900      	cmp	r1, #0
1a00578a:	f040 8098 	bne.w	1a0058be <_svfprintf_r+0x19de>
1a00578e:	2330      	movs	r3, #48	; 0x30
1a005790:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a005794:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a005798:	3230      	adds	r2, #48	; 0x30
1a00579a:	f803 2b01 	strb.w	r2, [r3], #1
1a00579e:	aa24      	add	r2, sp, #144	; 0x90
1a0057a0:	1a9b      	subs	r3, r3, r2
1a0057a2:	9316      	str	r3, [sp, #88]	; 0x58
1a0057a4:	f7ff bb73 	b.w	1a004e8e <_svfprintf_r+0xfae>
1a0057a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0057aa:	4e3d      	ldr	r6, [pc, #244]	; (1a0058a0 <_svfprintf_r+0x19c0>)
1a0057ac:	2b00      	cmp	r3, #0
1a0057ae:	bfb6      	itet	lt
1a0057b0:	222d      	movlt	r2, #45	; 0x2d
1a0057b2:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a0057b6:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a0057ba:	4b3a      	ldr	r3, [pc, #232]	; (1a0058a4 <_svfprintf_r+0x19c4>)
1a0057bc:	f7fe bf09 	b.w	1a0045d2 <_svfprintf_r+0x6f2>
1a0057c0:	a822      	add	r0, sp, #136	; 0x88
1a0057c2:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0057c6:	f001 fde3 	bl	1a007390 <frexp>
1a0057ca:	2200      	movs	r2, #0
1a0057cc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a0057d0:	ec51 0b10 	vmov	r0, r1, d0
1a0057d4:	f7fd f966 	bl	1a002aa4 <__aeabi_dmul>
1a0057d8:	2200      	movs	r2, #0
1a0057da:	2300      	movs	r3, #0
1a0057dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0057e0:	f7fd fbc8 	bl	1a002f74 <__aeabi_dcmpeq>
1a0057e4:	b108      	cbz	r0, 1a0057ea <_svfprintf_r+0x190a>
1a0057e6:	2301      	movs	r3, #1
1a0057e8:	9322      	str	r3, [sp, #136]	; 0x88
1a0057ea:	4b2f      	ldr	r3, [pc, #188]	; (1a0058a8 <_svfprintf_r+0x19c8>)
1a0057ec:	930b      	str	r3, [sp, #44]	; 0x2c
1a0057ee:	e6e5      	b.n	1a0055bc <_svfprintf_r+0x16dc>
1a0057f0:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0057f4:	9818      	ldr	r0, [sp, #96]	; 0x60
1a0057f6:	2200      	movs	r2, #0
1a0057f8:	920c      	str	r2, [sp, #48]	; 0x30
1a0057fa:	920f      	str	r2, [sp, #60]	; 0x3c
1a0057fc:	7803      	ldrb	r3, [r0, #0]
1a0057fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a005800:	2bff      	cmp	r3, #255	; 0xff
1a005802:	d00c      	beq.n	1a00581e <_svfprintf_r+0x193e>
1a005804:	4293      	cmp	r3, r2
1a005806:	da0a      	bge.n	1a00581e <_svfprintf_r+0x193e>
1a005808:	7841      	ldrb	r1, [r0, #1]
1a00580a:	1ad2      	subs	r2, r2, r3
1a00580c:	b1a1      	cbz	r1, 1a005838 <_svfprintf_r+0x1958>
1a00580e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005810:	3301      	adds	r3, #1
1a005812:	930f      	str	r3, [sp, #60]	; 0x3c
1a005814:	460b      	mov	r3, r1
1a005816:	2bff      	cmp	r3, #255	; 0xff
1a005818:	f100 0001 	add.w	r0, r0, #1
1a00581c:	d1f2      	bne.n	1a005804 <_svfprintf_r+0x1924>
1a00581e:	920e      	str	r2, [sp, #56]	; 0x38
1a005820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005824:	9018      	str	r0, [sp, #96]	; 0x60
1a005826:	4413      	add	r3, r2
1a005828:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a00582a:	fb02 7703 	mla	r7, r2, r3, r7
1a00582e:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a005832:	9303      	str	r3, [sp, #12]
1a005834:	f7ff bb41 	b.w	1a004eba <_svfprintf_r+0xfda>
1a005838:	990c      	ldr	r1, [sp, #48]	; 0x30
1a00583a:	3101      	adds	r1, #1
1a00583c:	910c      	str	r1, [sp, #48]	; 0x30
1a00583e:	e7df      	b.n	1a005800 <_svfprintf_r+0x1920>
1a005840:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a005842:	18d7      	adds	r7, r2, r3
1a005844:	4457      	add	r7, sl
1a005846:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00584a:	e662      	b.n	1a005512 <_svfprintf_r+0x1632>
1a00584c:	f1c3 0301 	rsb	r3, r3, #1
1a005850:	441f      	add	r7, r3
1a005852:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a005856:	9303      	str	r3, [sp, #12]
1a005858:	f04f 0867 	mov.w	r8, #103	; 0x67
1a00585c:	e5d7      	b.n	1a00540e <_svfprintf_r+0x152e>
1a00585e:	2200      	movs	r2, #0
1a005860:	2300      	movs	r3, #0
1a005862:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a005866:	f7fd fb85 	bl	1a002f74 <__aeabi_dcmpeq>
1a00586a:	2800      	cmp	r0, #0
1a00586c:	f47f ae2a 	bne.w	1a0054c4 <_svfprintf_r+0x15e4>
1a005870:	f1ca 0301 	rsb	r3, sl, #1
1a005874:	9322      	str	r3, [sp, #136]	; 0x88
1a005876:	e626      	b.n	1a0054c6 <_svfprintf_r+0x15e6>
1a005878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00587a:	07db      	lsls	r3, r3, #31
1a00587c:	f57f ab10 	bpl.w	1a004ea0 <_svfprintf_r+0xfc0>
1a005880:	f7ff bb0c 	b.w	1a004e9c <_svfprintf_r+0xfbc>
1a005884:	b993      	cbnz	r3, 1a0058ac <_svfprintf_r+0x19cc>
1a005886:	2301      	movs	r3, #1
1a005888:	9303      	str	r3, [sp, #12]
1a00588a:	461f      	mov	r7, r3
1a00588c:	f04f 0866 	mov.w	r8, #102	; 0x66
1a005890:	e5bd      	b.n	1a00540e <_svfprintf_r+0x152e>
1a005892:	bf00      	nop
1a005894:	1a007a48 	.word	0x1a007a48
1a005898:	40300000 	.word	0x40300000
1a00589c:	3fe00000 	.word	0x3fe00000
1a0058a0:	1a007b68 	.word	0x1a007b68
1a0058a4:	1a007b6c 	.word	0x1a007b6c
1a0058a8:	1a007b70 	.word	0x1a007b70
1a0058ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0058ae:	1c5f      	adds	r7, r3, #1
1a0058b0:	4457      	add	r7, sl
1a0058b2:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a0058b6:	9303      	str	r3, [sp, #12]
1a0058b8:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0058bc:	e5a7      	b.n	1a00540e <_svfprintf_r+0x152e>
1a0058be:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a0058c2:	e769      	b.n	1a005798 <_svfprintf_r+0x18b8>
1a0058c4:	464a      	mov	r2, r9
1a0058c6:	e4e1      	b.n	1a00528c <_svfprintf_r+0x13ac>
1a0058c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0058ca:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a0058ce:	f853 0b04 	ldr.w	r0, [r3], #4
1a0058d2:	9309      	str	r3, [sp, #36]	; 0x24
1a0058d4:	4693      	mov	fp, r2
1a0058d6:	ea40 7ae0 	orr.w	sl, r0, r0, asr #31
1a0058da:	f7fe bb61 	b.w	1a003fa0 <_svfprintf_r+0xc0>
1a0058de:	9a06      	ldr	r2, [sp, #24]
1a0058e0:	230c      	movs	r3, #12
1a0058e2:	6013      	str	r3, [r2, #0]
1a0058e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0058e8:	9304      	str	r3, [sp, #16]
1a0058ea:	f7fe bbe7 	b.w	1a0040bc <_svfprintf_r+0x1dc>
1a0058ee:	4654      	mov	r4, sl
1a0058f0:	4434      	add	r4, r6
1a0058f2:	e5ea      	b.n	1a0054ca <_svfprintf_r+0x15ea>
1a0058f4:	2302      	movs	r3, #2
1a0058f6:	9316      	str	r3, [sp, #88]	; 0x58
1a0058f8:	f7ff bac9 	b.w	1a004e8e <_svfprintf_r+0xfae>
1a0058fc:	9a07      	ldr	r2, [sp, #28]
1a0058fe:	8993      	ldrh	r3, [r2, #12]
1a005900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005904:	8193      	strh	r3, [r2, #12]
1a005906:	f7fe bbd2 	b.w	1a0040ae <_svfprintf_r+0x1ce>
1a00590a:	461f      	mov	r7, r3
1a00590c:	f7ff ba14 	b.w	1a004d38 <_svfprintf_r+0xe58>
1a005910:	461f      	mov	r7, r3
1a005912:	f7ff baeb 	b.w	1a004eec <_svfprintf_r+0x100c>
1a005916:	461f      	mov	r7, r3
1a005918:	f7ff bada 	b.w	1a004ed0 <_svfprintf_r+0xff0>

1a00591c <quorem>:
1a00591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005920:	6903      	ldr	r3, [r0, #16]
1a005922:	690f      	ldr	r7, [r1, #16]
1a005924:	42bb      	cmp	r3, r7
1a005926:	b083      	sub	sp, #12
1a005928:	f2c0 8086 	blt.w	1a005a38 <quorem+0x11c>
1a00592c:	3f01      	subs	r7, #1
1a00592e:	f101 0614 	add.w	r6, r1, #20
1a005932:	f100 0a14 	add.w	sl, r0, #20
1a005936:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a00593a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a00593e:	00bc      	lsls	r4, r7, #2
1a005940:	3301      	adds	r3, #1
1a005942:	9400      	str	r4, [sp, #0]
1a005944:	eb06 0904 	add.w	r9, r6, r4
1a005948:	429a      	cmp	r2, r3
1a00594a:	4454      	add	r4, sl
1a00594c:	fbb2 f8f3 	udiv	r8, r2, r3
1a005950:	9401      	str	r4, [sp, #4]
1a005952:	d33a      	bcc.n	1a0059ca <quorem+0xae>
1a005954:	2500      	movs	r5, #0
1a005956:	462a      	mov	r2, r5
1a005958:	46b6      	mov	lr, r6
1a00595a:	46d4      	mov	ip, sl
1a00595c:	f85e 4b04 	ldr.w	r4, [lr], #4
1a005960:	f8dc 3000 	ldr.w	r3, [ip]
1a005964:	fa1f fb84 	uxth.w	fp, r4
1a005968:	fb08 550b 	mla	r5, r8, fp, r5
1a00596c:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a005970:	0c24      	lsrs	r4, r4, #16
1a005972:	fb08 b404 	mla	r4, r8, r4, fp
1a005976:	b2ad      	uxth	r5, r5
1a005978:	1b55      	subs	r5, r2, r5
1a00597a:	b2a2      	uxth	r2, r4
1a00597c:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a005980:	fa15 f383 	uxtah	r3, r5, r3
1a005984:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a005988:	b29b      	uxth	r3, r3
1a00598a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00598e:	45f1      	cmp	r9, lr
1a005990:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a005994:	f84c 3b04 	str.w	r3, [ip], #4
1a005998:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00599c:	d2de      	bcs.n	1a00595c <quorem+0x40>
1a00599e:	9b00      	ldr	r3, [sp, #0]
1a0059a0:	f85a 3003 	ldr.w	r3, [sl, r3]
1a0059a4:	b98b      	cbnz	r3, 1a0059ca <quorem+0xae>
1a0059a6:	9a01      	ldr	r2, [sp, #4]
1a0059a8:	1f13      	subs	r3, r2, #4
1a0059aa:	459a      	cmp	sl, r3
1a0059ac:	d20c      	bcs.n	1a0059c8 <quorem+0xac>
1a0059ae:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a0059b2:	b94b      	cbnz	r3, 1a0059c8 <quorem+0xac>
1a0059b4:	f1a2 0308 	sub.w	r3, r2, #8
1a0059b8:	e002      	b.n	1a0059c0 <quorem+0xa4>
1a0059ba:	681a      	ldr	r2, [r3, #0]
1a0059bc:	3b04      	subs	r3, #4
1a0059be:	b91a      	cbnz	r2, 1a0059c8 <quorem+0xac>
1a0059c0:	459a      	cmp	sl, r3
1a0059c2:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a0059c6:	d3f8      	bcc.n	1a0059ba <quorem+0x9e>
1a0059c8:	6107      	str	r7, [r0, #16]
1a0059ca:	4604      	mov	r4, r0
1a0059cc:	f001 fa32 	bl	1a006e34 <__mcmp>
1a0059d0:	2800      	cmp	r0, #0
1a0059d2:	db2d      	blt.n	1a005a30 <quorem+0x114>
1a0059d4:	f108 0801 	add.w	r8, r8, #1
1a0059d8:	4650      	mov	r0, sl
1a0059da:	2300      	movs	r3, #0
1a0059dc:	f856 1b04 	ldr.w	r1, [r6], #4
1a0059e0:	6805      	ldr	r5, [r0, #0]
1a0059e2:	b28a      	uxth	r2, r1
1a0059e4:	1a9a      	subs	r2, r3, r2
1a0059e6:	0c0b      	lsrs	r3, r1, #16
1a0059e8:	fa12 f285 	uxtah	r2, r2, r5
1a0059ec:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a0059f0:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a0059f4:	b292      	uxth	r2, r2
1a0059f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0059fa:	45b1      	cmp	r9, r6
1a0059fc:	f840 2b04 	str.w	r2, [r0], #4
1a005a00:	ea4f 4323 	mov.w	r3, r3, asr #16
1a005a04:	d2ea      	bcs.n	1a0059dc <quorem+0xc0>
1a005a06:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a005a0a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a005a0e:	b97a      	cbnz	r2, 1a005a30 <quorem+0x114>
1a005a10:	1f1a      	subs	r2, r3, #4
1a005a12:	4592      	cmp	sl, r2
1a005a14:	d20b      	bcs.n	1a005a2e <quorem+0x112>
1a005a16:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a005a1a:	b942      	cbnz	r2, 1a005a2e <quorem+0x112>
1a005a1c:	3b08      	subs	r3, #8
1a005a1e:	e002      	b.n	1a005a26 <quorem+0x10a>
1a005a20:	681a      	ldr	r2, [r3, #0]
1a005a22:	3b04      	subs	r3, #4
1a005a24:	b91a      	cbnz	r2, 1a005a2e <quorem+0x112>
1a005a26:	459a      	cmp	sl, r3
1a005a28:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a005a2c:	d3f8      	bcc.n	1a005a20 <quorem+0x104>
1a005a2e:	6127      	str	r7, [r4, #16]
1a005a30:	4640      	mov	r0, r8
1a005a32:	b003      	add	sp, #12
1a005a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005a38:	2000      	movs	r0, #0
1a005a3a:	b003      	add	sp, #12
1a005a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a005a40 <_dtoa_r>:
1a005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005a44:	ec57 6b10 	vmov	r6, r7, d0
1a005a48:	b097      	sub	sp, #92	; 0x5c
1a005a4a:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a005a4c:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a005a4e:	9102      	str	r1, [sp, #8]
1a005a50:	4682      	mov	sl, r0
1a005a52:	920a      	str	r2, [sp, #40]	; 0x28
1a005a54:	9307      	str	r3, [sp, #28]
1a005a56:	e9cd 6700 	strd	r6, r7, [sp]
1a005a5a:	b155      	cbz	r5, 1a005a72 <_dtoa_r+0x32>
1a005a5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a005a5e:	606a      	str	r2, [r5, #4]
1a005a60:	2301      	movs	r3, #1
1a005a62:	4093      	lsls	r3, r2
1a005a64:	60ab      	str	r3, [r5, #8]
1a005a66:	4629      	mov	r1, r5
1a005a68:	f000 fff8 	bl	1a006a5c <_Bfree>
1a005a6c:	2300      	movs	r3, #0
1a005a6e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a005a72:	1e3e      	subs	r6, r7, #0
1a005a74:	bfb4      	ite	lt
1a005a76:	2301      	movlt	r3, #1
1a005a78:	2300      	movge	r3, #0
1a005a7a:	6023      	str	r3, [r4, #0]
1a005a7c:	4b76      	ldr	r3, [pc, #472]	; (1a005c58 <_dtoa_r+0x218>)
1a005a7e:	bfbc      	itt	lt
1a005a80:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a005a84:	9601      	strlt	r6, [sp, #4]
1a005a86:	43b3      	bics	r3, r6
1a005a88:	f000 80ae 	beq.w	1a005be8 <_dtoa_r+0x1a8>
1a005a8c:	ed9d 7b00 	vldr	d7, [sp]
1a005a90:	2200      	movs	r2, #0
1a005a92:	2300      	movs	r3, #0
1a005a94:	ec51 0b17 	vmov	r0, r1, d7
1a005a98:	ed8d 7b04 	vstr	d7, [sp, #16]
1a005a9c:	f7fd fa6a 	bl	1a002f74 <__aeabi_dcmpeq>
1a005aa0:	4605      	mov	r5, r0
1a005aa2:	b178      	cbz	r0, 1a005ac4 <_dtoa_r+0x84>
1a005aa4:	9a07      	ldr	r2, [sp, #28]
1a005aa6:	2301      	movs	r3, #1
1a005aa8:	6013      	str	r3, [r2, #0]
1a005aaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005aac:	2b00      	cmp	r3, #0
1a005aae:	f000 8313 	beq.w	1a0060d8 <_dtoa_r+0x698>
1a005ab2:	4b6a      	ldr	r3, [pc, #424]	; (1a005c5c <_dtoa_r+0x21c>)
1a005ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a005ab6:	6013      	str	r3, [r2, #0]
1a005ab8:	3b01      	subs	r3, #1
1a005aba:	9303      	str	r3, [sp, #12]
1a005abc:	9803      	ldr	r0, [sp, #12]
1a005abe:	b017      	add	sp, #92	; 0x5c
1a005ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005ac4:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a005ac8:	aa14      	add	r2, sp, #80	; 0x50
1a005aca:	a915      	add	r1, sp, #84	; 0x54
1a005acc:	ec48 7b10 	vmov	d0, r7, r8
1a005ad0:	4650      	mov	r0, sl
1a005ad2:	f001 fa47 	bl	1a006f64 <__d2b>
1a005ad6:	0d34      	lsrs	r4, r6, #20
1a005ad8:	4683      	mov	fp, r0
1a005ada:	f040 809b 	bne.w	1a005c14 <_dtoa_r+0x1d4>
1a005ade:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a005ae2:	442c      	add	r4, r5
1a005ae4:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a005ae8:	2b20      	cmp	r3, #32
1a005aea:	f340 83bb 	ble.w	1a006264 <_dtoa_r+0x824>
1a005aee:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a005af2:	409e      	lsls	r6, r3
1a005af4:	9b00      	ldr	r3, [sp, #0]
1a005af6:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a005afa:	fa23 f000 	lsr.w	r0, r3, r0
1a005afe:	4330      	orrs	r0, r6
1a005b00:	f7fc ff56 	bl	1a0029b0 <__aeabi_ui2d>
1a005b04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a005b08:	2101      	movs	r1, #1
1a005b0a:	4602      	mov	r2, r0
1a005b0c:	3c01      	subs	r4, #1
1a005b0e:	910e      	str	r1, [sp, #56]	; 0x38
1a005b10:	4610      	mov	r0, r2
1a005b12:	4619      	mov	r1, r3
1a005b14:	2200      	movs	r2, #0
1a005b16:	4b52      	ldr	r3, [pc, #328]	; (1a005c60 <_dtoa_r+0x220>)
1a005b18:	f7fc fe0c 	bl	1a002734 <__aeabi_dsub>
1a005b1c:	a348      	add	r3, pc, #288	; (adr r3, 1a005c40 <_dtoa_r+0x200>)
1a005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005b22:	f7fc ffbf 	bl	1a002aa4 <__aeabi_dmul>
1a005b26:	a348      	add	r3, pc, #288	; (adr r3, 1a005c48 <_dtoa_r+0x208>)
1a005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005b2c:	f7fc fe04 	bl	1a002738 <__adddf3>
1a005b30:	4606      	mov	r6, r0
1a005b32:	4620      	mov	r0, r4
1a005b34:	460f      	mov	r7, r1
1a005b36:	f7fc ff4b 	bl	1a0029d0 <__aeabi_i2d>
1a005b3a:	a345      	add	r3, pc, #276	; (adr r3, 1a005c50 <_dtoa_r+0x210>)
1a005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005b40:	f7fc ffb0 	bl	1a002aa4 <__aeabi_dmul>
1a005b44:	4602      	mov	r2, r0
1a005b46:	460b      	mov	r3, r1
1a005b48:	4630      	mov	r0, r6
1a005b4a:	4639      	mov	r1, r7
1a005b4c:	f7fc fdf4 	bl	1a002738 <__adddf3>
1a005b50:	4606      	mov	r6, r0
1a005b52:	460f      	mov	r7, r1
1a005b54:	f001 fd72 	bl	1a00763c <__aeabi_d2iz>
1a005b58:	2200      	movs	r2, #0
1a005b5a:	4681      	mov	r9, r0
1a005b5c:	2300      	movs	r3, #0
1a005b5e:	4630      	mov	r0, r6
1a005b60:	4639      	mov	r1, r7
1a005b62:	f7fd fa11 	bl	1a002f88 <__aeabi_dcmplt>
1a005b66:	2800      	cmp	r0, #0
1a005b68:	f040 82a9 	bne.w	1a0060be <_dtoa_r+0x67e>
1a005b6c:	1b2c      	subs	r4, r5, r4
1a005b6e:	f1b9 0f16 	cmp.w	r9, #22
1a005b72:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a005b76:	f200 8296 	bhi.w	1a0060a6 <_dtoa_r+0x666>
1a005b7a:	4b3a      	ldr	r3, [pc, #232]	; (1a005c64 <_dtoa_r+0x224>)
1a005b7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005b88:	f7fd f9fe 	bl	1a002f88 <__aeabi_dcmplt>
1a005b8c:	2800      	cmp	r0, #0
1a005b8e:	d06f      	beq.n	1a005c70 <_dtoa_r+0x230>
1a005b90:	2300      	movs	r3, #0
1a005b92:	f1b8 0f00 	cmp.w	r8, #0
1a005b96:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a005b9a:	930d      	str	r3, [sp, #52]	; 0x34
1a005b9c:	f2c0 8289 	blt.w	1a0060b2 <_dtoa_r+0x672>
1a005ba0:	2300      	movs	r3, #0
1a005ba2:	9308      	str	r3, [sp, #32]
1a005ba4:	f1b9 0f00 	cmp.w	r9, #0
1a005ba8:	da68      	bge.n	1a005c7c <_dtoa_r+0x23c>
1a005baa:	9b08      	ldr	r3, [sp, #32]
1a005bac:	f8cd 9018 	str.w	r9, [sp, #24]
1a005bb0:	eba3 0309 	sub.w	r3, r3, r9
1a005bb4:	9308      	str	r3, [sp, #32]
1a005bb6:	f1c9 0300 	rsb	r3, r9, #0
1a005bba:	930c      	str	r3, [sp, #48]	; 0x30
1a005bbc:	9b02      	ldr	r3, [sp, #8]
1a005bbe:	2b09      	cmp	r3, #9
1a005bc0:	f04f 0900 	mov.w	r9, #0
1a005bc4:	d862      	bhi.n	1a005c8c <_dtoa_r+0x24c>
1a005bc6:	2b05      	cmp	r3, #5
1a005bc8:	f340 834a 	ble.w	1a006260 <_dtoa_r+0x820>
1a005bcc:	3b04      	subs	r3, #4
1a005bce:	9302      	str	r3, [sp, #8]
1a005bd0:	2400      	movs	r4, #0
1a005bd2:	9b02      	ldr	r3, [sp, #8]
1a005bd4:	3b02      	subs	r3, #2
1a005bd6:	2b03      	cmp	r3, #3
1a005bd8:	f200 8641 	bhi.w	1a00685e <_dtoa_r+0xe1e>
1a005bdc:	e8df f013 	tbh	[pc, r3, lsl #1]
1a005be0:	04630466 	.word	0x04630466
1a005be4:	0456043b 	.word	0x0456043b
1a005be8:	9a07      	ldr	r2, [sp, #28]
1a005bea:	f242 730f 	movw	r3, #9999	; 0x270f
1a005bee:	6013      	str	r3, [r2, #0]
1a005bf0:	9b00      	ldr	r3, [sp, #0]
1a005bf2:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a005bf6:	4333      	orrs	r3, r6
1a005bf8:	d118      	bne.n	1a005c2c <_dtoa_r+0x1ec>
1a005bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005bfc:	2b00      	cmp	r3, #0
1a005bfe:	f000 8625 	beq.w	1a00684c <_dtoa_r+0xe0c>
1a005c02:	4b19      	ldr	r3, [pc, #100]	; (1a005c68 <_dtoa_r+0x228>)
1a005c04:	9303      	str	r3, [sp, #12]
1a005c06:	3308      	adds	r3, #8
1a005c08:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a005c0a:	9803      	ldr	r0, [sp, #12]
1a005c0c:	6013      	str	r3, [r2, #0]
1a005c0e:	b017      	add	sp, #92	; 0x5c
1a005c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005c14:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a005c18:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a005c1c:	950e      	str	r5, [sp, #56]	; 0x38
1a005c1e:	463a      	mov	r2, r7
1a005c20:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a005c24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a005c28:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a005c2a:	e771      	b.n	1a005b10 <_dtoa_r+0xd0>
1a005c2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005c2e:	2b00      	cmp	r3, #0
1a005c30:	f040 8400 	bne.w	1a006434 <_dtoa_r+0x9f4>
1a005c34:	4b0d      	ldr	r3, [pc, #52]	; (1a005c6c <_dtoa_r+0x22c>)
1a005c36:	9303      	str	r3, [sp, #12]
1a005c38:	e740      	b.n	1a005abc <_dtoa_r+0x7c>
1a005c3a:	bf00      	nop
1a005c3c:	f3af 8000 	nop.w
1a005c40:	636f4361 	.word	0x636f4361
1a005c44:	3fd287a7 	.word	0x3fd287a7
1a005c48:	8b60c8b3 	.word	0x8b60c8b3
1a005c4c:	3fc68a28 	.word	0x3fc68a28
1a005c50:	509f79fb 	.word	0x509f79fb
1a005c54:	3fd34413 	.word	0x3fd34413
1a005c58:	7ff00000 	.word	0x7ff00000
1a005c5c:	1a007b8d 	.word	0x1a007b8d
1a005c60:	3ff80000 	.word	0x3ff80000
1a005c64:	1a007be8 	.word	0x1a007be8
1a005c68:	1a007bb4 	.word	0x1a007bb4
1a005c6c:	1a007bb0 	.word	0x1a007bb0
1a005c70:	f1b8 0f00 	cmp.w	r8, #0
1a005c74:	f2c0 84b6 	blt.w	1a0065e4 <_dtoa_r+0xba4>
1a005c78:	900d      	str	r0, [sp, #52]	; 0x34
1a005c7a:	9008      	str	r0, [sp, #32]
1a005c7c:	2300      	movs	r3, #0
1a005c7e:	930c      	str	r3, [sp, #48]	; 0x30
1a005c80:	9b02      	ldr	r3, [sp, #8]
1a005c82:	f8cd 9018 	str.w	r9, [sp, #24]
1a005c86:	2b09      	cmp	r3, #9
1a005c88:	44c8      	add	r8, r9
1a005c8a:	d99c      	bls.n	1a005bc6 <_dtoa_r+0x186>
1a005c8c:	2300      	movs	r3, #0
1a005c8e:	2401      	movs	r4, #1
1a005c90:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a005c94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a005c98:	9302      	str	r3, [sp, #8]
1a005c9a:	9509      	str	r5, [sp, #36]	; 0x24
1a005c9c:	2100      	movs	r1, #0
1a005c9e:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a005ca2:	950f      	str	r5, [sp, #60]	; 0x3c
1a005ca4:	4650      	mov	r0, sl
1a005ca6:	f000 feb3 	bl	1a006a10 <_Balloc>
1a005caa:	2d0e      	cmp	r5, #14
1a005cac:	9003      	str	r0, [sp, #12]
1a005cae:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a005cb2:	f200 810a 	bhi.w	1a005eca <_dtoa_r+0x48a>
1a005cb6:	2c00      	cmp	r4, #0
1a005cb8:	f000 8107 	beq.w	1a005eca <_dtoa_r+0x48a>
1a005cbc:	9906      	ldr	r1, [sp, #24]
1a005cbe:	2900      	cmp	r1, #0
1a005cc0:	f340 8466 	ble.w	1a006590 <_dtoa_r+0xb50>
1a005cc4:	4bb1      	ldr	r3, [pc, #708]	; (1a005f8c <_dtoa_r+0x54c>)
1a005cc6:	f001 020f 	and.w	r2, r1, #15
1a005cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005cce:	ed93 7b00 	vldr	d7, [r3]
1a005cd2:	110c      	asrs	r4, r1, #4
1a005cd4:	06e3      	lsls	r3, r4, #27
1a005cd6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005cda:	f140 8406 	bpl.w	1a0064ea <_dtoa_r+0xaaa>
1a005cde:	4bac      	ldr	r3, [pc, #688]	; (1a005f90 <_dtoa_r+0x550>)
1a005ce0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005ce4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a005ce8:	f7fd f806 	bl	1a002cf8 <__aeabi_ddiv>
1a005cec:	e9cd 0100 	strd	r0, r1, [sp]
1a005cf0:	f004 040f 	and.w	r4, r4, #15
1a005cf4:	2603      	movs	r6, #3
1a005cf6:	b17c      	cbz	r4, 1a005d18 <_dtoa_r+0x2d8>
1a005cf8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005cfc:	4da4      	ldr	r5, [pc, #656]	; (1a005f90 <_dtoa_r+0x550>)
1a005cfe:	07e7      	lsls	r7, r4, #31
1a005d00:	d504      	bpl.n	1a005d0c <_dtoa_r+0x2cc>
1a005d02:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005d06:	f7fc fecd 	bl	1a002aa4 <__aeabi_dmul>
1a005d0a:	3601      	adds	r6, #1
1a005d0c:	1064      	asrs	r4, r4, #1
1a005d0e:	f105 0508 	add.w	r5, r5, #8
1a005d12:	d1f4      	bne.n	1a005cfe <_dtoa_r+0x2be>
1a005d14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a005d18:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005d1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a005d20:	f7fc ffea 	bl	1a002cf8 <__aeabi_ddiv>
1a005d24:	e9cd 0100 	strd	r0, r1, [sp]
1a005d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a005d2a:	b153      	cbz	r3, 1a005d42 <_dtoa_r+0x302>
1a005d2c:	e9dd 4500 	ldrd	r4, r5, [sp]
1a005d30:	2200      	movs	r2, #0
1a005d32:	4b98      	ldr	r3, [pc, #608]	; (1a005f94 <_dtoa_r+0x554>)
1a005d34:	4620      	mov	r0, r4
1a005d36:	4629      	mov	r1, r5
1a005d38:	f7fd f926 	bl	1a002f88 <__aeabi_dcmplt>
1a005d3c:	2800      	cmp	r0, #0
1a005d3e:	f040 8521 	bne.w	1a006784 <_dtoa_r+0xd44>
1a005d42:	4630      	mov	r0, r6
1a005d44:	f7fc fe44 	bl	1a0029d0 <__aeabi_i2d>
1a005d48:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005d4c:	f7fc feaa 	bl	1a002aa4 <__aeabi_dmul>
1a005d50:	4b91      	ldr	r3, [pc, #580]	; (1a005f98 <_dtoa_r+0x558>)
1a005d52:	2200      	movs	r2, #0
1a005d54:	f7fc fcf0 	bl	1a002738 <__adddf3>
1a005d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005d5a:	4604      	mov	r4, r0
1a005d5c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a005d60:	2b00      	cmp	r3, #0
1a005d62:	f000 83f9 	beq.w	1a006558 <_dtoa_r+0xb18>
1a005d66:	9b06      	ldr	r3, [sp, #24]
1a005d68:	9312      	str	r3, [sp, #72]	; 0x48
1a005d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005d6c:	9310      	str	r3, [sp, #64]	; 0x40
1a005d6e:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005d72:	4639      	mov	r1, r7
1a005d74:	4630      	mov	r0, r6
1a005d76:	f001 fc61 	bl	1a00763c <__aeabi_d2iz>
1a005d7a:	9000      	str	r0, [sp, #0]
1a005d7c:	f7fc fe28 	bl	1a0029d0 <__aeabi_i2d>
1a005d80:	4602      	mov	r2, r0
1a005d82:	460b      	mov	r3, r1
1a005d84:	4630      	mov	r0, r6
1a005d86:	4639      	mov	r1, r7
1a005d88:	f7fc fcd4 	bl	1a002734 <__aeabi_dsub>
1a005d8c:	4b7f      	ldr	r3, [pc, #508]	; (1a005f8c <_dtoa_r+0x54c>)
1a005d8e:	9a00      	ldr	r2, [sp, #0]
1a005d90:	460f      	mov	r7, r1
1a005d92:	9910      	ldr	r1, [sp, #64]	; 0x40
1a005d94:	4606      	mov	r6, r0
1a005d96:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a005d9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a005d9c:	9903      	ldr	r1, [sp, #12]
1a005d9e:	3230      	adds	r2, #48	; 0x30
1a005da0:	e9cd 4500 	strd	r4, r5, [sp]
1a005da4:	b2d5      	uxtb	r5, r2
1a005da6:	1c4c      	adds	r4, r1, #1
1a005da8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a005dac:	2800      	cmp	r0, #0
1a005dae:	f000 848d 	beq.w	1a0066cc <_dtoa_r+0xc8c>
1a005db2:	2000      	movs	r0, #0
1a005db4:	4979      	ldr	r1, [pc, #484]	; (1a005f9c <_dtoa_r+0x55c>)
1a005db6:	f7fc ff9f 	bl	1a002cf8 <__aeabi_ddiv>
1a005dba:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005dbe:	f7fc fcb9 	bl	1a002734 <__aeabi_dsub>
1a005dc2:	9b03      	ldr	r3, [sp, #12]
1a005dc4:	4632      	mov	r2, r6
1a005dc6:	701d      	strb	r5, [r3, #0]
1a005dc8:	463b      	mov	r3, r7
1a005dca:	e9cd 0100 	strd	r0, r1, [sp]
1a005dce:	f7fd f8f9 	bl	1a002fc4 <__aeabi_dcmpgt>
1a005dd2:	2800      	cmp	r0, #0
1a005dd4:	f040 84ca 	bne.w	1a00676c <_dtoa_r+0xd2c>
1a005dd8:	4632      	mov	r2, r6
1a005dda:	463b      	mov	r3, r7
1a005ddc:	2000      	movs	r0, #0
1a005dde:	496d      	ldr	r1, [pc, #436]	; (1a005f94 <_dtoa_r+0x554>)
1a005de0:	f7fc fca8 	bl	1a002734 <__aeabi_dsub>
1a005de4:	4602      	mov	r2, r0
1a005de6:	460b      	mov	r3, r1
1a005de8:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005dec:	f7fd f8ea 	bl	1a002fc4 <__aeabi_dcmpgt>
1a005df0:	2800      	cmp	r0, #0
1a005df2:	f040 8526 	bne.w	1a006842 <_dtoa_r+0xe02>
1a005df6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005df8:	2b01      	cmp	r3, #1
1a005dfa:	d062      	beq.n	1a005ec2 <_dtoa_r+0x482>
1a005dfc:	9a03      	ldr	r2, [sp, #12]
1a005dfe:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a005e02:	4413      	add	r3, r2
1a005e04:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a005e08:	e9dd 8900 	ldrd	r8, r9, [sp]
1a005e0c:	f8cd b000 	str.w	fp, [sp]
1a005e10:	46d3      	mov	fp, sl
1a005e12:	469a      	mov	sl, r3
1a005e14:	e00c      	b.n	1a005e30 <_dtoa_r+0x3f0>
1a005e16:	2000      	movs	r0, #0
1a005e18:	495e      	ldr	r1, [pc, #376]	; (1a005f94 <_dtoa_r+0x554>)
1a005e1a:	f7fc fc8b 	bl	1a002734 <__aeabi_dsub>
1a005e1e:	4642      	mov	r2, r8
1a005e20:	464b      	mov	r3, r9
1a005e22:	f7fd f8b1 	bl	1a002f88 <__aeabi_dcmplt>
1a005e26:	2800      	cmp	r0, #0
1a005e28:	f040 84eb 	bne.w	1a006802 <_dtoa_r+0xdc2>
1a005e2c:	45a2      	cmp	sl, r4
1a005e2e:	d041      	beq.n	1a005eb4 <_dtoa_r+0x474>
1a005e30:	4640      	mov	r0, r8
1a005e32:	4649      	mov	r1, r9
1a005e34:	2200      	movs	r2, #0
1a005e36:	4b5a      	ldr	r3, [pc, #360]	; (1a005fa0 <_dtoa_r+0x560>)
1a005e38:	f7fc fe34 	bl	1a002aa4 <__aeabi_dmul>
1a005e3c:	2200      	movs	r2, #0
1a005e3e:	4b58      	ldr	r3, [pc, #352]	; (1a005fa0 <_dtoa_r+0x560>)
1a005e40:	4680      	mov	r8, r0
1a005e42:	4689      	mov	r9, r1
1a005e44:	4630      	mov	r0, r6
1a005e46:	4639      	mov	r1, r7
1a005e48:	f7fc fe2c 	bl	1a002aa4 <__aeabi_dmul>
1a005e4c:	460f      	mov	r7, r1
1a005e4e:	4606      	mov	r6, r0
1a005e50:	f001 fbf4 	bl	1a00763c <__aeabi_d2iz>
1a005e54:	4605      	mov	r5, r0
1a005e56:	f7fc fdbb 	bl	1a0029d0 <__aeabi_i2d>
1a005e5a:	4602      	mov	r2, r0
1a005e5c:	460b      	mov	r3, r1
1a005e5e:	4630      	mov	r0, r6
1a005e60:	4639      	mov	r1, r7
1a005e62:	f7fc fc67 	bl	1a002734 <__aeabi_dsub>
1a005e66:	3530      	adds	r5, #48	; 0x30
1a005e68:	b2ed      	uxtb	r5, r5
1a005e6a:	4642      	mov	r2, r8
1a005e6c:	464b      	mov	r3, r9
1a005e6e:	f804 5b01 	strb.w	r5, [r4], #1
1a005e72:	4606      	mov	r6, r0
1a005e74:	460f      	mov	r7, r1
1a005e76:	f7fd f887 	bl	1a002f88 <__aeabi_dcmplt>
1a005e7a:	4632      	mov	r2, r6
1a005e7c:	463b      	mov	r3, r7
1a005e7e:	2800      	cmp	r0, #0
1a005e80:	d0c9      	beq.n	1a005e16 <_dtoa_r+0x3d6>
1a005e82:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005e84:	46da      	mov	sl, fp
1a005e86:	3301      	adds	r3, #1
1a005e88:	f8dd b000 	ldr.w	fp, [sp]
1a005e8c:	9306      	str	r3, [sp, #24]
1a005e8e:	4659      	mov	r1, fp
1a005e90:	4650      	mov	r0, sl
1a005e92:	f000 fde3 	bl	1a006a5c <_Bfree>
1a005e96:	2300      	movs	r3, #0
1a005e98:	7023      	strb	r3, [r4, #0]
1a005e9a:	9b07      	ldr	r3, [sp, #28]
1a005e9c:	461a      	mov	r2, r3
1a005e9e:	9b06      	ldr	r3, [sp, #24]
1a005ea0:	6013      	str	r3, [r2, #0]
1a005ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005ea4:	2b00      	cmp	r3, #0
1a005ea6:	f43f ae09 	beq.w	1a005abc <_dtoa_r+0x7c>
1a005eaa:	9803      	ldr	r0, [sp, #12]
1a005eac:	601c      	str	r4, [r3, #0]
1a005eae:	b017      	add	sp, #92	; 0x5c
1a005eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005eb4:	46da      	mov	sl, fp
1a005eb6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a005eba:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a005ebe:	f8dd b000 	ldr.w	fp, [sp]
1a005ec2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a005ec6:	e9cd 3400 	strd	r3, r4, [sp]
1a005eca:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a005ecc:	2b00      	cmp	r3, #0
1a005ece:	f2c0 80c9 	blt.w	1a006064 <_dtoa_r+0x624>
1a005ed2:	9a06      	ldr	r2, [sp, #24]
1a005ed4:	2a0e      	cmp	r2, #14
1a005ed6:	f300 80c5 	bgt.w	1a006064 <_dtoa_r+0x624>
1a005eda:	4b2c      	ldr	r3, [pc, #176]	; (1a005f8c <_dtoa_r+0x54c>)
1a005edc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005ee0:	e9d3 8900 	ldrd	r8, r9, [r3]
1a005ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005ee6:	2b00      	cmp	r3, #0
1a005ee8:	da17      	bge.n	1a005f1a <_dtoa_r+0x4da>
1a005eea:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a005eec:	2f00      	cmp	r7, #0
1a005eee:	dc14      	bgt.n	1a005f1a <_dtoa_r+0x4da>
1a005ef0:	f040 834b 	bne.w	1a00658a <_dtoa_r+0xb4a>
1a005ef4:	2200      	movs	r2, #0
1a005ef6:	4b2b      	ldr	r3, [pc, #172]	; (1a005fa4 <_dtoa_r+0x564>)
1a005ef8:	4640      	mov	r0, r8
1a005efa:	4649      	mov	r1, r9
1a005efc:	f7fc fdd2 	bl	1a002aa4 <__aeabi_dmul>
1a005f00:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005f04:	f7fd f854 	bl	1a002fb0 <__aeabi_dcmpge>
1a005f08:	2800      	cmp	r0, #0
1a005f0a:	f000 83be 	beq.w	1a00668a <_dtoa_r+0xc4a>
1a005f0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a005f10:	463d      	mov	r5, r7
1a005f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005f14:	9c03      	ldr	r4, [sp, #12]
1a005f16:	43db      	mvns	r3, r3
1a005f18:	e260      	b.n	1a0063dc <_dtoa_r+0x99c>
1a005f1a:	e9dd 4500 	ldrd	r4, r5, [sp]
1a005f1e:	4642      	mov	r2, r8
1a005f20:	464b      	mov	r3, r9
1a005f22:	4620      	mov	r0, r4
1a005f24:	4629      	mov	r1, r5
1a005f26:	f7fc fee7 	bl	1a002cf8 <__aeabi_ddiv>
1a005f2a:	f001 fb87 	bl	1a00763c <__aeabi_d2iz>
1a005f2e:	9000      	str	r0, [sp, #0]
1a005f30:	f7fc fd4e 	bl	1a0029d0 <__aeabi_i2d>
1a005f34:	4642      	mov	r2, r8
1a005f36:	464b      	mov	r3, r9
1a005f38:	f7fc fdb4 	bl	1a002aa4 <__aeabi_dmul>
1a005f3c:	4602      	mov	r2, r0
1a005f3e:	460b      	mov	r3, r1
1a005f40:	4620      	mov	r0, r4
1a005f42:	4629      	mov	r1, r5
1a005f44:	f7fc fbf6 	bl	1a002734 <__aeabi_dsub>
1a005f48:	9b00      	ldr	r3, [sp, #0]
1a005f4a:	9c03      	ldr	r4, [sp, #12]
1a005f4c:	9a06      	ldr	r2, [sp, #24]
1a005f4e:	3330      	adds	r3, #48	; 0x30
1a005f50:	f804 3b01 	strb.w	r3, [r4], #1
1a005f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005f56:	3201      	adds	r2, #1
1a005f58:	2b01      	cmp	r3, #1
1a005f5a:	4606      	mov	r6, r0
1a005f5c:	460f      	mov	r7, r1
1a005f5e:	9206      	str	r2, [sp, #24]
1a005f60:	d054      	beq.n	1a00600c <_dtoa_r+0x5cc>
1a005f62:	2200      	movs	r2, #0
1a005f64:	4b0e      	ldr	r3, [pc, #56]	; (1a005fa0 <_dtoa_r+0x560>)
1a005f66:	f7fc fd9d 	bl	1a002aa4 <__aeabi_dmul>
1a005f6a:	2200      	movs	r2, #0
1a005f6c:	2300      	movs	r3, #0
1a005f6e:	4606      	mov	r6, r0
1a005f70:	460f      	mov	r7, r1
1a005f72:	f7fc ffff 	bl	1a002f74 <__aeabi_dcmpeq>
1a005f76:	2800      	cmp	r0, #0
1a005f78:	d189      	bne.n	1a005e8e <_dtoa_r+0x44e>
1a005f7a:	f8cd b000 	str.w	fp, [sp]
1a005f7e:	2501      	movs	r5, #1
1a005f80:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a005f84:	f8cd a008 	str.w	sl, [sp, #8]
1a005f88:	e019      	b.n	1a005fbe <_dtoa_r+0x57e>
1a005f8a:	bf00      	nop
1a005f8c:	1a007be8 	.word	0x1a007be8
1a005f90:	1a007bc0 	.word	0x1a007bc0
1a005f94:	3ff00000 	.word	0x3ff00000
1a005f98:	401c0000 	.word	0x401c0000
1a005f9c:	3fe00000 	.word	0x3fe00000
1a005fa0:	40240000 	.word	0x40240000
1a005fa4:	40140000 	.word	0x40140000
1a005fa8:	f7fc fd7c 	bl	1a002aa4 <__aeabi_dmul>
1a005fac:	2200      	movs	r2, #0
1a005fae:	2300      	movs	r3, #0
1a005fb0:	4606      	mov	r6, r0
1a005fb2:	460f      	mov	r7, r1
1a005fb4:	f7fc ffde 	bl	1a002f74 <__aeabi_dcmpeq>
1a005fb8:	2800      	cmp	r0, #0
1a005fba:	f040 835c 	bne.w	1a006676 <_dtoa_r+0xc36>
1a005fbe:	4642      	mov	r2, r8
1a005fc0:	464b      	mov	r3, r9
1a005fc2:	4630      	mov	r0, r6
1a005fc4:	4639      	mov	r1, r7
1a005fc6:	f7fc fe97 	bl	1a002cf8 <__aeabi_ddiv>
1a005fca:	f001 fb37 	bl	1a00763c <__aeabi_d2iz>
1a005fce:	4682      	mov	sl, r0
1a005fd0:	f7fc fcfe 	bl	1a0029d0 <__aeabi_i2d>
1a005fd4:	4642      	mov	r2, r8
1a005fd6:	464b      	mov	r3, r9
1a005fd8:	f7fc fd64 	bl	1a002aa4 <__aeabi_dmul>
1a005fdc:	4602      	mov	r2, r0
1a005fde:	460b      	mov	r3, r1
1a005fe0:	4630      	mov	r0, r6
1a005fe2:	4639      	mov	r1, r7
1a005fe4:	f7fc fba6 	bl	1a002734 <__aeabi_dsub>
1a005fe8:	3501      	adds	r5, #1
1a005fea:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a005fee:	45ab      	cmp	fp, r5
1a005ff0:	4606      	mov	r6, r0
1a005ff2:	460f      	mov	r7, r1
1a005ff4:	f04f 0200 	mov.w	r2, #0
1a005ff8:	4ba7      	ldr	r3, [pc, #668]	; (1a006298 <_dtoa_r+0x858>)
1a005ffa:	f804 cb01 	strb.w	ip, [r4], #1
1a005ffe:	d1d3      	bne.n	1a005fa8 <_dtoa_r+0x568>
1a006000:	f8dd b000 	ldr.w	fp, [sp]
1a006004:	f8cd a000 	str.w	sl, [sp]
1a006008:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00600c:	4632      	mov	r2, r6
1a00600e:	463b      	mov	r3, r7
1a006010:	4630      	mov	r0, r6
1a006012:	4639      	mov	r1, r7
1a006014:	f7fc fb90 	bl	1a002738 <__adddf3>
1a006018:	4642      	mov	r2, r8
1a00601a:	464b      	mov	r3, r9
1a00601c:	4606      	mov	r6, r0
1a00601e:	460f      	mov	r7, r1
1a006020:	f7fc ffd0 	bl	1a002fc4 <__aeabi_dcmpgt>
1a006024:	b960      	cbnz	r0, 1a006040 <_dtoa_r+0x600>
1a006026:	4642      	mov	r2, r8
1a006028:	464b      	mov	r3, r9
1a00602a:	4630      	mov	r0, r6
1a00602c:	4639      	mov	r1, r7
1a00602e:	f7fc ffa1 	bl	1a002f74 <__aeabi_dcmpeq>
1a006032:	2800      	cmp	r0, #0
1a006034:	f43f af2b 	beq.w	1a005e8e <_dtoa_r+0x44e>
1a006038:	9b00      	ldr	r3, [sp, #0]
1a00603a:	07db      	lsls	r3, r3, #31
1a00603c:	f57f af27 	bpl.w	1a005e8e <_dtoa_r+0x44e>
1a006040:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a006044:	9a03      	ldr	r2, [sp, #12]
1a006046:	1e63      	subs	r3, r4, #1
1a006048:	e004      	b.n	1a006054 <_dtoa_r+0x614>
1a00604a:	429a      	cmp	r2, r3
1a00604c:	f000 83c0 	beq.w	1a0067d0 <_dtoa_r+0xd90>
1a006050:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a006054:	2d39      	cmp	r5, #57	; 0x39
1a006056:	f103 0401 	add.w	r4, r3, #1
1a00605a:	d0f6      	beq.n	1a00604a <_dtoa_r+0x60a>
1a00605c:	1c6a      	adds	r2, r5, #1
1a00605e:	b2d2      	uxtb	r2, r2
1a006060:	701a      	strb	r2, [r3, #0]
1a006062:	e714      	b.n	1a005e8e <_dtoa_r+0x44e>
1a006064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a006066:	2a00      	cmp	r2, #0
1a006068:	d03c      	beq.n	1a0060e4 <_dtoa_r+0x6a4>
1a00606a:	9a02      	ldr	r2, [sp, #8]
1a00606c:	2a01      	cmp	r2, #1
1a00606e:	f340 8258 	ble.w	1a006522 <_dtoa_r+0xae2>
1a006072:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006074:	1e5e      	subs	r6, r3, #1
1a006076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006078:	42b3      	cmp	r3, r6
1a00607a:	f280 8234 	bge.w	1a0064e6 <_dtoa_r+0xaa6>
1a00607e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006080:	960c      	str	r6, [sp, #48]	; 0x30
1a006082:	1af3      	subs	r3, r6, r3
1a006084:	4499      	add	r9, r3
1a006086:	2600      	movs	r6, #0
1a006088:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00608a:	2b00      	cmp	r3, #0
1a00608c:	f2c0 82f8 	blt.w	1a006680 <_dtoa_r+0xc40>
1a006090:	9a08      	ldr	r2, [sp, #32]
1a006092:	4614      	mov	r4, r2
1a006094:	441a      	add	r2, r3
1a006096:	4498      	add	r8, r3
1a006098:	9208      	str	r2, [sp, #32]
1a00609a:	2101      	movs	r1, #1
1a00609c:	4650      	mov	r0, sl
1a00609e:	f000 fd7d 	bl	1a006b9c <__i2b>
1a0060a2:	4605      	mov	r5, r0
1a0060a4:	e021      	b.n	1a0060ea <_dtoa_r+0x6aa>
1a0060a6:	2301      	movs	r3, #1
1a0060a8:	f1b8 0f00 	cmp.w	r8, #0
1a0060ac:	930d      	str	r3, [sp, #52]	; 0x34
1a0060ae:	f6bf ad77 	bge.w	1a005ba0 <_dtoa_r+0x160>
1a0060b2:	f1c4 0301 	rsb	r3, r4, #1
1a0060b6:	9308      	str	r3, [sp, #32]
1a0060b8:	f04f 0800 	mov.w	r8, #0
1a0060bc:	e572      	b.n	1a005ba4 <_dtoa_r+0x164>
1a0060be:	4648      	mov	r0, r9
1a0060c0:	f7fc fc86 	bl	1a0029d0 <__aeabi_i2d>
1a0060c4:	4632      	mov	r2, r6
1a0060c6:	463b      	mov	r3, r7
1a0060c8:	f7fc ff54 	bl	1a002f74 <__aeabi_dcmpeq>
1a0060cc:	2800      	cmp	r0, #0
1a0060ce:	f47f ad4d 	bne.w	1a005b6c <_dtoa_r+0x12c>
1a0060d2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a0060d6:	e549      	b.n	1a005b6c <_dtoa_r+0x12c>
1a0060d8:	4b70      	ldr	r3, [pc, #448]	; (1a00629c <_dtoa_r+0x85c>)
1a0060da:	9303      	str	r3, [sp, #12]
1a0060dc:	9803      	ldr	r0, [sp, #12]
1a0060de:	b017      	add	sp, #92	; 0x5c
1a0060e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0060e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a0060e6:	9c08      	ldr	r4, [sp, #32]
1a0060e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0060ea:	2c00      	cmp	r4, #0
1a0060ec:	dd0c      	ble.n	1a006108 <_dtoa_r+0x6c8>
1a0060ee:	f1b8 0f00 	cmp.w	r8, #0
1a0060f2:	dd09      	ble.n	1a006108 <_dtoa_r+0x6c8>
1a0060f4:	4544      	cmp	r4, r8
1a0060f6:	9a08      	ldr	r2, [sp, #32]
1a0060f8:	4623      	mov	r3, r4
1a0060fa:	bfa8      	it	ge
1a0060fc:	4643      	movge	r3, r8
1a0060fe:	1ad2      	subs	r2, r2, r3
1a006100:	9208      	str	r2, [sp, #32]
1a006102:	1ae4      	subs	r4, r4, r3
1a006104:	eba8 0803 	sub.w	r8, r8, r3
1a006108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00610a:	b1d3      	cbz	r3, 1a006142 <_dtoa_r+0x702>
1a00610c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00610e:	2b00      	cmp	r3, #0
1a006110:	f000 8189 	beq.w	1a006426 <_dtoa_r+0x9e6>
1a006114:	2e00      	cmp	r6, #0
1a006116:	dd10      	ble.n	1a00613a <_dtoa_r+0x6fa>
1a006118:	4629      	mov	r1, r5
1a00611a:	4632      	mov	r2, r6
1a00611c:	4650      	mov	r0, sl
1a00611e:	f000 fddf 	bl	1a006ce0 <__pow5mult>
1a006122:	465a      	mov	r2, fp
1a006124:	4601      	mov	r1, r0
1a006126:	4605      	mov	r5, r0
1a006128:	4650      	mov	r0, sl
1a00612a:	f000 fd41 	bl	1a006bb0 <__multiply>
1a00612e:	4659      	mov	r1, fp
1a006130:	4607      	mov	r7, r0
1a006132:	4650      	mov	r0, sl
1a006134:	f000 fc92 	bl	1a006a5c <_Bfree>
1a006138:	46bb      	mov	fp, r7
1a00613a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00613c:	1b9a      	subs	r2, r3, r6
1a00613e:	f040 8173 	bne.w	1a006428 <_dtoa_r+0x9e8>
1a006142:	2101      	movs	r1, #1
1a006144:	4650      	mov	r0, sl
1a006146:	f000 fd29 	bl	1a006b9c <__i2b>
1a00614a:	f1b9 0f00 	cmp.w	r9, #0
1a00614e:	4607      	mov	r7, r0
1a006150:	f300 808e 	bgt.w	1a006270 <_dtoa_r+0x830>
1a006154:	9b02      	ldr	r3, [sp, #8]
1a006156:	2b01      	cmp	r3, #1
1a006158:	f340 8171 	ble.w	1a00643e <_dtoa_r+0x9fe>
1a00615c:	2600      	movs	r6, #0
1a00615e:	2001      	movs	r0, #1
1a006160:	f1b9 0f00 	cmp.w	r9, #0
1a006164:	f040 808f 	bne.w	1a006286 <_dtoa_r+0x846>
1a006168:	4440      	add	r0, r8
1a00616a:	f010 001f 	ands.w	r0, r0, #31
1a00616e:	d075      	beq.n	1a00625c <_dtoa_r+0x81c>
1a006170:	f1c0 0320 	rsb	r3, r0, #32
1a006174:	2b04      	cmp	r3, #4
1a006176:	f340 836d 	ble.w	1a006854 <_dtoa_r+0xe14>
1a00617a:	f1c0 001c 	rsb	r0, r0, #28
1a00617e:	9b08      	ldr	r3, [sp, #32]
1a006180:	4403      	add	r3, r0
1a006182:	9308      	str	r3, [sp, #32]
1a006184:	4404      	add	r4, r0
1a006186:	4480      	add	r8, r0
1a006188:	9b08      	ldr	r3, [sp, #32]
1a00618a:	2b00      	cmp	r3, #0
1a00618c:	dd05      	ble.n	1a00619a <_dtoa_r+0x75a>
1a00618e:	4659      	mov	r1, fp
1a006190:	461a      	mov	r2, r3
1a006192:	4650      	mov	r0, sl
1a006194:	f000 fdf4 	bl	1a006d80 <__lshift>
1a006198:	4683      	mov	fp, r0
1a00619a:	f1b8 0f00 	cmp.w	r8, #0
1a00619e:	dd05      	ble.n	1a0061ac <_dtoa_r+0x76c>
1a0061a0:	4639      	mov	r1, r7
1a0061a2:	4642      	mov	r2, r8
1a0061a4:	4650      	mov	r0, sl
1a0061a6:	f000 fdeb 	bl	1a006d80 <__lshift>
1a0061aa:	4607      	mov	r7, r0
1a0061ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0061ae:	2b00      	cmp	r3, #0
1a0061b0:	f040 811e 	bne.w	1a0063f0 <_dtoa_r+0x9b0>
1a0061b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0061b6:	2b00      	cmp	r3, #0
1a0061b8:	f340 80f5 	ble.w	1a0063a6 <_dtoa_r+0x966>
1a0061bc:	9b06      	ldr	r3, [sp, #24]
1a0061be:	3301      	adds	r3, #1
1a0061c0:	9306      	str	r3, [sp, #24]
1a0061c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0061c4:	2b00      	cmp	r3, #0
1a0061c6:	d177      	bne.n	1a0062b8 <_dtoa_r+0x878>
1a0061c8:	9c03      	ldr	r4, [sp, #12]
1a0061ca:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0061ce:	2601      	movs	r6, #1
1a0061d0:	e003      	b.n	1a0061da <_dtoa_r+0x79a>
1a0061d2:	f000 fc4d 	bl	1a006a70 <__multadd>
1a0061d6:	3601      	adds	r6, #1
1a0061d8:	4683      	mov	fp, r0
1a0061da:	4639      	mov	r1, r7
1a0061dc:	4658      	mov	r0, fp
1a0061de:	f7ff fb9d 	bl	1a00591c <quorem>
1a0061e2:	4546      	cmp	r6, r8
1a0061e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a0061e8:	f804 9b01 	strb.w	r9, [r4], #1
1a0061ec:	f04f 0300 	mov.w	r3, #0
1a0061f0:	f04f 020a 	mov.w	r2, #10
1a0061f4:	4659      	mov	r1, fp
1a0061f6:	4650      	mov	r0, sl
1a0061f8:	dbeb      	blt.n	1a0061d2 <_dtoa_r+0x792>
1a0061fa:	2300      	movs	r3, #0
1a0061fc:	9300      	str	r3, [sp, #0]
1a0061fe:	4659      	mov	r1, fp
1a006200:	2201      	movs	r2, #1
1a006202:	4650      	mov	r0, sl
1a006204:	f000 fdbc 	bl	1a006d80 <__lshift>
1a006208:	4639      	mov	r1, r7
1a00620a:	4683      	mov	fp, r0
1a00620c:	f000 fe12 	bl	1a006e34 <__mcmp>
1a006210:	2800      	cmp	r0, #0
1a006212:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a006216:	f340 816f 	ble.w	1a0064f8 <_dtoa_r+0xab8>
1a00621a:	1e63      	subs	r3, r4, #1
1a00621c:	9903      	ldr	r1, [sp, #12]
1a00621e:	e004      	b.n	1a00622a <_dtoa_r+0x7ea>
1a006220:	4299      	cmp	r1, r3
1a006222:	f000 8177 	beq.w	1a006514 <_dtoa_r+0xad4>
1a006226:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00622a:	2a39      	cmp	r2, #57	; 0x39
1a00622c:	f103 0401 	add.w	r4, r3, #1
1a006230:	d0f6      	beq.n	1a006220 <_dtoa_r+0x7e0>
1a006232:	3201      	adds	r2, #1
1a006234:	701a      	strb	r2, [r3, #0]
1a006236:	4639      	mov	r1, r7
1a006238:	4650      	mov	r0, sl
1a00623a:	f000 fc0f 	bl	1a006a5c <_Bfree>
1a00623e:	2d00      	cmp	r5, #0
1a006240:	f43f ae25 	beq.w	1a005e8e <_dtoa_r+0x44e>
1a006244:	9900      	ldr	r1, [sp, #0]
1a006246:	b121      	cbz	r1, 1a006252 <_dtoa_r+0x812>
1a006248:	42a9      	cmp	r1, r5
1a00624a:	d002      	beq.n	1a006252 <_dtoa_r+0x812>
1a00624c:	4650      	mov	r0, sl
1a00624e:	f000 fc05 	bl	1a006a5c <_Bfree>
1a006252:	4629      	mov	r1, r5
1a006254:	4650      	mov	r0, sl
1a006256:	f000 fc01 	bl	1a006a5c <_Bfree>
1a00625a:	e618      	b.n	1a005e8e <_dtoa_r+0x44e>
1a00625c:	201c      	movs	r0, #28
1a00625e:	e78e      	b.n	1a00617e <_dtoa_r+0x73e>
1a006260:	2401      	movs	r4, #1
1a006262:	e4b6      	b.n	1a005bd2 <_dtoa_r+0x192>
1a006264:	f1c3 0620 	rsb	r6, r3, #32
1a006268:	9b00      	ldr	r3, [sp, #0]
1a00626a:	fa03 f006 	lsl.w	r0, r3, r6
1a00626e:	e447      	b.n	1a005b00 <_dtoa_r+0xc0>
1a006270:	4601      	mov	r1, r0
1a006272:	464a      	mov	r2, r9
1a006274:	4650      	mov	r0, sl
1a006276:	f000 fd33 	bl	1a006ce0 <__pow5mult>
1a00627a:	9b02      	ldr	r3, [sp, #8]
1a00627c:	2b01      	cmp	r3, #1
1a00627e:	4607      	mov	r7, r0
1a006280:	f340 81b2 	ble.w	1a0065e8 <_dtoa_r+0xba8>
1a006284:	2600      	movs	r6, #0
1a006286:	693b      	ldr	r3, [r7, #16]
1a006288:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a00628c:	6918      	ldr	r0, [r3, #16]
1a00628e:	f000 fc35 	bl	1a006afc <__hi0bits>
1a006292:	f1c0 0020 	rsb	r0, r0, #32
1a006296:	e767      	b.n	1a006168 <_dtoa_r+0x728>
1a006298:	40240000 	.word	0x40240000
1a00629c:	1a007b8c 	.word	0x1a007b8c
1a0062a0:	4629      	mov	r1, r5
1a0062a2:	2300      	movs	r3, #0
1a0062a4:	220a      	movs	r2, #10
1a0062a6:	4650      	mov	r0, sl
1a0062a8:	f000 fbe2 	bl	1a006a70 <__multadd>
1a0062ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0062ae:	2b00      	cmp	r3, #0
1a0062b0:	4605      	mov	r5, r0
1a0062b2:	f340 82c1 	ble.w	1a006838 <_dtoa_r+0xdf8>
1a0062b6:	9309      	str	r3, [sp, #36]	; 0x24
1a0062b8:	2c00      	cmp	r4, #0
1a0062ba:	f300 810d 	bgt.w	1a0064d8 <_dtoa_r+0xa98>
1a0062be:	2e00      	cmp	r6, #0
1a0062c0:	f040 81c5 	bne.w	1a00664e <_dtoa_r+0xc0e>
1a0062c4:	46a8      	mov	r8, r5
1a0062c6:	9b00      	ldr	r3, [sp, #0]
1a0062c8:	9902      	ldr	r1, [sp, #8]
1a0062ca:	9e03      	ldr	r6, [sp, #12]
1a0062cc:	f003 0201 	and.w	r2, r3, #1
1a0062d0:	920b      	str	r2, [sp, #44]	; 0x2c
1a0062d2:	430a      	orrs	r2, r1
1a0062d4:	920a      	str	r2, [sp, #40]	; 0x28
1a0062d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0062d8:	1e73      	subs	r3, r6, #1
1a0062da:	441a      	add	r2, r3
1a0062dc:	9209      	str	r2, [sp, #36]	; 0x24
1a0062de:	463c      	mov	r4, r7
1a0062e0:	4621      	mov	r1, r4
1a0062e2:	4658      	mov	r0, fp
1a0062e4:	f7ff fb1a 	bl	1a00591c <quorem>
1a0062e8:	4629      	mov	r1, r5
1a0062ea:	9000      	str	r0, [sp, #0]
1a0062ec:	4658      	mov	r0, fp
1a0062ee:	f000 fda1 	bl	1a006e34 <__mcmp>
1a0062f2:	4642      	mov	r2, r8
1a0062f4:	4607      	mov	r7, r0
1a0062f6:	4621      	mov	r1, r4
1a0062f8:	4650      	mov	r0, sl
1a0062fa:	f000 fdb7 	bl	1a006e6c <__mdiff>
1a0062fe:	9b00      	ldr	r3, [sp, #0]
1a006300:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a006304:	68c3      	ldr	r3, [r0, #12]
1a006306:	4681      	mov	r9, r0
1a006308:	2b00      	cmp	r3, #0
1a00630a:	d13e      	bne.n	1a00638a <_dtoa_r+0x94a>
1a00630c:	4601      	mov	r1, r0
1a00630e:	4658      	mov	r0, fp
1a006310:	9208      	str	r2, [sp, #32]
1a006312:	f000 fd8f 	bl	1a006e34 <__mcmp>
1a006316:	4649      	mov	r1, r9
1a006318:	9004      	str	r0, [sp, #16]
1a00631a:	4650      	mov	r0, sl
1a00631c:	f000 fb9e 	bl	1a006a5c <_Bfree>
1a006320:	9b04      	ldr	r3, [sp, #16]
1a006322:	9a08      	ldr	r2, [sp, #32]
1a006324:	b91b      	cbnz	r3, 1a00632e <_dtoa_r+0x8ee>
1a006326:	990a      	ldr	r1, [sp, #40]	; 0x28
1a006328:	2900      	cmp	r1, #0
1a00632a:	f000 8271 	beq.w	1a006810 <_dtoa_r+0xdd0>
1a00632e:	2f00      	cmp	r7, #0
1a006330:	f106 0901 	add.w	r9, r6, #1
1a006334:	f2c0 816e 	blt.w	1a006614 <_dtoa_r+0xbd4>
1a006338:	9902      	ldr	r1, [sp, #8]
1a00633a:	430f      	orrs	r7, r1
1a00633c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a00633e:	4339      	orrs	r1, r7
1a006340:	f000 8168 	beq.w	1a006614 <_dtoa_r+0xbd4>
1a006344:	2b00      	cmp	r3, #0
1a006346:	f300 81a2 	bgt.w	1a00668e <_dtoa_r+0xc4e>
1a00634a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00634c:	7032      	strb	r2, [r6, #0]
1a00634e:	42b3      	cmp	r3, r6
1a006350:	f000 81a9 	beq.w	1a0066a6 <_dtoa_r+0xc66>
1a006354:	4659      	mov	r1, fp
1a006356:	2300      	movs	r3, #0
1a006358:	220a      	movs	r2, #10
1a00635a:	4650      	mov	r0, sl
1a00635c:	f000 fb88 	bl	1a006a70 <__multadd>
1a006360:	4545      	cmp	r5, r8
1a006362:	4683      	mov	fp, r0
1a006364:	4629      	mov	r1, r5
1a006366:	f04f 0300 	mov.w	r3, #0
1a00636a:	f04f 020a 	mov.w	r2, #10
1a00636e:	4650      	mov	r0, sl
1a006370:	d013      	beq.n	1a00639a <_dtoa_r+0x95a>
1a006372:	f000 fb7d 	bl	1a006a70 <__multadd>
1a006376:	4641      	mov	r1, r8
1a006378:	4605      	mov	r5, r0
1a00637a:	2300      	movs	r3, #0
1a00637c:	220a      	movs	r2, #10
1a00637e:	4650      	mov	r0, sl
1a006380:	f000 fb76 	bl	1a006a70 <__multadd>
1a006384:	464e      	mov	r6, r9
1a006386:	4680      	mov	r8, r0
1a006388:	e7aa      	b.n	1a0062e0 <_dtoa_r+0x8a0>
1a00638a:	4601      	mov	r1, r0
1a00638c:	4650      	mov	r0, sl
1a00638e:	9204      	str	r2, [sp, #16]
1a006390:	f000 fb64 	bl	1a006a5c <_Bfree>
1a006394:	2301      	movs	r3, #1
1a006396:	9a04      	ldr	r2, [sp, #16]
1a006398:	e7c9      	b.n	1a00632e <_dtoa_r+0x8ee>
1a00639a:	f000 fb69 	bl	1a006a70 <__multadd>
1a00639e:	464e      	mov	r6, r9
1a0063a0:	4605      	mov	r5, r0
1a0063a2:	4680      	mov	r8, r0
1a0063a4:	e79c      	b.n	1a0062e0 <_dtoa_r+0x8a0>
1a0063a6:	9b02      	ldr	r3, [sp, #8]
1a0063a8:	2b02      	cmp	r3, #2
1a0063aa:	f340 8082 	ble.w	1a0064b2 <_dtoa_r+0xa72>
1a0063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0063b0:	2b00      	cmp	r3, #0
1a0063b2:	f47f adae 	bne.w	1a005f12 <_dtoa_r+0x4d2>
1a0063b6:	4639      	mov	r1, r7
1a0063b8:	2205      	movs	r2, #5
1a0063ba:	4650      	mov	r0, sl
1a0063bc:	f000 fb58 	bl	1a006a70 <__multadd>
1a0063c0:	4601      	mov	r1, r0
1a0063c2:	4607      	mov	r7, r0
1a0063c4:	4658      	mov	r0, fp
1a0063c6:	f000 fd35 	bl	1a006e34 <__mcmp>
1a0063ca:	2800      	cmp	r0, #0
1a0063cc:	f77f ada1 	ble.w	1a005f12 <_dtoa_r+0x4d2>
1a0063d0:	9c03      	ldr	r4, [sp, #12]
1a0063d2:	9b06      	ldr	r3, [sp, #24]
1a0063d4:	2231      	movs	r2, #49	; 0x31
1a0063d6:	f804 2b01 	strb.w	r2, [r4], #1
1a0063da:	3301      	adds	r3, #1
1a0063dc:	3301      	adds	r3, #1
1a0063de:	4639      	mov	r1, r7
1a0063e0:	4650      	mov	r0, sl
1a0063e2:	9306      	str	r3, [sp, #24]
1a0063e4:	f000 fb3a 	bl	1a006a5c <_Bfree>
1a0063e8:	2d00      	cmp	r5, #0
1a0063ea:	f47f af32 	bne.w	1a006252 <_dtoa_r+0x812>
1a0063ee:	e54e      	b.n	1a005e8e <_dtoa_r+0x44e>
1a0063f0:	4639      	mov	r1, r7
1a0063f2:	4658      	mov	r0, fp
1a0063f4:	f000 fd1e 	bl	1a006e34 <__mcmp>
1a0063f8:	2800      	cmp	r0, #0
1a0063fa:	f6bf aedb 	bge.w	1a0061b4 <_dtoa_r+0x774>
1a0063fe:	4659      	mov	r1, fp
1a006400:	2300      	movs	r3, #0
1a006402:	220a      	movs	r2, #10
1a006404:	4650      	mov	r0, sl
1a006406:	f000 fb33 	bl	1a006a70 <__multadd>
1a00640a:	9b06      	ldr	r3, [sp, #24]
1a00640c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a006410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006412:	4683      	mov	fp, r0
1a006414:	2b00      	cmp	r3, #0
1a006416:	f47f af43 	bne.w	1a0062a0 <_dtoa_r+0x860>
1a00641a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00641c:	2b00      	cmp	r3, #0
1a00641e:	f340 8202 	ble.w	1a006826 <_dtoa_r+0xde6>
1a006422:	9309      	str	r3, [sp, #36]	; 0x24
1a006424:	e6d0      	b.n	1a0061c8 <_dtoa_r+0x788>
1a006426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a006428:	4659      	mov	r1, fp
1a00642a:	4650      	mov	r0, sl
1a00642c:	f000 fc58 	bl	1a006ce0 <__pow5mult>
1a006430:	4683      	mov	fp, r0
1a006432:	e686      	b.n	1a006142 <_dtoa_r+0x702>
1a006434:	4b9f      	ldr	r3, [pc, #636]	; (1a0066b4 <_dtoa_r+0xc74>)
1a006436:	9303      	str	r3, [sp, #12]
1a006438:	3303      	adds	r3, #3
1a00643a:	f7ff bbe5 	b.w	1a005c08 <_dtoa_r+0x1c8>
1a00643e:	e9dd 1200 	ldrd	r1, r2, [sp]
1a006442:	2900      	cmp	r1, #0
1a006444:	f47f ae8a 	bne.w	1a00615c <_dtoa_r+0x71c>
1a006448:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00644c:	2b00      	cmp	r3, #0
1a00644e:	f000 80d5 	beq.w	1a0065fc <_dtoa_r+0xbbc>
1a006452:	9e00      	ldr	r6, [sp, #0]
1a006454:	e683      	b.n	1a00615e <_dtoa_r+0x71e>
1a006456:	2301      	movs	r3, #1
1a006458:	930b      	str	r3, [sp, #44]	; 0x2c
1a00645a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00645c:	2800      	cmp	r0, #0
1a00645e:	dd46      	ble.n	1a0064ee <_dtoa_r+0xaae>
1a006460:	900f      	str	r0, [sp, #60]	; 0x3c
1a006462:	9009      	str	r0, [sp, #36]	; 0x24
1a006464:	2100      	movs	r1, #0
1a006466:	2817      	cmp	r0, #23
1a006468:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00646c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00646e:	f77f ac19 	ble.w	1a005ca4 <_dtoa_r+0x264>
1a006472:	2201      	movs	r2, #1
1a006474:	2304      	movs	r3, #4
1a006476:	005b      	lsls	r3, r3, #1
1a006478:	f103 0614 	add.w	r6, r3, #20
1a00647c:	42b0      	cmp	r0, r6
1a00647e:	4611      	mov	r1, r2
1a006480:	f102 0201 	add.w	r2, r2, #1
1a006484:	d2f7      	bcs.n	1a006476 <_dtoa_r+0xa36>
1a006486:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00648a:	e40b      	b.n	1a005ca4 <_dtoa_r+0x264>
1a00648c:	2301      	movs	r3, #1
1a00648e:	930b      	str	r3, [sp, #44]	; 0x2c
1a006490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006492:	9a06      	ldr	r2, [sp, #24]
1a006494:	4413      	add	r3, r2
1a006496:	930f      	str	r3, [sp, #60]	; 0x3c
1a006498:	3301      	adds	r3, #1
1a00649a:	2b01      	cmp	r3, #1
1a00649c:	4618      	mov	r0, r3
1a00649e:	9309      	str	r3, [sp, #36]	; 0x24
1a0064a0:	bfb8      	it	lt
1a0064a2:	2001      	movlt	r0, #1
1a0064a4:	e7de      	b.n	1a006464 <_dtoa_r+0xa24>
1a0064a6:	2300      	movs	r3, #0
1a0064a8:	930b      	str	r3, [sp, #44]	; 0x2c
1a0064aa:	e7f1      	b.n	1a006490 <_dtoa_r+0xa50>
1a0064ac:	2300      	movs	r3, #0
1a0064ae:	930b      	str	r3, [sp, #44]	; 0x2c
1a0064b0:	e7d3      	b.n	1a00645a <_dtoa_r+0xa1a>
1a0064b2:	9b06      	ldr	r3, [sp, #24]
1a0064b4:	3301      	adds	r3, #1
1a0064b6:	9306      	str	r3, [sp, #24]
1a0064b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0064ba:	2b00      	cmp	r3, #0
1a0064bc:	f47f aefc 	bne.w	1a0062b8 <_dtoa_r+0x878>
1a0064c0:	4639      	mov	r1, r7
1a0064c2:	4658      	mov	r0, fp
1a0064c4:	f7ff fa2a 	bl	1a00591c <quorem>
1a0064c8:	9c03      	ldr	r4, [sp, #12]
1a0064ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a0064ce:	2300      	movs	r3, #0
1a0064d0:	f804 9b01 	strb.w	r9, [r4], #1
1a0064d4:	9300      	str	r3, [sp, #0]
1a0064d6:	e692      	b.n	1a0061fe <_dtoa_r+0x7be>
1a0064d8:	4629      	mov	r1, r5
1a0064da:	4622      	mov	r2, r4
1a0064dc:	4650      	mov	r0, sl
1a0064de:	f000 fc4f 	bl	1a006d80 <__lshift>
1a0064e2:	4605      	mov	r5, r0
1a0064e4:	e6eb      	b.n	1a0062be <_dtoa_r+0x87e>
1a0064e6:	1b9e      	subs	r6, r3, r6
1a0064e8:	e5ce      	b.n	1a006088 <_dtoa_r+0x648>
1a0064ea:	2602      	movs	r6, #2
1a0064ec:	e403      	b.n	1a005cf6 <_dtoa_r+0x2b6>
1a0064ee:	2501      	movs	r5, #1
1a0064f0:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a0064f4:	f7ff bbd2 	b.w	1a005c9c <_dtoa_r+0x25c>
1a0064f8:	d103      	bne.n	1a006502 <_dtoa_r+0xac2>
1a0064fa:	f019 0f01 	tst.w	r9, #1
1a0064fe:	f47f ae8c 	bne.w	1a00621a <_dtoa_r+0x7da>
1a006502:	1e63      	subs	r3, r4, #1
1a006504:	e001      	b.n	1a00650a <_dtoa_r+0xaca>
1a006506:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00650a:	2a30      	cmp	r2, #48	; 0x30
1a00650c:	f103 0401 	add.w	r4, r3, #1
1a006510:	d0f9      	beq.n	1a006506 <_dtoa_r+0xac6>
1a006512:	e690      	b.n	1a006236 <_dtoa_r+0x7f6>
1a006514:	9a06      	ldr	r2, [sp, #24]
1a006516:	3201      	adds	r2, #1
1a006518:	9206      	str	r2, [sp, #24]
1a00651a:	9a03      	ldr	r2, [sp, #12]
1a00651c:	2331      	movs	r3, #49	; 0x31
1a00651e:	7013      	strb	r3, [r2, #0]
1a006520:	e689      	b.n	1a006236 <_dtoa_r+0x7f6>
1a006522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a006524:	2a00      	cmp	r2, #0
1a006526:	f000 8126 	beq.w	1a006776 <_dtoa_r+0xd36>
1a00652a:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a00652e:	9a08      	ldr	r2, [sp, #32]
1a006530:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a006532:	4614      	mov	r4, r2
1a006534:	441a      	add	r2, r3
1a006536:	4498      	add	r8, r3
1a006538:	9208      	str	r2, [sp, #32]
1a00653a:	e5ae      	b.n	1a00609a <_dtoa_r+0x65a>
1a00653c:	4630      	mov	r0, r6
1a00653e:	f7fc fa47 	bl	1a0029d0 <__aeabi_i2d>
1a006542:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006546:	f7fc faad 	bl	1a002aa4 <__aeabi_dmul>
1a00654a:	2200      	movs	r2, #0
1a00654c:	4b5a      	ldr	r3, [pc, #360]	; (1a0066b8 <_dtoa_r+0xc78>)
1a00654e:	f7fc f8f3 	bl	1a002738 <__adddf3>
1a006552:	4604      	mov	r4, r0
1a006554:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a006558:	2200      	movs	r2, #0
1a00655a:	4b58      	ldr	r3, [pc, #352]	; (1a0066bc <_dtoa_r+0xc7c>)
1a00655c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006560:	f7fc f8e8 	bl	1a002734 <__aeabi_dsub>
1a006564:	4622      	mov	r2, r4
1a006566:	462b      	mov	r3, r5
1a006568:	4606      	mov	r6, r0
1a00656a:	460f      	mov	r7, r1
1a00656c:	f7fc fd2a 	bl	1a002fc4 <__aeabi_dcmpgt>
1a006570:	2800      	cmp	r0, #0
1a006572:	f040 8089 	bne.w	1a006688 <_dtoa_r+0xc48>
1a006576:	4622      	mov	r2, r4
1a006578:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a00657c:	4630      	mov	r0, r6
1a00657e:	4639      	mov	r1, r7
1a006580:	f7fc fd02 	bl	1a002f88 <__aeabi_dcmplt>
1a006584:	2800      	cmp	r0, #0
1a006586:	f43f ac9c 	beq.w	1a005ec2 <_dtoa_r+0x482>
1a00658a:	2700      	movs	r7, #0
1a00658c:	463d      	mov	r5, r7
1a00658e:	e4c0      	b.n	1a005f12 <_dtoa_r+0x4d2>
1a006590:	f000 80f5 	beq.w	1a00677e <_dtoa_r+0xd3e>
1a006594:	9b06      	ldr	r3, [sp, #24]
1a006596:	425c      	negs	r4, r3
1a006598:	4b49      	ldr	r3, [pc, #292]	; (1a0066c0 <_dtoa_r+0xc80>)
1a00659a:	f004 020f 	and.w	r2, r4, #15
1a00659e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0065a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0065aa:	f7fc fa7b 	bl	1a002aa4 <__aeabi_dmul>
1a0065ae:	1124      	asrs	r4, r4, #4
1a0065b0:	e9cd 0100 	strd	r0, r1, [sp]
1a0065b4:	f000 80e3 	beq.w	1a00677e <_dtoa_r+0xd3e>
1a0065b8:	4d42      	ldr	r5, [pc, #264]	; (1a0066c4 <_dtoa_r+0xc84>)
1a0065ba:	2300      	movs	r3, #0
1a0065bc:	2602      	movs	r6, #2
1a0065be:	07e2      	lsls	r2, r4, #31
1a0065c0:	d505      	bpl.n	1a0065ce <_dtoa_r+0xb8e>
1a0065c2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a0065c6:	f7fc fa6d 	bl	1a002aa4 <__aeabi_dmul>
1a0065ca:	3601      	adds	r6, #1
1a0065cc:	2301      	movs	r3, #1
1a0065ce:	1064      	asrs	r4, r4, #1
1a0065d0:	f105 0508 	add.w	r5, r5, #8
1a0065d4:	d1f3      	bne.n	1a0065be <_dtoa_r+0xb7e>
1a0065d6:	2b00      	cmp	r3, #0
1a0065d8:	f43f aba6 	beq.w	1a005d28 <_dtoa_r+0x2e8>
1a0065dc:	e9cd 0100 	strd	r0, r1, [sp]
1a0065e0:	f7ff bba2 	b.w	1a005d28 <_dtoa_r+0x2e8>
1a0065e4:	900d      	str	r0, [sp, #52]	; 0x34
1a0065e6:	e564      	b.n	1a0060b2 <_dtoa_r+0x672>
1a0065e8:	e9dd 1200 	ldrd	r1, r2, [sp]
1a0065ec:	2900      	cmp	r1, #0
1a0065ee:	f47f ae49 	bne.w	1a006284 <_dtoa_r+0x844>
1a0065f2:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a0065f6:	2b00      	cmp	r3, #0
1a0065f8:	f47f ae44 	bne.w	1a006284 <_dtoa_r+0x844>
1a0065fc:	4e32      	ldr	r6, [pc, #200]	; (1a0066c8 <_dtoa_r+0xc88>)
1a0065fe:	4016      	ands	r6, r2
1a006600:	2e00      	cmp	r6, #0
1a006602:	f43f adac 	beq.w	1a00615e <_dtoa_r+0x71e>
1a006606:	9b08      	ldr	r3, [sp, #32]
1a006608:	3301      	adds	r3, #1
1a00660a:	9308      	str	r3, [sp, #32]
1a00660c:	f108 0801 	add.w	r8, r8, #1
1a006610:	2601      	movs	r6, #1
1a006612:	e5a4      	b.n	1a00615e <_dtoa_r+0x71e>
1a006614:	2b00      	cmp	r3, #0
1a006616:	4627      	mov	r7, r4
1a006618:	464c      	mov	r4, r9
1a00661a:	4691      	mov	r9, r2
1a00661c:	dd12      	ble.n	1a006644 <_dtoa_r+0xc04>
1a00661e:	4659      	mov	r1, fp
1a006620:	2201      	movs	r2, #1
1a006622:	4650      	mov	r0, sl
1a006624:	f000 fbac 	bl	1a006d80 <__lshift>
1a006628:	4639      	mov	r1, r7
1a00662a:	4683      	mov	fp, r0
1a00662c:	f000 fc02 	bl	1a006e34 <__mcmp>
1a006630:	2800      	cmp	r0, #0
1a006632:	f340 80df 	ble.w	1a0067f4 <_dtoa_r+0xdb4>
1a006636:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a00663a:	f000 80d0 	beq.w	1a0067de <_dtoa_r+0xd9e>
1a00663e:	9b00      	ldr	r3, [sp, #0]
1a006640:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a006644:	9500      	str	r5, [sp, #0]
1a006646:	f886 9000 	strb.w	r9, [r6]
1a00664a:	4645      	mov	r5, r8
1a00664c:	e5f3      	b.n	1a006236 <_dtoa_r+0x7f6>
1a00664e:	6869      	ldr	r1, [r5, #4]
1a006650:	4650      	mov	r0, sl
1a006652:	f000 f9dd 	bl	1a006a10 <_Balloc>
1a006656:	692b      	ldr	r3, [r5, #16]
1a006658:	3302      	adds	r3, #2
1a00665a:	009a      	lsls	r2, r3, #2
1a00665c:	4604      	mov	r4, r0
1a00665e:	f105 010c 	add.w	r1, r5, #12
1a006662:	300c      	adds	r0, #12
1a006664:	f7fd fab0 	bl	1a003bc8 <memcpy>
1a006668:	4621      	mov	r1, r4
1a00666a:	2201      	movs	r2, #1
1a00666c:	4650      	mov	r0, sl
1a00666e:	f000 fb87 	bl	1a006d80 <__lshift>
1a006672:	4680      	mov	r8, r0
1a006674:	e627      	b.n	1a0062c6 <_dtoa_r+0x886>
1a006676:	f8dd b000 	ldr.w	fp, [sp]
1a00667a:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00667e:	e406      	b.n	1a005e8e <_dtoa_r+0x44e>
1a006680:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a006684:	1a9c      	subs	r4, r3, r2
1a006686:	e508      	b.n	1a00609a <_dtoa_r+0x65a>
1a006688:	2700      	movs	r7, #0
1a00668a:	463d      	mov	r5, r7
1a00668c:	e6a0      	b.n	1a0063d0 <_dtoa_r+0x990>
1a00668e:	2a39      	cmp	r2, #57	; 0x39
1a006690:	4627      	mov	r7, r4
1a006692:	464c      	mov	r4, r9
1a006694:	f000 80a3 	beq.w	1a0067de <_dtoa_r+0xd9e>
1a006698:	f102 0901 	add.w	r9, r2, #1
1a00669c:	9500      	str	r5, [sp, #0]
1a00669e:	f886 9000 	strb.w	r9, [r6]
1a0066a2:	4645      	mov	r5, r8
1a0066a4:	e5c7      	b.n	1a006236 <_dtoa_r+0x7f6>
1a0066a6:	4627      	mov	r7, r4
1a0066a8:	9500      	str	r5, [sp, #0]
1a0066aa:	464c      	mov	r4, r9
1a0066ac:	4645      	mov	r5, r8
1a0066ae:	4691      	mov	r9, r2
1a0066b0:	e5a5      	b.n	1a0061fe <_dtoa_r+0x7be>
1a0066b2:	bf00      	nop
1a0066b4:	1a007bb0 	.word	0x1a007bb0
1a0066b8:	401c0000 	.word	0x401c0000
1a0066bc:	40140000 	.word	0x40140000
1a0066c0:	1a007be8 	.word	0x1a007be8
1a0066c4:	1a007bc0 	.word	0x1a007bc0
1a0066c8:	7ff00000 	.word	0x7ff00000
1a0066cc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0066d0:	f7fc f9e8 	bl	1a002aa4 <__aeabi_dmul>
1a0066d4:	9b03      	ldr	r3, [sp, #12]
1a0066d6:	701d      	strb	r5, [r3, #0]
1a0066d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0066da:	2b01      	cmp	r3, #1
1a0066dc:	e9cd 0100 	strd	r0, r1, [sp]
1a0066e0:	d023      	beq.n	1a00672a <_dtoa_r+0xcea>
1a0066e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0066e4:	9a03      	ldr	r2, [sp, #12]
1a0066e6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a0066ea:	4413      	add	r3, r2
1a0066ec:	46c1      	mov	r9, r8
1a0066ee:	4698      	mov	r8, r3
1a0066f0:	2200      	movs	r2, #0
1a0066f2:	4b64      	ldr	r3, [pc, #400]	; (1a006884 <_dtoa_r+0xe44>)
1a0066f4:	4630      	mov	r0, r6
1a0066f6:	4639      	mov	r1, r7
1a0066f8:	f7fc f9d4 	bl	1a002aa4 <__aeabi_dmul>
1a0066fc:	460f      	mov	r7, r1
1a0066fe:	4606      	mov	r6, r0
1a006700:	f000 ff9c 	bl	1a00763c <__aeabi_d2iz>
1a006704:	4605      	mov	r5, r0
1a006706:	f7fc f963 	bl	1a0029d0 <__aeabi_i2d>
1a00670a:	3530      	adds	r5, #48	; 0x30
1a00670c:	4602      	mov	r2, r0
1a00670e:	460b      	mov	r3, r1
1a006710:	4630      	mov	r0, r6
1a006712:	4639      	mov	r1, r7
1a006714:	f7fc f80e 	bl	1a002734 <__aeabi_dsub>
1a006718:	f804 5b01 	strb.w	r5, [r4], #1
1a00671c:	45a0      	cmp	r8, r4
1a00671e:	4606      	mov	r6, r0
1a006720:	460f      	mov	r7, r1
1a006722:	d1e5      	bne.n	1a0066f0 <_dtoa_r+0xcb0>
1a006724:	46c8      	mov	r8, r9
1a006726:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a00672a:	4b57      	ldr	r3, [pc, #348]	; (1a006888 <_dtoa_r+0xe48>)
1a00672c:	2200      	movs	r2, #0
1a00672e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006732:	f7fc f801 	bl	1a002738 <__adddf3>
1a006736:	4632      	mov	r2, r6
1a006738:	463b      	mov	r3, r7
1a00673a:	f7fc fc25 	bl	1a002f88 <__aeabi_dcmplt>
1a00673e:	2800      	cmp	r0, #0
1a006740:	d152      	bne.n	1a0067e8 <_dtoa_r+0xda8>
1a006742:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006746:	2000      	movs	r0, #0
1a006748:	494f      	ldr	r1, [pc, #316]	; (1a006888 <_dtoa_r+0xe48>)
1a00674a:	f7fb fff3 	bl	1a002734 <__aeabi_dsub>
1a00674e:	4632      	mov	r2, r6
1a006750:	463b      	mov	r3, r7
1a006752:	f7fc fc37 	bl	1a002fc4 <__aeabi_dcmpgt>
1a006756:	2800      	cmp	r0, #0
1a006758:	f43f abb3 	beq.w	1a005ec2 <_dtoa_r+0x482>
1a00675c:	e000      	b.n	1a006760 <_dtoa_r+0xd20>
1a00675e:	4614      	mov	r4, r2
1a006760:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a006764:	2b30      	cmp	r3, #48	; 0x30
1a006766:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a00676a:	d0f8      	beq.n	1a00675e <_dtoa_r+0xd1e>
1a00676c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00676e:	3301      	adds	r3, #1
1a006770:	9306      	str	r3, [sp, #24]
1a006772:	f7ff bb8c 	b.w	1a005e8e <_dtoa_r+0x44e>
1a006776:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a006778:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a00677c:	e6d7      	b.n	1a00652e <_dtoa_r+0xaee>
1a00677e:	2602      	movs	r6, #2
1a006780:	f7ff bad2 	b.w	1a005d28 <_dtoa_r+0x2e8>
1a006784:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006786:	2b00      	cmp	r3, #0
1a006788:	f43f aed8 	beq.w	1a00653c <_dtoa_r+0xafc>
1a00678c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a00678e:	2f00      	cmp	r7, #0
1a006790:	f77f ab97 	ble.w	1a005ec2 <_dtoa_r+0x482>
1a006794:	2200      	movs	r2, #0
1a006796:	4b3b      	ldr	r3, [pc, #236]	; (1a006884 <_dtoa_r+0xe44>)
1a006798:	4620      	mov	r0, r4
1a00679a:	4629      	mov	r1, r5
1a00679c:	f7fc f982 	bl	1a002aa4 <__aeabi_dmul>
1a0067a0:	4604      	mov	r4, r0
1a0067a2:	460d      	mov	r5, r1
1a0067a4:	1c70      	adds	r0, r6, #1
1a0067a6:	e9cd 4500 	strd	r4, r5, [sp]
1a0067aa:	f7fc f911 	bl	1a0029d0 <__aeabi_i2d>
1a0067ae:	4622      	mov	r2, r4
1a0067b0:	462b      	mov	r3, r5
1a0067b2:	f7fc f977 	bl	1a002aa4 <__aeabi_dmul>
1a0067b6:	4b35      	ldr	r3, [pc, #212]	; (1a00688c <_dtoa_r+0xe4c>)
1a0067b8:	2200      	movs	r2, #0
1a0067ba:	f7fb ffbd 	bl	1a002738 <__adddf3>
1a0067be:	9b06      	ldr	r3, [sp, #24]
1a0067c0:	9710      	str	r7, [sp, #64]	; 0x40
1a0067c2:	3b01      	subs	r3, #1
1a0067c4:	4604      	mov	r4, r0
1a0067c6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a0067ca:	9312      	str	r3, [sp, #72]	; 0x48
1a0067cc:	f7ff bacf 	b.w	1a005d6e <_dtoa_r+0x32e>
1a0067d0:	9a06      	ldr	r2, [sp, #24]
1a0067d2:	3201      	adds	r2, #1
1a0067d4:	9206      	str	r2, [sp, #24]
1a0067d6:	2231      	movs	r2, #49	; 0x31
1a0067d8:	701a      	strb	r2, [r3, #0]
1a0067da:	f7ff bb58 	b.w	1a005e8e <_dtoa_r+0x44e>
1a0067de:	2239      	movs	r2, #57	; 0x39
1a0067e0:	9500      	str	r5, [sp, #0]
1a0067e2:	7032      	strb	r2, [r6, #0]
1a0067e4:	4645      	mov	r5, r8
1a0067e6:	e518      	b.n	1a00621a <_dtoa_r+0x7da>
1a0067e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0067ea:	3301      	adds	r3, #1
1a0067ec:	9306      	str	r3, [sp, #24]
1a0067ee:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a0067f2:	e427      	b.n	1a006044 <_dtoa_r+0x604>
1a0067f4:	f47f af26 	bne.w	1a006644 <_dtoa_r+0xc04>
1a0067f8:	f019 0f01 	tst.w	r9, #1
1a0067fc:	f47f af1b 	bne.w	1a006636 <_dtoa_r+0xbf6>
1a006800:	e720      	b.n	1a006644 <_dtoa_r+0xc04>
1a006802:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006804:	3301      	adds	r3, #1
1a006806:	46da      	mov	sl, fp
1a006808:	9306      	str	r3, [sp, #24]
1a00680a:	f8dd b000 	ldr.w	fp, [sp]
1a00680e:	e419      	b.n	1a006044 <_dtoa_r+0x604>
1a006810:	2a39      	cmp	r2, #57	; 0x39
1a006812:	463b      	mov	r3, r7
1a006814:	4691      	mov	r9, r2
1a006816:	4627      	mov	r7, r4
1a006818:	f106 0401 	add.w	r4, r6, #1
1a00681c:	d0df      	beq.n	1a0067de <_dtoa_r+0xd9e>
1a00681e:	2b00      	cmp	r3, #0
1a006820:	f73f af0d 	bgt.w	1a00663e <_dtoa_r+0xbfe>
1a006824:	e70e      	b.n	1a006644 <_dtoa_r+0xc04>
1a006826:	9b02      	ldr	r3, [sp, #8]
1a006828:	2b02      	cmp	r3, #2
1a00682a:	f77f ae49 	ble.w	1a0064c0 <_dtoa_r+0xa80>
1a00682e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006830:	9309      	str	r3, [sp, #36]	; 0x24
1a006832:	f8cd 8018 	str.w	r8, [sp, #24]
1a006836:	e5ba      	b.n	1a0063ae <_dtoa_r+0x96e>
1a006838:	9b02      	ldr	r3, [sp, #8]
1a00683a:	2b02      	cmp	r3, #2
1a00683c:	dcf7      	bgt.n	1a00682e <_dtoa_r+0xdee>
1a00683e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006840:	e539      	b.n	1a0062b6 <_dtoa_r+0x876>
1a006842:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006844:	3301      	adds	r3, #1
1a006846:	9306      	str	r3, [sp, #24]
1a006848:	f7ff bbfc 	b.w	1a006044 <_dtoa_r+0x604>
1a00684c:	4b10      	ldr	r3, [pc, #64]	; (1a006890 <_dtoa_r+0xe50>)
1a00684e:	9303      	str	r3, [sp, #12]
1a006850:	f7ff b934 	b.w	1a005abc <_dtoa_r+0x7c>
1a006854:	f43f ac98 	beq.w	1a006188 <_dtoa_r+0x748>
1a006858:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a00685c:	e48f      	b.n	1a00617e <_dtoa_r+0x73e>
1a00685e:	2400      	movs	r4, #0
1a006860:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a006864:	4621      	mov	r1, r4
1a006866:	4650      	mov	r0, sl
1a006868:	f000 f8d2 	bl	1a006a10 <_Balloc>
1a00686c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a006870:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a006874:	930f      	str	r3, [sp, #60]	; 0x3c
1a006876:	2301      	movs	r3, #1
1a006878:	9003      	str	r0, [sp, #12]
1a00687a:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a00687e:	930b      	str	r3, [sp, #44]	; 0x2c
1a006880:	f7ff bb23 	b.w	1a005eca <_dtoa_r+0x48a>
1a006884:	40240000 	.word	0x40240000
1a006888:	3fe00000 	.word	0x3fe00000
1a00688c:	401c0000 	.word	0x401c0000
1a006890:	1a007bb4 	.word	0x1a007bb4

1a006894 <_localeconv_r>:
1a006894:	4800      	ldr	r0, [pc, #0]	; (1a006898 <_localeconv_r+0x4>)
1a006896:	4770      	bx	lr
1a006898:	10000978 	.word	0x10000978
1a00689c:	ffffffff 	.word	0xffffffff

1a0068a0 <memchr>:
1a0068a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0068a4:	2a10      	cmp	r2, #16
1a0068a6:	db2b      	blt.n	1a006900 <memchr+0x60>
1a0068a8:	f010 0f07 	tst.w	r0, #7
1a0068ac:	d008      	beq.n	1a0068c0 <memchr+0x20>
1a0068ae:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0068b2:	3a01      	subs	r2, #1
1a0068b4:	428b      	cmp	r3, r1
1a0068b6:	d02d      	beq.n	1a006914 <memchr+0x74>
1a0068b8:	f010 0f07 	tst.w	r0, #7
1a0068bc:	b342      	cbz	r2, 1a006910 <memchr+0x70>
1a0068be:	d1f6      	bne.n	1a0068ae <memchr+0xe>
1a0068c0:	b4f0      	push	{r4, r5, r6, r7}
1a0068c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0068c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0068ca:	f022 0407 	bic.w	r4, r2, #7
1a0068ce:	f07f 0700 	mvns.w	r7, #0
1a0068d2:	2300      	movs	r3, #0
1a0068d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0068d8:	3c08      	subs	r4, #8
1a0068da:	ea85 0501 	eor.w	r5, r5, r1
1a0068de:	ea86 0601 	eor.w	r6, r6, r1
1a0068e2:	fa85 f547 	uadd8	r5, r5, r7
1a0068e6:	faa3 f587 	sel	r5, r3, r7
1a0068ea:	fa86 f647 	uadd8	r6, r6, r7
1a0068ee:	faa5 f687 	sel	r6, r5, r7
1a0068f2:	b98e      	cbnz	r6, 1a006918 <memchr+0x78>
1a0068f4:	d1ee      	bne.n	1a0068d4 <memchr+0x34>
1a0068f6:	bcf0      	pop	{r4, r5, r6, r7}
1a0068f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0068fc:	f002 0207 	and.w	r2, r2, #7
1a006900:	b132      	cbz	r2, 1a006910 <memchr+0x70>
1a006902:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006906:	3a01      	subs	r2, #1
1a006908:	ea83 0301 	eor.w	r3, r3, r1
1a00690c:	b113      	cbz	r3, 1a006914 <memchr+0x74>
1a00690e:	d1f8      	bne.n	1a006902 <memchr+0x62>
1a006910:	2000      	movs	r0, #0
1a006912:	4770      	bx	lr
1a006914:	3801      	subs	r0, #1
1a006916:	4770      	bx	lr
1a006918:	2d00      	cmp	r5, #0
1a00691a:	bf06      	itte	eq
1a00691c:	4635      	moveq	r5, r6
1a00691e:	3803      	subeq	r0, #3
1a006920:	3807      	subne	r0, #7
1a006922:	f015 0f01 	tst.w	r5, #1
1a006926:	d107      	bne.n	1a006938 <memchr+0x98>
1a006928:	3001      	adds	r0, #1
1a00692a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00692e:	bf02      	ittt	eq
1a006930:	3001      	addeq	r0, #1
1a006932:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a006936:	3001      	addeq	r0, #1
1a006938:	bcf0      	pop	{r4, r5, r6, r7}
1a00693a:	3801      	subs	r0, #1
1a00693c:	4770      	bx	lr
1a00693e:	bf00      	nop

1a006940 <memmove>:
1a006940:	4288      	cmp	r0, r1
1a006942:	b4f0      	push	{r4, r5, r6, r7}
1a006944:	d90d      	bls.n	1a006962 <memmove+0x22>
1a006946:	188b      	adds	r3, r1, r2
1a006948:	4283      	cmp	r3, r0
1a00694a:	d90a      	bls.n	1a006962 <memmove+0x22>
1a00694c:	1884      	adds	r4, r0, r2
1a00694e:	b132      	cbz	r2, 1a00695e <memmove+0x1e>
1a006950:	4622      	mov	r2, r4
1a006952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a006956:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a00695a:	4299      	cmp	r1, r3
1a00695c:	d1f9      	bne.n	1a006952 <memmove+0x12>
1a00695e:	bcf0      	pop	{r4, r5, r6, r7}
1a006960:	4770      	bx	lr
1a006962:	2a0f      	cmp	r2, #15
1a006964:	d80e      	bhi.n	1a006984 <memmove+0x44>
1a006966:	4603      	mov	r3, r0
1a006968:	1e54      	subs	r4, r2, #1
1a00696a:	2a00      	cmp	r2, #0
1a00696c:	d0f7      	beq.n	1a00695e <memmove+0x1e>
1a00696e:	3401      	adds	r4, #1
1a006970:	440c      	add	r4, r1
1a006972:	3b01      	subs	r3, #1
1a006974:	f811 2b01 	ldrb.w	r2, [r1], #1
1a006978:	f803 2f01 	strb.w	r2, [r3, #1]!
1a00697c:	42a1      	cmp	r1, r4
1a00697e:	d1f9      	bne.n	1a006974 <memmove+0x34>
1a006980:	bcf0      	pop	{r4, r5, r6, r7}
1a006982:	4770      	bx	lr
1a006984:	ea40 0301 	orr.w	r3, r0, r1
1a006988:	079b      	lsls	r3, r3, #30
1a00698a:	d13b      	bne.n	1a006a04 <memmove+0xc4>
1a00698c:	f1a2 0710 	sub.w	r7, r2, #16
1a006990:	093f      	lsrs	r7, r7, #4
1a006992:	f101 0620 	add.w	r6, r1, #32
1a006996:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a00699a:	f101 0310 	add.w	r3, r1, #16
1a00699e:	f100 0410 	add.w	r4, r0, #16
1a0069a2:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a0069a6:	f844 5c10 	str.w	r5, [r4, #-16]
1a0069aa:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a0069ae:	f844 5c0c 	str.w	r5, [r4, #-12]
1a0069b2:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a0069b6:	f844 5c08 	str.w	r5, [r4, #-8]
1a0069ba:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a0069be:	f844 5c04 	str.w	r5, [r4, #-4]
1a0069c2:	3310      	adds	r3, #16
1a0069c4:	42b3      	cmp	r3, r6
1a0069c6:	f104 0410 	add.w	r4, r4, #16
1a0069ca:	d1ea      	bne.n	1a0069a2 <memmove+0x62>
1a0069cc:	1c7b      	adds	r3, r7, #1
1a0069ce:	011b      	lsls	r3, r3, #4
1a0069d0:	f012 0f0c 	tst.w	r2, #12
1a0069d4:	4419      	add	r1, r3
1a0069d6:	f002 050f 	and.w	r5, r2, #15
1a0069da:	4403      	add	r3, r0
1a0069dc:	d015      	beq.n	1a006a0a <memmove+0xca>
1a0069de:	3d04      	subs	r5, #4
1a0069e0:	08ad      	lsrs	r5, r5, #2
1a0069e2:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a0069e6:	1f1c      	subs	r4, r3, #4
1a0069e8:	460e      	mov	r6, r1
1a0069ea:	f856 7b04 	ldr.w	r7, [r6], #4
1a0069ee:	f844 7f04 	str.w	r7, [r4, #4]!
1a0069f2:	4564      	cmp	r4, ip
1a0069f4:	d1f9      	bne.n	1a0069ea <memmove+0xaa>
1a0069f6:	3501      	adds	r5, #1
1a0069f8:	00ad      	lsls	r5, r5, #2
1a0069fa:	442b      	add	r3, r5
1a0069fc:	4429      	add	r1, r5
1a0069fe:	f002 0203 	and.w	r2, r2, #3
1a006a02:	e7b1      	b.n	1a006968 <memmove+0x28>
1a006a04:	1e54      	subs	r4, r2, #1
1a006a06:	4603      	mov	r3, r0
1a006a08:	e7b1      	b.n	1a00696e <memmove+0x2e>
1a006a0a:	462a      	mov	r2, r5
1a006a0c:	e7ac      	b.n	1a006968 <memmove+0x28>
1a006a0e:	bf00      	nop

1a006a10 <_Balloc>:
1a006a10:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006a12:	b570      	push	{r4, r5, r6, lr}
1a006a14:	4605      	mov	r5, r0
1a006a16:	460c      	mov	r4, r1
1a006a18:	b14b      	cbz	r3, 1a006a2e <_Balloc+0x1e>
1a006a1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a006a1e:	b180      	cbz	r0, 1a006a42 <_Balloc+0x32>
1a006a20:	6802      	ldr	r2, [r0, #0]
1a006a22:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a006a26:	2300      	movs	r3, #0
1a006a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a006a2c:	bd70      	pop	{r4, r5, r6, pc}
1a006a2e:	2221      	movs	r2, #33	; 0x21
1a006a30:	2104      	movs	r1, #4
1a006a32:	f000 fd99 	bl	1a007568 <_calloc_r>
1a006a36:	4603      	mov	r3, r0
1a006a38:	64e8      	str	r0, [r5, #76]	; 0x4c
1a006a3a:	2800      	cmp	r0, #0
1a006a3c:	d1ed      	bne.n	1a006a1a <_Balloc+0xa>
1a006a3e:	2000      	movs	r0, #0
1a006a40:	bd70      	pop	{r4, r5, r6, pc}
1a006a42:	2101      	movs	r1, #1
1a006a44:	fa01 f604 	lsl.w	r6, r1, r4
1a006a48:	1d72      	adds	r2, r6, #5
1a006a4a:	4628      	mov	r0, r5
1a006a4c:	0092      	lsls	r2, r2, #2
1a006a4e:	f000 fd8b 	bl	1a007568 <_calloc_r>
1a006a52:	2800      	cmp	r0, #0
1a006a54:	d0f3      	beq.n	1a006a3e <_Balloc+0x2e>
1a006a56:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a006a5a:	e7e4      	b.n	1a006a26 <_Balloc+0x16>

1a006a5c <_Bfree>:
1a006a5c:	b131      	cbz	r1, 1a006a6c <_Bfree+0x10>
1a006a5e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006a60:	684a      	ldr	r2, [r1, #4]
1a006a62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a006a66:	6008      	str	r0, [r1, #0]
1a006a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a006a6c:	4770      	bx	lr
1a006a6e:	bf00      	nop

1a006a70 <__multadd>:
1a006a70:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006a72:	690c      	ldr	r4, [r1, #16]
1a006a74:	b083      	sub	sp, #12
1a006a76:	460d      	mov	r5, r1
1a006a78:	4606      	mov	r6, r0
1a006a7a:	f101 0c14 	add.w	ip, r1, #20
1a006a7e:	2700      	movs	r7, #0
1a006a80:	f8dc 0000 	ldr.w	r0, [ip]
1a006a84:	b281      	uxth	r1, r0
1a006a86:	fb02 3301 	mla	r3, r2, r1, r3
1a006a8a:	0c19      	lsrs	r1, r3, #16
1a006a8c:	0c00      	lsrs	r0, r0, #16
1a006a8e:	fb02 1000 	mla	r0, r2, r0, r1
1a006a92:	b29b      	uxth	r3, r3
1a006a94:	3701      	adds	r7, #1
1a006a96:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a006a9a:	42bc      	cmp	r4, r7
1a006a9c:	f84c 3b04 	str.w	r3, [ip], #4
1a006aa0:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a006aa4:	dcec      	bgt.n	1a006a80 <__multadd+0x10>
1a006aa6:	b13b      	cbz	r3, 1a006ab8 <__multadd+0x48>
1a006aa8:	68aa      	ldr	r2, [r5, #8]
1a006aaa:	42a2      	cmp	r2, r4
1a006aac:	dd07      	ble.n	1a006abe <__multadd+0x4e>
1a006aae:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a006ab2:	3401      	adds	r4, #1
1a006ab4:	6153      	str	r3, [r2, #20]
1a006ab6:	612c      	str	r4, [r5, #16]
1a006ab8:	4628      	mov	r0, r5
1a006aba:	b003      	add	sp, #12
1a006abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006abe:	6869      	ldr	r1, [r5, #4]
1a006ac0:	9301      	str	r3, [sp, #4]
1a006ac2:	3101      	adds	r1, #1
1a006ac4:	4630      	mov	r0, r6
1a006ac6:	f7ff ffa3 	bl	1a006a10 <_Balloc>
1a006aca:	692a      	ldr	r2, [r5, #16]
1a006acc:	3202      	adds	r2, #2
1a006ace:	f105 010c 	add.w	r1, r5, #12
1a006ad2:	4607      	mov	r7, r0
1a006ad4:	0092      	lsls	r2, r2, #2
1a006ad6:	300c      	adds	r0, #12
1a006ad8:	f7fd f876 	bl	1a003bc8 <memcpy>
1a006adc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a006ade:	6869      	ldr	r1, [r5, #4]
1a006ae0:	9b01      	ldr	r3, [sp, #4]
1a006ae2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a006ae6:	6028      	str	r0, [r5, #0]
1a006ae8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a006aec:	463d      	mov	r5, r7
1a006aee:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a006af2:	3401      	adds	r4, #1
1a006af4:	6153      	str	r3, [r2, #20]
1a006af6:	612c      	str	r4, [r5, #16]
1a006af8:	e7de      	b.n	1a006ab8 <__multadd+0x48>
1a006afa:	bf00      	nop

1a006afc <__hi0bits>:
1a006afc:	0c02      	lsrs	r2, r0, #16
1a006afe:	0412      	lsls	r2, r2, #16
1a006b00:	4603      	mov	r3, r0
1a006b02:	b9ca      	cbnz	r2, 1a006b38 <__hi0bits+0x3c>
1a006b04:	0403      	lsls	r3, r0, #16
1a006b06:	2010      	movs	r0, #16
1a006b08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a006b0c:	bf04      	itt	eq
1a006b0e:	021b      	lsleq	r3, r3, #8
1a006b10:	3008      	addeq	r0, #8
1a006b12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a006b16:	bf04      	itt	eq
1a006b18:	011b      	lsleq	r3, r3, #4
1a006b1a:	3004      	addeq	r0, #4
1a006b1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a006b20:	bf04      	itt	eq
1a006b22:	009b      	lsleq	r3, r3, #2
1a006b24:	3002      	addeq	r0, #2
1a006b26:	2b00      	cmp	r3, #0
1a006b28:	db05      	blt.n	1a006b36 <__hi0bits+0x3a>
1a006b2a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a006b2e:	f100 0001 	add.w	r0, r0, #1
1a006b32:	bf08      	it	eq
1a006b34:	2020      	moveq	r0, #32
1a006b36:	4770      	bx	lr
1a006b38:	2000      	movs	r0, #0
1a006b3a:	e7e5      	b.n	1a006b08 <__hi0bits+0xc>

1a006b3c <__lo0bits>:
1a006b3c:	6803      	ldr	r3, [r0, #0]
1a006b3e:	f013 0207 	ands.w	r2, r3, #7
1a006b42:	4601      	mov	r1, r0
1a006b44:	d007      	beq.n	1a006b56 <__lo0bits+0x1a>
1a006b46:	07da      	lsls	r2, r3, #31
1a006b48:	d420      	bmi.n	1a006b8c <__lo0bits+0x50>
1a006b4a:	0798      	lsls	r0, r3, #30
1a006b4c:	d522      	bpl.n	1a006b94 <__lo0bits+0x58>
1a006b4e:	085b      	lsrs	r3, r3, #1
1a006b50:	600b      	str	r3, [r1, #0]
1a006b52:	2001      	movs	r0, #1
1a006b54:	4770      	bx	lr
1a006b56:	b298      	uxth	r0, r3
1a006b58:	b9b0      	cbnz	r0, 1a006b88 <__lo0bits+0x4c>
1a006b5a:	0c1b      	lsrs	r3, r3, #16
1a006b5c:	2010      	movs	r0, #16
1a006b5e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a006b62:	bf04      	itt	eq
1a006b64:	0a1b      	lsreq	r3, r3, #8
1a006b66:	3008      	addeq	r0, #8
1a006b68:	071a      	lsls	r2, r3, #28
1a006b6a:	bf04      	itt	eq
1a006b6c:	091b      	lsreq	r3, r3, #4
1a006b6e:	3004      	addeq	r0, #4
1a006b70:	079a      	lsls	r2, r3, #30
1a006b72:	bf04      	itt	eq
1a006b74:	089b      	lsreq	r3, r3, #2
1a006b76:	3002      	addeq	r0, #2
1a006b78:	07da      	lsls	r2, r3, #31
1a006b7a:	d403      	bmi.n	1a006b84 <__lo0bits+0x48>
1a006b7c:	085b      	lsrs	r3, r3, #1
1a006b7e:	f100 0001 	add.w	r0, r0, #1
1a006b82:	d005      	beq.n	1a006b90 <__lo0bits+0x54>
1a006b84:	600b      	str	r3, [r1, #0]
1a006b86:	4770      	bx	lr
1a006b88:	4610      	mov	r0, r2
1a006b8a:	e7e8      	b.n	1a006b5e <__lo0bits+0x22>
1a006b8c:	2000      	movs	r0, #0
1a006b8e:	4770      	bx	lr
1a006b90:	2020      	movs	r0, #32
1a006b92:	4770      	bx	lr
1a006b94:	089b      	lsrs	r3, r3, #2
1a006b96:	600b      	str	r3, [r1, #0]
1a006b98:	2002      	movs	r0, #2
1a006b9a:	4770      	bx	lr

1a006b9c <__i2b>:
1a006b9c:	b510      	push	{r4, lr}
1a006b9e:	460c      	mov	r4, r1
1a006ba0:	2101      	movs	r1, #1
1a006ba2:	f7ff ff35 	bl	1a006a10 <_Balloc>
1a006ba6:	2201      	movs	r2, #1
1a006ba8:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a006bac:	bd10      	pop	{r4, pc}
1a006bae:	bf00      	nop

1a006bb0 <__multiply>:
1a006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006bb4:	690e      	ldr	r6, [r1, #16]
1a006bb6:	6917      	ldr	r7, [r2, #16]
1a006bb8:	42be      	cmp	r6, r7
1a006bba:	b083      	sub	sp, #12
1a006bbc:	460c      	mov	r4, r1
1a006bbe:	4615      	mov	r5, r2
1a006bc0:	db05      	blt.n	1a006bce <__multiply+0x1e>
1a006bc2:	463a      	mov	r2, r7
1a006bc4:	462b      	mov	r3, r5
1a006bc6:	4637      	mov	r7, r6
1a006bc8:	460d      	mov	r5, r1
1a006bca:	4616      	mov	r6, r2
1a006bcc:	461c      	mov	r4, r3
1a006bce:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a006bd2:	eb07 0806 	add.w	r8, r7, r6
1a006bd6:	4543      	cmp	r3, r8
1a006bd8:	bfb8      	it	lt
1a006bda:	3101      	addlt	r1, #1
1a006bdc:	f7ff ff18 	bl	1a006a10 <_Balloc>
1a006be0:	f100 0a14 	add.w	sl, r0, #20
1a006be4:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a006be8:	45ca      	cmp	sl, r9
1a006bea:	9000      	str	r0, [sp, #0]
1a006bec:	d205      	bcs.n	1a006bfa <__multiply+0x4a>
1a006bee:	4653      	mov	r3, sl
1a006bf0:	2100      	movs	r1, #0
1a006bf2:	f843 1b04 	str.w	r1, [r3], #4
1a006bf6:	4599      	cmp	r9, r3
1a006bf8:	d8fb      	bhi.n	1a006bf2 <__multiply+0x42>
1a006bfa:	f104 0e14 	add.w	lr, r4, #20
1a006bfe:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a006c02:	f105 0314 	add.w	r3, r5, #20
1a006c06:	45de      	cmp	lr, fp
1a006c08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a006c0c:	d253      	bcs.n	1a006cb6 <__multiply+0x106>
1a006c0e:	f8cd 8004 	str.w	r8, [sp, #4]
1a006c12:	4698      	mov	r8, r3
1a006c14:	e005      	b.n	1a006c22 <__multiply+0x72>
1a006c16:	0c09      	lsrs	r1, r1, #16
1a006c18:	d128      	bne.n	1a006c6c <__multiply+0xbc>
1a006c1a:	45f3      	cmp	fp, lr
1a006c1c:	f10a 0a04 	add.w	sl, sl, #4
1a006c20:	d947      	bls.n	1a006cb2 <__multiply+0x102>
1a006c22:	f85e 1b04 	ldr.w	r1, [lr], #4
1a006c26:	b28e      	uxth	r6, r1
1a006c28:	2e00      	cmp	r6, #0
1a006c2a:	d0f4      	beq.n	1a006c16 <__multiply+0x66>
1a006c2c:	4645      	mov	r5, r8
1a006c2e:	4654      	mov	r4, sl
1a006c30:	2300      	movs	r3, #0
1a006c32:	f855 1b04 	ldr.w	r1, [r5], #4
1a006c36:	6820      	ldr	r0, [r4, #0]
1a006c38:	b28a      	uxth	r2, r1
1a006c3a:	fa1f fc80 	uxth.w	ip, r0
1a006c3e:	fb06 c202 	mla	r2, r6, r2, ip
1a006c42:	0c09      	lsrs	r1, r1, #16
1a006c44:	0c00      	lsrs	r0, r0, #16
1a006c46:	4413      	add	r3, r2
1a006c48:	fb06 0201 	mla	r2, r6, r1, r0
1a006c4c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a006c50:	b29b      	uxth	r3, r3
1a006c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a006c56:	42af      	cmp	r7, r5
1a006c58:	f844 3b04 	str.w	r3, [r4], #4
1a006c5c:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a006c60:	d8e7      	bhi.n	1a006c32 <__multiply+0x82>
1a006c62:	6023      	str	r3, [r4, #0]
1a006c64:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a006c68:	0c09      	lsrs	r1, r1, #16
1a006c6a:	d0d6      	beq.n	1a006c1a <__multiply+0x6a>
1a006c6c:	f8da 3000 	ldr.w	r3, [sl]
1a006c70:	4640      	mov	r0, r8
1a006c72:	461a      	mov	r2, r3
1a006c74:	4654      	mov	r4, sl
1a006c76:	f04f 0c00 	mov.w	ip, #0
1a006c7a:	8805      	ldrh	r5, [r0, #0]
1a006c7c:	0c12      	lsrs	r2, r2, #16
1a006c7e:	fb01 2205 	mla	r2, r1, r5, r2
1a006c82:	4494      	add	ip, r2
1a006c84:	b29b      	uxth	r3, r3
1a006c86:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a006c8a:	f844 3b04 	str.w	r3, [r4], #4
1a006c8e:	f850 3b04 	ldr.w	r3, [r0], #4
1a006c92:	6822      	ldr	r2, [r4, #0]
1a006c94:	0c1b      	lsrs	r3, r3, #16
1a006c96:	b295      	uxth	r5, r2
1a006c98:	fb01 5303 	mla	r3, r1, r3, r5
1a006c9c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a006ca0:	4287      	cmp	r7, r0
1a006ca2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a006ca6:	d8e8      	bhi.n	1a006c7a <__multiply+0xca>
1a006ca8:	45f3      	cmp	fp, lr
1a006caa:	6023      	str	r3, [r4, #0]
1a006cac:	f10a 0a04 	add.w	sl, sl, #4
1a006cb0:	d8b7      	bhi.n	1a006c22 <__multiply+0x72>
1a006cb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a006cb6:	f1b8 0f00 	cmp.w	r8, #0
1a006cba:	dd0b      	ble.n	1a006cd4 <__multiply+0x124>
1a006cbc:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a006cc0:	f1a9 0904 	sub.w	r9, r9, #4
1a006cc4:	b11b      	cbz	r3, 1a006cce <__multiply+0x11e>
1a006cc6:	e005      	b.n	1a006cd4 <__multiply+0x124>
1a006cc8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a006ccc:	b913      	cbnz	r3, 1a006cd4 <__multiply+0x124>
1a006cce:	f1b8 0801 	subs.w	r8, r8, #1
1a006cd2:	d1f9      	bne.n	1a006cc8 <__multiply+0x118>
1a006cd4:	9800      	ldr	r0, [sp, #0]
1a006cd6:	f8c0 8010 	str.w	r8, [r0, #16]
1a006cda:	b003      	add	sp, #12
1a006cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a006ce0 <__pow5mult>:
1a006ce0:	f012 0303 	ands.w	r3, r2, #3
1a006ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006ce8:	4614      	mov	r4, r2
1a006cea:	4607      	mov	r7, r0
1a006cec:	d12e      	bne.n	1a006d4c <__pow5mult+0x6c>
1a006cee:	460d      	mov	r5, r1
1a006cf0:	10a4      	asrs	r4, r4, #2
1a006cf2:	d01c      	beq.n	1a006d2e <__pow5mult+0x4e>
1a006cf4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a006cf6:	b396      	cbz	r6, 1a006d5e <__pow5mult+0x7e>
1a006cf8:	07e3      	lsls	r3, r4, #31
1a006cfa:	f04f 0800 	mov.w	r8, #0
1a006cfe:	d406      	bmi.n	1a006d0e <__pow5mult+0x2e>
1a006d00:	1064      	asrs	r4, r4, #1
1a006d02:	d014      	beq.n	1a006d2e <__pow5mult+0x4e>
1a006d04:	6830      	ldr	r0, [r6, #0]
1a006d06:	b1a8      	cbz	r0, 1a006d34 <__pow5mult+0x54>
1a006d08:	4606      	mov	r6, r0
1a006d0a:	07e3      	lsls	r3, r4, #31
1a006d0c:	d5f8      	bpl.n	1a006d00 <__pow5mult+0x20>
1a006d0e:	4632      	mov	r2, r6
1a006d10:	4629      	mov	r1, r5
1a006d12:	4638      	mov	r0, r7
1a006d14:	f7ff ff4c 	bl	1a006bb0 <__multiply>
1a006d18:	b1b5      	cbz	r5, 1a006d48 <__pow5mult+0x68>
1a006d1a:	686a      	ldr	r2, [r5, #4]
1a006d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a006d1e:	1064      	asrs	r4, r4, #1
1a006d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006d24:	6029      	str	r1, [r5, #0]
1a006d26:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a006d2a:	4605      	mov	r5, r0
1a006d2c:	d1ea      	bne.n	1a006d04 <__pow5mult+0x24>
1a006d2e:	4628      	mov	r0, r5
1a006d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006d34:	4632      	mov	r2, r6
1a006d36:	4631      	mov	r1, r6
1a006d38:	4638      	mov	r0, r7
1a006d3a:	f7ff ff39 	bl	1a006bb0 <__multiply>
1a006d3e:	6030      	str	r0, [r6, #0]
1a006d40:	f8c0 8000 	str.w	r8, [r0]
1a006d44:	4606      	mov	r6, r0
1a006d46:	e7e0      	b.n	1a006d0a <__pow5mult+0x2a>
1a006d48:	4605      	mov	r5, r0
1a006d4a:	e7d9      	b.n	1a006d00 <__pow5mult+0x20>
1a006d4c:	3b01      	subs	r3, #1
1a006d4e:	4a0b      	ldr	r2, [pc, #44]	; (1a006d7c <__pow5mult+0x9c>)
1a006d50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a006d54:	2300      	movs	r3, #0
1a006d56:	f7ff fe8b 	bl	1a006a70 <__multadd>
1a006d5a:	4605      	mov	r5, r0
1a006d5c:	e7c8      	b.n	1a006cf0 <__pow5mult+0x10>
1a006d5e:	2101      	movs	r1, #1
1a006d60:	4638      	mov	r0, r7
1a006d62:	f7ff fe55 	bl	1a006a10 <_Balloc>
1a006d66:	f240 2371 	movw	r3, #625	; 0x271
1a006d6a:	6143      	str	r3, [r0, #20]
1a006d6c:	2201      	movs	r2, #1
1a006d6e:	2300      	movs	r3, #0
1a006d70:	6102      	str	r2, [r0, #16]
1a006d72:	4606      	mov	r6, r0
1a006d74:	64b8      	str	r0, [r7, #72]	; 0x48
1a006d76:	6003      	str	r3, [r0, #0]
1a006d78:	e7be      	b.n	1a006cf8 <__pow5mult+0x18>
1a006d7a:	bf00      	nop
1a006d7c:	1a007cb0 	.word	0x1a007cb0

1a006d80 <__lshift>:
1a006d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006d84:	690e      	ldr	r6, [r1, #16]
1a006d86:	460d      	mov	r5, r1
1a006d88:	ea4f 1962 	mov.w	r9, r2, asr #5
1a006d8c:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a006d90:	444e      	add	r6, r9
1a006d92:	1c74      	adds	r4, r6, #1
1a006d94:	429c      	cmp	r4, r3
1a006d96:	4690      	mov	r8, r2
1a006d98:	4607      	mov	r7, r0
1a006d9a:	dd04      	ble.n	1a006da6 <__lshift+0x26>
1a006d9c:	005b      	lsls	r3, r3, #1
1a006d9e:	429c      	cmp	r4, r3
1a006da0:	f101 0101 	add.w	r1, r1, #1
1a006da4:	dcfa      	bgt.n	1a006d9c <__lshift+0x1c>
1a006da6:	4638      	mov	r0, r7
1a006da8:	f7ff fe32 	bl	1a006a10 <_Balloc>
1a006dac:	f1b9 0f00 	cmp.w	r9, #0
1a006db0:	f100 0c14 	add.w	ip, r0, #20
1a006db4:	dd0e      	ble.n	1a006dd4 <__lshift+0x54>
1a006db6:	f109 0905 	add.w	r9, r9, #5
1a006dba:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a006dbe:	eb00 0109 	add.w	r1, r0, r9
1a006dc2:	4663      	mov	r3, ip
1a006dc4:	2200      	movs	r2, #0
1a006dc6:	f843 2b04 	str.w	r2, [r3], #4
1a006dca:	428b      	cmp	r3, r1
1a006dcc:	d1fb      	bne.n	1a006dc6 <__lshift+0x46>
1a006dce:	f1a9 0914 	sub.w	r9, r9, #20
1a006dd2:	44cc      	add	ip, r9
1a006dd4:	6929      	ldr	r1, [r5, #16]
1a006dd6:	f105 0314 	add.w	r3, r5, #20
1a006dda:	f018 081f 	ands.w	r8, r8, #31
1a006dde:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a006de2:	d01d      	beq.n	1a006e20 <__lshift+0xa0>
1a006de4:	f1c8 0920 	rsb	r9, r8, #32
1a006de8:	2200      	movs	r2, #0
1a006dea:	6819      	ldr	r1, [r3, #0]
1a006dec:	fa01 f108 	lsl.w	r1, r1, r8
1a006df0:	4311      	orrs	r1, r2
1a006df2:	f84c 1b04 	str.w	r1, [ip], #4
1a006df6:	f853 2b04 	ldr.w	r2, [r3], #4
1a006dfa:	4573      	cmp	r3, lr
1a006dfc:	fa22 f209 	lsr.w	r2, r2, r9
1a006e00:	d3f3      	bcc.n	1a006dea <__lshift+0x6a>
1a006e02:	f8cc 2000 	str.w	r2, [ip]
1a006e06:	2a00      	cmp	r2, #0
1a006e08:	bf18      	it	ne
1a006e0a:	4626      	movne	r6, r4
1a006e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a006e0e:	686a      	ldr	r2, [r5, #4]
1a006e10:	6106      	str	r6, [r0, #16]
1a006e12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006e16:	6029      	str	r1, [r5, #0]
1a006e18:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a006e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006e20:	f1ac 0c04 	sub.w	ip, ip, #4
1a006e24:	f853 2b04 	ldr.w	r2, [r3], #4
1a006e28:	f84c 2f04 	str.w	r2, [ip, #4]!
1a006e2c:	459e      	cmp	lr, r3
1a006e2e:	d8f9      	bhi.n	1a006e24 <__lshift+0xa4>
1a006e30:	e7ec      	b.n	1a006e0c <__lshift+0x8c>
1a006e32:	bf00      	nop

1a006e34 <__mcmp>:
1a006e34:	b430      	push	{r4, r5}
1a006e36:	690b      	ldr	r3, [r1, #16]
1a006e38:	4605      	mov	r5, r0
1a006e3a:	6900      	ldr	r0, [r0, #16]
1a006e3c:	1ac0      	subs	r0, r0, r3
1a006e3e:	d110      	bne.n	1a006e62 <__mcmp+0x2e>
1a006e40:	009b      	lsls	r3, r3, #2
1a006e42:	3514      	adds	r5, #20
1a006e44:	3114      	adds	r1, #20
1a006e46:	4419      	add	r1, r3
1a006e48:	442b      	add	r3, r5
1a006e4a:	e001      	b.n	1a006e50 <__mcmp+0x1c>
1a006e4c:	429d      	cmp	r5, r3
1a006e4e:	d208      	bcs.n	1a006e62 <__mcmp+0x2e>
1a006e50:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a006e54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a006e58:	4294      	cmp	r4, r2
1a006e5a:	d0f7      	beq.n	1a006e4c <__mcmp+0x18>
1a006e5c:	d203      	bcs.n	1a006e66 <__mcmp+0x32>
1a006e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006e62:	bc30      	pop	{r4, r5}
1a006e64:	4770      	bx	lr
1a006e66:	2001      	movs	r0, #1
1a006e68:	bc30      	pop	{r4, r5}
1a006e6a:	4770      	bx	lr

1a006e6c <__mdiff>:
1a006e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006e70:	460f      	mov	r7, r1
1a006e72:	690d      	ldr	r5, [r1, #16]
1a006e74:	6911      	ldr	r1, [r2, #16]
1a006e76:	1a6d      	subs	r5, r5, r1
1a006e78:	2d00      	cmp	r5, #0
1a006e7a:	4690      	mov	r8, r2
1a006e7c:	4684      	mov	ip, r0
1a006e7e:	f107 0414 	add.w	r4, r7, #20
1a006e82:	f102 0614 	add.w	r6, r2, #20
1a006e86:	d114      	bne.n	1a006eb2 <__mdiff+0x46>
1a006e88:	0089      	lsls	r1, r1, #2
1a006e8a:	1863      	adds	r3, r4, r1
1a006e8c:	4431      	add	r1, r6
1a006e8e:	e001      	b.n	1a006e94 <__mdiff+0x28>
1a006e90:	42a3      	cmp	r3, r4
1a006e92:	d95d      	bls.n	1a006f50 <__mdiff+0xe4>
1a006e94:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a006e98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a006e9c:	4290      	cmp	r0, r2
1a006e9e:	d0f7      	beq.n	1a006e90 <__mdiff+0x24>
1a006ea0:	d209      	bcs.n	1a006eb6 <__mdiff+0x4a>
1a006ea2:	4622      	mov	r2, r4
1a006ea4:	463b      	mov	r3, r7
1a006ea6:	4634      	mov	r4, r6
1a006ea8:	4647      	mov	r7, r8
1a006eaa:	4616      	mov	r6, r2
1a006eac:	4698      	mov	r8, r3
1a006eae:	2501      	movs	r5, #1
1a006eb0:	e001      	b.n	1a006eb6 <__mdiff+0x4a>
1a006eb2:	dbf6      	blt.n	1a006ea2 <__mdiff+0x36>
1a006eb4:	2500      	movs	r5, #0
1a006eb6:	4660      	mov	r0, ip
1a006eb8:	6879      	ldr	r1, [r7, #4]
1a006eba:	f7ff fda9 	bl	1a006a10 <_Balloc>
1a006ebe:	693f      	ldr	r7, [r7, #16]
1a006ec0:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a006ec4:	60c5      	str	r5, [r0, #12]
1a006ec6:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a006eca:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a006ece:	f100 0514 	add.w	r5, r0, #20
1a006ed2:	2200      	movs	r2, #0
1a006ed4:	e000      	b.n	1a006ed8 <__mdiff+0x6c>
1a006ed6:	460d      	mov	r5, r1
1a006ed8:	f856 1b04 	ldr.w	r1, [r6], #4
1a006edc:	f854 8b04 	ldr.w	r8, [r4], #4
1a006ee0:	fa1f f981 	uxth.w	r9, r1
1a006ee4:	fa12 f388 	uxtah	r3, r2, r8
1a006ee8:	0c0a      	lsrs	r2, r1, #16
1a006eea:	eba3 0309 	sub.w	r3, r3, r9
1a006eee:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a006ef2:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a006ef6:	4629      	mov	r1, r5
1a006ef8:	b29b      	uxth	r3, r3
1a006efa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a006efe:	45b6      	cmp	lr, r6
1a006f00:	ea4f 4222 	mov.w	r2, r2, asr #16
1a006f04:	f841 3b04 	str.w	r3, [r1], #4
1a006f08:	46a0      	mov	r8, r4
1a006f0a:	d8e4      	bhi.n	1a006ed6 <__mdiff+0x6a>
1a006f0c:	45a4      	cmp	ip, r4
1a006f0e:	d916      	bls.n	1a006f3e <__mdiff+0xd2>
1a006f10:	460e      	mov	r6, r1
1a006f12:	f858 5b04 	ldr.w	r5, [r8], #4
1a006f16:	fa12 f385 	uxtah	r3, r2, r5
1a006f1a:	141a      	asrs	r2, r3, #16
1a006f1c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a006f20:	b29b      	uxth	r3, r3
1a006f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a006f26:	45c4      	cmp	ip, r8
1a006f28:	f846 3b04 	str.w	r3, [r6], #4
1a006f2c:	ea4f 4222 	mov.w	r2, r2, asr #16
1a006f30:	d8ef      	bhi.n	1a006f12 <__mdiff+0xa6>
1a006f32:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a006f36:	1b2d      	subs	r5, r5, r4
1a006f38:	f025 0503 	bic.w	r5, r5, #3
1a006f3c:	440d      	add	r5, r1
1a006f3e:	b923      	cbnz	r3, 1a006f4a <__mdiff+0xde>
1a006f40:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a006f44:	3f01      	subs	r7, #1
1a006f46:	2b00      	cmp	r3, #0
1a006f48:	d0fa      	beq.n	1a006f40 <__mdiff+0xd4>
1a006f4a:	6107      	str	r7, [r0, #16]
1a006f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006f50:	4660      	mov	r0, ip
1a006f52:	2100      	movs	r1, #0
1a006f54:	f7ff fd5c 	bl	1a006a10 <_Balloc>
1a006f58:	2201      	movs	r2, #1
1a006f5a:	2300      	movs	r3, #0
1a006f5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a006f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a006f64 <__d2b>:
1a006f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a006f68:	460f      	mov	r7, r1
1a006f6a:	b083      	sub	sp, #12
1a006f6c:	2101      	movs	r1, #1
1a006f6e:	ec55 4b10 	vmov	r4, r5, d0
1a006f72:	4616      	mov	r6, r2
1a006f74:	f7ff fd4c 	bl	1a006a10 <_Balloc>
1a006f78:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a006f7c:	4681      	mov	r9, r0
1a006f7e:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a006f82:	f1b8 0f00 	cmp.w	r8, #0
1a006f86:	d001      	beq.n	1a006f8c <__d2b+0x28>
1a006f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a006f8c:	2c00      	cmp	r4, #0
1a006f8e:	9301      	str	r3, [sp, #4]
1a006f90:	d02b      	beq.n	1a006fea <__d2b+0x86>
1a006f92:	4668      	mov	r0, sp
1a006f94:	9400      	str	r4, [sp, #0]
1a006f96:	f7ff fdd1 	bl	1a006b3c <__lo0bits>
1a006f9a:	b9d0      	cbnz	r0, 1a006fd2 <__d2b+0x6e>
1a006f9c:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006fa0:	f8c9 2014 	str.w	r2, [r9, #20]
1a006fa4:	2b00      	cmp	r3, #0
1a006fa6:	bf14      	ite	ne
1a006fa8:	2102      	movne	r1, #2
1a006faa:	2101      	moveq	r1, #1
1a006fac:	f8c9 3018 	str.w	r3, [r9, #24]
1a006fb0:	f8c9 1010 	str.w	r1, [r9, #16]
1a006fb4:	f1b8 0f00 	cmp.w	r8, #0
1a006fb8:	d024      	beq.n	1a007004 <__d2b+0xa0>
1a006fba:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a006fbe:	eb08 0300 	add.w	r3, r8, r0
1a006fc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a006fc6:	603b      	str	r3, [r7, #0]
1a006fc8:	6030      	str	r0, [r6, #0]
1a006fca:	4648      	mov	r0, r9
1a006fcc:	b003      	add	sp, #12
1a006fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a006fd2:	e9dd 1300 	ldrd	r1, r3, [sp]
1a006fd6:	f1c0 0220 	rsb	r2, r0, #32
1a006fda:	fa03 f202 	lsl.w	r2, r3, r2
1a006fde:	430a      	orrs	r2, r1
1a006fe0:	40c3      	lsrs	r3, r0
1a006fe2:	9301      	str	r3, [sp, #4]
1a006fe4:	f8c9 2014 	str.w	r2, [r9, #20]
1a006fe8:	e7dc      	b.n	1a006fa4 <__d2b+0x40>
1a006fea:	a801      	add	r0, sp, #4
1a006fec:	f7ff fda6 	bl	1a006b3c <__lo0bits>
1a006ff0:	9b01      	ldr	r3, [sp, #4]
1a006ff2:	f8c9 3014 	str.w	r3, [r9, #20]
1a006ff6:	2101      	movs	r1, #1
1a006ff8:	3020      	adds	r0, #32
1a006ffa:	f8c9 1010 	str.w	r1, [r9, #16]
1a006ffe:	f1b8 0f00 	cmp.w	r8, #0
1a007002:	d1da      	bne.n	1a006fba <__d2b+0x56>
1a007004:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a007008:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a00700c:	6038      	str	r0, [r7, #0]
1a00700e:	6918      	ldr	r0, [r3, #16]
1a007010:	f7ff fd74 	bl	1a006afc <__hi0bits>
1a007014:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a007018:	6030      	str	r0, [r6, #0]
1a00701a:	4648      	mov	r0, r9
1a00701c:	b003      	add	sp, #12
1a00701e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a007022:	bf00      	nop

1a007024 <_realloc_r>:
1a007024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007028:	4617      	mov	r7, r2
1a00702a:	2900      	cmp	r1, #0
1a00702c:	f000 80bb 	beq.w	1a0071a6 <_realloc_r+0x182>
1a007030:	f107 040b 	add.w	r4, r7, #11
1a007034:	4681      	mov	r9, r0
1a007036:	460d      	mov	r5, r1
1a007038:	f7fc feb0 	bl	1a003d9c <__malloc_lock>
1a00703c:	2c16      	cmp	r4, #22
1a00703e:	d85e      	bhi.n	1a0070fe <_realloc_r+0xda>
1a007040:	2410      	movs	r4, #16
1a007042:	4622      	mov	r2, r4
1a007044:	42a7      	cmp	r7, r4
1a007046:	d85f      	bhi.n	1a007108 <_realloc_r+0xe4>
1a007048:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a00704c:	f02e 0603 	bic.w	r6, lr, #3
1a007050:	f1a5 0808 	sub.w	r8, r5, #8
1a007054:	4296      	cmp	r6, r2
1a007056:	eb08 0a06 	add.w	sl, r8, r6
1a00705a:	f280 8081 	bge.w	1a007160 <_realloc_r+0x13c>
1a00705e:	4bcb      	ldr	r3, [pc, #812]	; (1a00738c <_realloc_r+0x368>)
1a007060:	f8da 0004 	ldr.w	r0, [sl, #4]
1a007064:	6899      	ldr	r1, [r3, #8]
1a007066:	4551      	cmp	r1, sl
1a007068:	f000 80b5 	beq.w	1a0071d6 <_realloc_r+0x1b2>
1a00706c:	f020 0301 	bic.w	r3, r0, #1
1a007070:	4453      	add	r3, sl
1a007072:	685b      	ldr	r3, [r3, #4]
1a007074:	07db      	lsls	r3, r3, #31
1a007076:	f100 808a 	bmi.w	1a00718e <_realloc_r+0x16a>
1a00707a:	f020 0003 	bic.w	r0, r0, #3
1a00707e:	1833      	adds	r3, r6, r0
1a007080:	4293      	cmp	r3, r2
1a007082:	f280 8112 	bge.w	1a0072aa <_realloc_r+0x286>
1a007086:	f01e 0f01 	tst.w	lr, #1
1a00708a:	d10f      	bne.n	1a0070ac <_realloc_r+0x88>
1a00708c:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a007090:	eba8 0b03 	sub.w	fp, r8, r3
1a007094:	f8db 1004 	ldr.w	r1, [fp, #4]
1a007098:	f021 0103 	bic.w	r1, r1, #3
1a00709c:	4408      	add	r0, r1
1a00709e:	1983      	adds	r3, r0, r6
1a0070a0:	4293      	cmp	r3, r2
1a0070a2:	f280 8116 	bge.w	1a0072d2 <_realloc_r+0x2ae>
1a0070a6:	1873      	adds	r3, r6, r1
1a0070a8:	4293      	cmp	r3, r2
1a0070aa:	da34      	bge.n	1a007116 <_realloc_r+0xf2>
1a0070ac:	4639      	mov	r1, r7
1a0070ae:	4648      	mov	r0, r9
1a0070b0:	f7fc fad2 	bl	1a003658 <_malloc_r>
1a0070b4:	4607      	mov	r7, r0
1a0070b6:	b1e0      	cbz	r0, 1a0070f2 <_realloc_r+0xce>
1a0070b8:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0070bc:	f023 0301 	bic.w	r3, r3, #1
1a0070c0:	4443      	add	r3, r8
1a0070c2:	f1a0 0208 	sub.w	r2, r0, #8
1a0070c6:	4293      	cmp	r3, r2
1a0070c8:	f000 80f7 	beq.w	1a0072ba <_realloc_r+0x296>
1a0070cc:	1f32      	subs	r2, r6, #4
1a0070ce:	2a24      	cmp	r2, #36	; 0x24
1a0070d0:	f200 80fb 	bhi.w	1a0072ca <_realloc_r+0x2a6>
1a0070d4:	2a13      	cmp	r2, #19
1a0070d6:	6829      	ldr	r1, [r5, #0]
1a0070d8:	f200 80c9 	bhi.w	1a00726e <_realloc_r+0x24a>
1a0070dc:	4603      	mov	r3, r0
1a0070de:	462a      	mov	r2, r5
1a0070e0:	6019      	str	r1, [r3, #0]
1a0070e2:	6851      	ldr	r1, [r2, #4]
1a0070e4:	6059      	str	r1, [r3, #4]
1a0070e6:	6892      	ldr	r2, [r2, #8]
1a0070e8:	609a      	str	r2, [r3, #8]
1a0070ea:	4629      	mov	r1, r5
1a0070ec:	4648      	mov	r0, r9
1a0070ee:	f7fc f995 	bl	1a00341c <_free_r>
1a0070f2:	4648      	mov	r0, r9
1a0070f4:	f7fc fe58 	bl	1a003da8 <__malloc_unlock>
1a0070f8:	4638      	mov	r0, r7
1a0070fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0070fe:	f024 0407 	bic.w	r4, r4, #7
1a007102:	2c00      	cmp	r4, #0
1a007104:	4622      	mov	r2, r4
1a007106:	da9d      	bge.n	1a007044 <_realloc_r+0x20>
1a007108:	230c      	movs	r3, #12
1a00710a:	f8c9 3000 	str.w	r3, [r9]
1a00710e:	2700      	movs	r7, #0
1a007110:	4638      	mov	r0, r7
1a007112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007116:	465f      	mov	r7, fp
1a007118:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00711c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007120:	1f32      	subs	r2, r6, #4
1a007122:	2a24      	cmp	r2, #36	; 0x24
1a007124:	60c1      	str	r1, [r0, #12]
1a007126:	eb0b 0a03 	add.w	sl, fp, r3
1a00712a:	6088      	str	r0, [r1, #8]
1a00712c:	f200 80d9 	bhi.w	1a0072e2 <_realloc_r+0x2be>
1a007130:	2a13      	cmp	r2, #19
1a007132:	6829      	ldr	r1, [r5, #0]
1a007134:	f240 80d3 	bls.w	1a0072de <_realloc_r+0x2ba>
1a007138:	f8cb 1008 	str.w	r1, [fp, #8]
1a00713c:	6869      	ldr	r1, [r5, #4]
1a00713e:	f8cb 100c 	str.w	r1, [fp, #12]
1a007142:	2a1b      	cmp	r2, #27
1a007144:	68a9      	ldr	r1, [r5, #8]
1a007146:	f200 80e0 	bhi.w	1a00730a <_realloc_r+0x2e6>
1a00714a:	f10b 0210 	add.w	r2, fp, #16
1a00714e:	3508      	adds	r5, #8
1a007150:	6011      	str	r1, [r2, #0]
1a007152:	6869      	ldr	r1, [r5, #4]
1a007154:	6051      	str	r1, [r2, #4]
1a007156:	68a9      	ldr	r1, [r5, #8]
1a007158:	6091      	str	r1, [r2, #8]
1a00715a:	461e      	mov	r6, r3
1a00715c:	46d8      	mov	r8, fp
1a00715e:	463d      	mov	r5, r7
1a007160:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a007164:	1b32      	subs	r2, r6, r4
1a007166:	2a0f      	cmp	r2, #15
1a007168:	f003 0301 	and.w	r3, r3, #1
1a00716c:	d820      	bhi.n	1a0071b0 <_realloc_r+0x18c>
1a00716e:	4333      	orrs	r3, r6
1a007170:	f8c8 3004 	str.w	r3, [r8, #4]
1a007174:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007178:	f043 0301 	orr.w	r3, r3, #1
1a00717c:	f8ca 3004 	str.w	r3, [sl, #4]
1a007180:	4648      	mov	r0, r9
1a007182:	462f      	mov	r7, r5
1a007184:	f7fc fe10 	bl	1a003da8 <__malloc_unlock>
1a007188:	4638      	mov	r0, r7
1a00718a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00718e:	f01e 0f01 	tst.w	lr, #1
1a007192:	d18b      	bne.n	1a0070ac <_realloc_r+0x88>
1a007194:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a007198:	eba8 0b03 	sub.w	fp, r8, r3
1a00719c:	f8db 1004 	ldr.w	r1, [fp, #4]
1a0071a0:	f021 0103 	bic.w	r1, r1, #3
1a0071a4:	e77f      	b.n	1a0070a6 <_realloc_r+0x82>
1a0071a6:	4611      	mov	r1, r2
1a0071a8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0071ac:	f7fc ba54 	b.w	1a003658 <_malloc_r>
1a0071b0:	eb08 0104 	add.w	r1, r8, r4
1a0071b4:	4323      	orrs	r3, r4
1a0071b6:	f042 0201 	orr.w	r2, r2, #1
1a0071ba:	f8c8 3004 	str.w	r3, [r8, #4]
1a0071be:	604a      	str	r2, [r1, #4]
1a0071c0:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0071c4:	f043 0301 	orr.w	r3, r3, #1
1a0071c8:	3108      	adds	r1, #8
1a0071ca:	f8ca 3004 	str.w	r3, [sl, #4]
1a0071ce:	4648      	mov	r0, r9
1a0071d0:	f7fc f924 	bl	1a00341c <_free_r>
1a0071d4:	e7d4      	b.n	1a007180 <_realloc_r+0x15c>
1a0071d6:	f020 0003 	bic.w	r0, r0, #3
1a0071da:	1831      	adds	r1, r6, r0
1a0071dc:	f104 0c10 	add.w	ip, r4, #16
1a0071e0:	4561      	cmp	r1, ip
1a0071e2:	da4f      	bge.n	1a007284 <_realloc_r+0x260>
1a0071e4:	f01e 0f01 	tst.w	lr, #1
1a0071e8:	f47f af60 	bne.w	1a0070ac <_realloc_r+0x88>
1a0071ec:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a0071f0:	eba8 0b01 	sub.w	fp, r8, r1
1a0071f4:	f8db 1004 	ldr.w	r1, [fp, #4]
1a0071f8:	f021 0103 	bic.w	r1, r1, #3
1a0071fc:	4408      	add	r0, r1
1a0071fe:	eb00 0a06 	add.w	sl, r0, r6
1a007202:	45d4      	cmp	ip, sl
1a007204:	f73f af4f 	bgt.w	1a0070a6 <_realloc_r+0x82>
1a007208:	465f      	mov	r7, fp
1a00720a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00720e:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007212:	1f32      	subs	r2, r6, #4
1a007214:	2a24      	cmp	r2, #36	; 0x24
1a007216:	60c1      	str	r1, [r0, #12]
1a007218:	6088      	str	r0, [r1, #8]
1a00721a:	f200 8099 	bhi.w	1a007350 <_realloc_r+0x32c>
1a00721e:	2a13      	cmp	r2, #19
1a007220:	6829      	ldr	r1, [r5, #0]
1a007222:	f240 8093 	bls.w	1a00734c <_realloc_r+0x328>
1a007226:	f8cb 1008 	str.w	r1, [fp, #8]
1a00722a:	6869      	ldr	r1, [r5, #4]
1a00722c:	f8cb 100c 	str.w	r1, [fp, #12]
1a007230:	2a1b      	cmp	r2, #27
1a007232:	68a9      	ldr	r1, [r5, #8]
1a007234:	f200 8092 	bhi.w	1a00735c <_realloc_r+0x338>
1a007238:	f10b 0210 	add.w	r2, fp, #16
1a00723c:	3508      	adds	r5, #8
1a00723e:	6011      	str	r1, [r2, #0]
1a007240:	6869      	ldr	r1, [r5, #4]
1a007242:	6051      	str	r1, [r2, #4]
1a007244:	68a9      	ldr	r1, [r5, #8]
1a007246:	6091      	str	r1, [r2, #8]
1a007248:	eb0b 0104 	add.w	r1, fp, r4
1a00724c:	ebaa 0204 	sub.w	r2, sl, r4
1a007250:	f042 0201 	orr.w	r2, r2, #1
1a007254:	6099      	str	r1, [r3, #8]
1a007256:	604a      	str	r2, [r1, #4]
1a007258:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00725c:	f003 0301 	and.w	r3, r3, #1
1a007260:	431c      	orrs	r4, r3
1a007262:	4648      	mov	r0, r9
1a007264:	f8cb 4004 	str.w	r4, [fp, #4]
1a007268:	f7fc fd9e 	bl	1a003da8 <__malloc_unlock>
1a00726c:	e750      	b.n	1a007110 <_realloc_r+0xec>
1a00726e:	6001      	str	r1, [r0, #0]
1a007270:	686b      	ldr	r3, [r5, #4]
1a007272:	6043      	str	r3, [r0, #4]
1a007274:	2a1b      	cmp	r2, #27
1a007276:	d83c      	bhi.n	1a0072f2 <_realloc_r+0x2ce>
1a007278:	f105 0208 	add.w	r2, r5, #8
1a00727c:	f100 0308 	add.w	r3, r0, #8
1a007280:	68a9      	ldr	r1, [r5, #8]
1a007282:	e72d      	b.n	1a0070e0 <_realloc_r+0xbc>
1a007284:	eb08 0004 	add.w	r0, r8, r4
1a007288:	1b0a      	subs	r2, r1, r4
1a00728a:	f042 0201 	orr.w	r2, r2, #1
1a00728e:	6098      	str	r0, [r3, #8]
1a007290:	6042      	str	r2, [r0, #4]
1a007292:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a007296:	f003 0301 	and.w	r3, r3, #1
1a00729a:	431c      	orrs	r4, r3
1a00729c:	4648      	mov	r0, r9
1a00729e:	f845 4c04 	str.w	r4, [r5, #-4]
1a0072a2:	f7fc fd81 	bl	1a003da8 <__malloc_unlock>
1a0072a6:	462f      	mov	r7, r5
1a0072a8:	e732      	b.n	1a007110 <_realloc_r+0xec>
1a0072aa:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a0072ae:	461e      	mov	r6, r3
1a0072b0:	60ca      	str	r2, [r1, #12]
1a0072b2:	eb08 0a03 	add.w	sl, r8, r3
1a0072b6:	6091      	str	r1, [r2, #8]
1a0072b8:	e752      	b.n	1a007160 <_realloc_r+0x13c>
1a0072ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a0072be:	f023 0303 	bic.w	r3, r3, #3
1a0072c2:	441e      	add	r6, r3
1a0072c4:	eb08 0a06 	add.w	sl, r8, r6
1a0072c8:	e74a      	b.n	1a007160 <_realloc_r+0x13c>
1a0072ca:	4629      	mov	r1, r5
1a0072cc:	f7ff fb38 	bl	1a006940 <memmove>
1a0072d0:	e70b      	b.n	1a0070ea <_realloc_r+0xc6>
1a0072d2:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a0072d6:	465f      	mov	r7, fp
1a0072d8:	60ca      	str	r2, [r1, #12]
1a0072da:	6091      	str	r1, [r2, #8]
1a0072dc:	e71c      	b.n	1a007118 <_realloc_r+0xf4>
1a0072de:	463a      	mov	r2, r7
1a0072e0:	e736      	b.n	1a007150 <_realloc_r+0x12c>
1a0072e2:	4629      	mov	r1, r5
1a0072e4:	4638      	mov	r0, r7
1a0072e6:	461e      	mov	r6, r3
1a0072e8:	46d8      	mov	r8, fp
1a0072ea:	f7ff fb29 	bl	1a006940 <memmove>
1a0072ee:	463d      	mov	r5, r7
1a0072f0:	e736      	b.n	1a007160 <_realloc_r+0x13c>
1a0072f2:	68ab      	ldr	r3, [r5, #8]
1a0072f4:	6083      	str	r3, [r0, #8]
1a0072f6:	68eb      	ldr	r3, [r5, #12]
1a0072f8:	60c3      	str	r3, [r0, #12]
1a0072fa:	2a24      	cmp	r2, #36	; 0x24
1a0072fc:	d011      	beq.n	1a007322 <_realloc_r+0x2fe>
1a0072fe:	f105 0210 	add.w	r2, r5, #16
1a007302:	f100 0310 	add.w	r3, r0, #16
1a007306:	6929      	ldr	r1, [r5, #16]
1a007308:	e6ea      	b.n	1a0070e0 <_realloc_r+0xbc>
1a00730a:	f8cb 1010 	str.w	r1, [fp, #16]
1a00730e:	68e9      	ldr	r1, [r5, #12]
1a007310:	f8cb 1014 	str.w	r1, [fp, #20]
1a007314:	2a24      	cmp	r2, #36	; 0x24
1a007316:	d00e      	beq.n	1a007336 <_realloc_r+0x312>
1a007318:	6929      	ldr	r1, [r5, #16]
1a00731a:	f10b 0218 	add.w	r2, fp, #24
1a00731e:	3510      	adds	r5, #16
1a007320:	e716      	b.n	1a007150 <_realloc_r+0x12c>
1a007322:	692b      	ldr	r3, [r5, #16]
1a007324:	6103      	str	r3, [r0, #16]
1a007326:	696b      	ldr	r3, [r5, #20]
1a007328:	6143      	str	r3, [r0, #20]
1a00732a:	69a9      	ldr	r1, [r5, #24]
1a00732c:	f105 0218 	add.w	r2, r5, #24
1a007330:	f100 0318 	add.w	r3, r0, #24
1a007334:	e6d4      	b.n	1a0070e0 <_realloc_r+0xbc>
1a007336:	692a      	ldr	r2, [r5, #16]
1a007338:	f8cb 2018 	str.w	r2, [fp, #24]
1a00733c:	696a      	ldr	r2, [r5, #20]
1a00733e:	f8cb 201c 	str.w	r2, [fp, #28]
1a007342:	69a9      	ldr	r1, [r5, #24]
1a007344:	f10b 0220 	add.w	r2, fp, #32
1a007348:	3518      	adds	r5, #24
1a00734a:	e701      	b.n	1a007150 <_realloc_r+0x12c>
1a00734c:	463a      	mov	r2, r7
1a00734e:	e776      	b.n	1a00723e <_realloc_r+0x21a>
1a007350:	4629      	mov	r1, r5
1a007352:	4638      	mov	r0, r7
1a007354:	f7ff faf4 	bl	1a006940 <memmove>
1a007358:	4b0c      	ldr	r3, [pc, #48]	; (1a00738c <_realloc_r+0x368>)
1a00735a:	e775      	b.n	1a007248 <_realloc_r+0x224>
1a00735c:	f8cb 1010 	str.w	r1, [fp, #16]
1a007360:	68e9      	ldr	r1, [r5, #12]
1a007362:	f8cb 1014 	str.w	r1, [fp, #20]
1a007366:	2a24      	cmp	r2, #36	; 0x24
1a007368:	d004      	beq.n	1a007374 <_realloc_r+0x350>
1a00736a:	6929      	ldr	r1, [r5, #16]
1a00736c:	f10b 0218 	add.w	r2, fp, #24
1a007370:	3510      	adds	r5, #16
1a007372:	e764      	b.n	1a00723e <_realloc_r+0x21a>
1a007374:	692a      	ldr	r2, [r5, #16]
1a007376:	f8cb 2018 	str.w	r2, [fp, #24]
1a00737a:	696a      	ldr	r2, [r5, #20]
1a00737c:	f8cb 201c 	str.w	r2, [fp, #28]
1a007380:	69a9      	ldr	r1, [r5, #24]
1a007382:	f10b 0220 	add.w	r2, fp, #32
1a007386:	3518      	adds	r5, #24
1a007388:	e759      	b.n	1a00723e <_realloc_r+0x21a>
1a00738a:	bf00      	nop
1a00738c:	10000478 	.word	0x10000478

1a007390 <frexp>:
1a007390:	ec53 2b10 	vmov	r2, r3, d0
1a007394:	b570      	push	{r4, r5, r6, lr}
1a007396:	4e16      	ldr	r6, [pc, #88]	; (1a0073f0 <frexp+0x60>)
1a007398:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a00739c:	2500      	movs	r5, #0
1a00739e:	42b1      	cmp	r1, r6
1a0073a0:	4604      	mov	r4, r0
1a0073a2:	6005      	str	r5, [r0, #0]
1a0073a4:	dc21      	bgt.n	1a0073ea <frexp+0x5a>
1a0073a6:	ee10 6a10 	vmov	r6, s0
1a0073aa:	430e      	orrs	r6, r1
1a0073ac:	d01d      	beq.n	1a0073ea <frexp+0x5a>
1a0073ae:	4e11      	ldr	r6, [pc, #68]	; (1a0073f4 <frexp+0x64>)
1a0073b0:	401e      	ands	r6, r3
1a0073b2:	4618      	mov	r0, r3
1a0073b4:	b966      	cbnz	r6, 1a0073d0 <frexp+0x40>
1a0073b6:	4619      	mov	r1, r3
1a0073b8:	2200      	movs	r2, #0
1a0073ba:	ee10 0a10 	vmov	r0, s0
1a0073be:	4b0e      	ldr	r3, [pc, #56]	; (1a0073f8 <frexp+0x68>)
1a0073c0:	f7fb fb70 	bl	1a002aa4 <__aeabi_dmul>
1a0073c4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a0073c8:	4602      	mov	r2, r0
1a0073ca:	4608      	mov	r0, r1
1a0073cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0073d0:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a0073d4:	1509      	asrs	r1, r1, #20
1a0073d6:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a0073da:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a0073de:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a0073e2:	4429      	add	r1, r5
1a0073e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a0073e8:	6021      	str	r1, [r4, #0]
1a0073ea:	ec43 2b10 	vmov	d0, r2, r3
1a0073ee:	bd70      	pop	{r4, r5, r6, pc}
1a0073f0:	7fefffff 	.word	0x7fefffff
1a0073f4:	7ff00000 	.word	0x7ff00000
1a0073f8:	43500000 	.word	0x43500000

1a0073fc <strncpy>:
1a0073fc:	b470      	push	{r4, r5, r6}
1a0073fe:	ea40 0401 	orr.w	r4, r0, r1
1a007402:	07a3      	lsls	r3, r4, #30
1a007404:	d127      	bne.n	1a007456 <strncpy+0x5a>
1a007406:	2a03      	cmp	r2, #3
1a007408:	d925      	bls.n	1a007456 <strncpy+0x5a>
1a00740a:	460b      	mov	r3, r1
1a00740c:	4606      	mov	r6, r0
1a00740e:	4619      	mov	r1, r3
1a007410:	f853 5b04 	ldr.w	r5, [r3], #4
1a007414:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a007418:	ea24 0405 	bic.w	r4, r4, r5
1a00741c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a007420:	d106      	bne.n	1a007430 <strncpy+0x34>
1a007422:	3a04      	subs	r2, #4
1a007424:	2a03      	cmp	r2, #3
1a007426:	f846 5b04 	str.w	r5, [r6], #4
1a00742a:	4619      	mov	r1, r3
1a00742c:	d8ef      	bhi.n	1a00740e <strncpy+0x12>
1a00742e:	b182      	cbz	r2, 1a007452 <strncpy+0x56>
1a007430:	4633      	mov	r3, r6
1a007432:	780c      	ldrb	r4, [r1, #0]
1a007434:	f803 4b01 	strb.w	r4, [r3], #1
1a007438:	1e55      	subs	r5, r2, #1
1a00743a:	b174      	cbz	r4, 1a00745a <strncpy+0x5e>
1a00743c:	4432      	add	r2, r6
1a00743e:	442e      	add	r6, r5
1a007440:	e005      	b.n	1a00744e <strncpy+0x52>
1a007442:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a007446:	1af5      	subs	r5, r6, r3
1a007448:	f803 4b01 	strb.w	r4, [r3], #1
1a00744c:	b12c      	cbz	r4, 1a00745a <strncpy+0x5e>
1a00744e:	429a      	cmp	r2, r3
1a007450:	d1f7      	bne.n	1a007442 <strncpy+0x46>
1a007452:	bc70      	pop	{r4, r5, r6}
1a007454:	4770      	bx	lr
1a007456:	4606      	mov	r6, r0
1a007458:	e7e9      	b.n	1a00742e <strncpy+0x32>
1a00745a:	2d00      	cmp	r5, #0
1a00745c:	d0f9      	beq.n	1a007452 <strncpy+0x56>
1a00745e:	441d      	add	r5, r3
1a007460:	2200      	movs	r2, #0
1a007462:	f803 2b01 	strb.w	r2, [r3], #1
1a007466:	42ab      	cmp	r3, r5
1a007468:	d1fb      	bne.n	1a007462 <strncpy+0x66>
1a00746a:	bc70      	pop	{r4, r5, r6}
1a00746c:	4770      	bx	lr
1a00746e:	bf00      	nop

1a007470 <__ssprint_r>:
1a007470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007474:	6893      	ldr	r3, [r2, #8]
1a007476:	b083      	sub	sp, #12
1a007478:	4690      	mov	r8, r2
1a00747a:	2b00      	cmp	r3, #0
1a00747c:	d06d      	beq.n	1a00755a <__ssprint_r+0xea>
1a00747e:	6817      	ldr	r7, [r2, #0]
1a007480:	688d      	ldr	r5, [r1, #8]
1a007482:	4682      	mov	sl, r0
1a007484:	460c      	mov	r4, r1
1a007486:	6808      	ldr	r0, [r1, #0]
1a007488:	3708      	adds	r7, #8
1a00748a:	e043      	b.n	1a007514 <__ssprint_r+0xa4>
1a00748c:	89a3      	ldrh	r3, [r4, #12]
1a00748e:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a007492:	d02e      	beq.n	1a0074f2 <__ssprint_r+0x82>
1a007494:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
1a007498:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a00749c:	eba0 0b01 	sub.w	fp, r0, r1
1a0074a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
1a0074a4:	eb0b 0006 	add.w	r0, fp, r6
1a0074a8:	106d      	asrs	r5, r5, #1
1a0074aa:	3001      	adds	r0, #1
1a0074ac:	42a8      	cmp	r0, r5
1a0074ae:	462a      	mov	r2, r5
1a0074b0:	bf84      	itt	hi
1a0074b2:	4605      	movhi	r5, r0
1a0074b4:	462a      	movhi	r2, r5
1a0074b6:	055b      	lsls	r3, r3, #21
1a0074b8:	d536      	bpl.n	1a007528 <__ssprint_r+0xb8>
1a0074ba:	4611      	mov	r1, r2
1a0074bc:	4650      	mov	r0, sl
1a0074be:	f7fc f8cb 	bl	1a003658 <_malloc_r>
1a0074c2:	2800      	cmp	r0, #0
1a0074c4:	d03a      	beq.n	1a00753c <__ssprint_r+0xcc>
1a0074c6:	465a      	mov	r2, fp
1a0074c8:	6921      	ldr	r1, [r4, #16]
1a0074ca:	9001      	str	r0, [sp, #4]
1a0074cc:	f7fc fb7c 	bl	1a003bc8 <memcpy>
1a0074d0:	89a2      	ldrh	r2, [r4, #12]
1a0074d2:	9b01      	ldr	r3, [sp, #4]
1a0074d4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a0074d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0074dc:	81a2      	strh	r2, [r4, #12]
1a0074de:	eba5 020b 	sub.w	r2, r5, fp
1a0074e2:	eb03 000b 	add.w	r0, r3, fp
1a0074e6:	6165      	str	r5, [r4, #20]
1a0074e8:	6123      	str	r3, [r4, #16]
1a0074ea:	6020      	str	r0, [r4, #0]
1a0074ec:	60a2      	str	r2, [r4, #8]
1a0074ee:	4635      	mov	r5, r6
1a0074f0:	46b3      	mov	fp, r6
1a0074f2:	465a      	mov	r2, fp
1a0074f4:	4649      	mov	r1, r9
1a0074f6:	f7ff fa23 	bl	1a006940 <memmove>
1a0074fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a0074fe:	68a2      	ldr	r2, [r4, #8]
1a007500:	6820      	ldr	r0, [r4, #0]
1a007502:	1b55      	subs	r5, r2, r5
1a007504:	4458      	add	r0, fp
1a007506:	1b9e      	subs	r6, r3, r6
1a007508:	60a5      	str	r5, [r4, #8]
1a00750a:	6020      	str	r0, [r4, #0]
1a00750c:	f8c8 6008 	str.w	r6, [r8, #8]
1a007510:	b31e      	cbz	r6, 1a00755a <__ssprint_r+0xea>
1a007512:	3708      	adds	r7, #8
1a007514:	e957 9602 	ldrd	r9, r6, [r7, #-8]
1a007518:	46ab      	mov	fp, r5
1a00751a:	2e00      	cmp	r6, #0
1a00751c:	d0f9      	beq.n	1a007512 <__ssprint_r+0xa2>
1a00751e:	42ae      	cmp	r6, r5
1a007520:	d2b4      	bcs.n	1a00748c <__ssprint_r+0x1c>
1a007522:	4635      	mov	r5, r6
1a007524:	46b3      	mov	fp, r6
1a007526:	e7e4      	b.n	1a0074f2 <__ssprint_r+0x82>
1a007528:	4650      	mov	r0, sl
1a00752a:	f7ff fd7b 	bl	1a007024 <_realloc_r>
1a00752e:	4603      	mov	r3, r0
1a007530:	2800      	cmp	r0, #0
1a007532:	d1d4      	bne.n	1a0074de <__ssprint_r+0x6e>
1a007534:	6921      	ldr	r1, [r4, #16]
1a007536:	4650      	mov	r0, sl
1a007538:	f7fb ff70 	bl	1a00341c <_free_r>
1a00753c:	230c      	movs	r3, #12
1a00753e:	f8ca 3000 	str.w	r3, [sl]
1a007542:	89a3      	ldrh	r3, [r4, #12]
1a007544:	2200      	movs	r2, #0
1a007546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00754a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00754e:	81a3      	strh	r3, [r4, #12]
1a007550:	e9c8 2201 	strd	r2, r2, [r8, #4]
1a007554:	b003      	add	sp, #12
1a007556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00755a:	2000      	movs	r0, #0
1a00755c:	f8c8 0004 	str.w	r0, [r8, #4]
1a007560:	b003      	add	sp, #12
1a007562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007566:	bf00      	nop

1a007568 <_calloc_r>:
1a007568:	b510      	push	{r4, lr}
1a00756a:	fb02 f101 	mul.w	r1, r2, r1
1a00756e:	f7fc f873 	bl	1a003658 <_malloc_r>
1a007572:	4604      	mov	r4, r0
1a007574:	b168      	cbz	r0, 1a007592 <_calloc_r+0x2a>
1a007576:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00757a:	f022 0203 	bic.w	r2, r2, #3
1a00757e:	3a04      	subs	r2, #4
1a007580:	2a24      	cmp	r2, #36	; 0x24
1a007582:	d818      	bhi.n	1a0075b6 <_calloc_r+0x4e>
1a007584:	2a13      	cmp	r2, #19
1a007586:	d806      	bhi.n	1a007596 <_calloc_r+0x2e>
1a007588:	4602      	mov	r2, r0
1a00758a:	2300      	movs	r3, #0
1a00758c:	e9c2 3300 	strd	r3, r3, [r2]
1a007590:	6093      	str	r3, [r2, #8]
1a007592:	4620      	mov	r0, r4
1a007594:	bd10      	pop	{r4, pc}
1a007596:	2300      	movs	r3, #0
1a007598:	2a1b      	cmp	r2, #27
1a00759a:	e9c0 3300 	strd	r3, r3, [r0]
1a00759e:	d90f      	bls.n	1a0075c0 <_calloc_r+0x58>
1a0075a0:	2a24      	cmp	r2, #36	; 0x24
1a0075a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a0075a6:	bf12      	itee	ne
1a0075a8:	f100 0210 	addne.w	r2, r0, #16
1a0075ac:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a0075b0:	f100 0218 	addeq.w	r2, r0, #24
1a0075b4:	e7e9      	b.n	1a00758a <_calloc_r+0x22>
1a0075b6:	2100      	movs	r1, #0
1a0075b8:	f7fc fba0 	bl	1a003cfc <memset>
1a0075bc:	4620      	mov	r0, r4
1a0075be:	bd10      	pop	{r4, pc}
1a0075c0:	f100 0208 	add.w	r2, r0, #8
1a0075c4:	e7e1      	b.n	1a00758a <_calloc_r+0x22>
1a0075c6:	bf00      	nop

1a0075c8 <__ascii_mbtowc>:
1a0075c8:	b082      	sub	sp, #8
1a0075ca:	b149      	cbz	r1, 1a0075e0 <__ascii_mbtowc+0x18>
1a0075cc:	b15a      	cbz	r2, 1a0075e6 <__ascii_mbtowc+0x1e>
1a0075ce:	b16b      	cbz	r3, 1a0075ec <__ascii_mbtowc+0x24>
1a0075d0:	7813      	ldrb	r3, [r2, #0]
1a0075d2:	600b      	str	r3, [r1, #0]
1a0075d4:	7812      	ldrb	r2, [r2, #0]
1a0075d6:	1c10      	adds	r0, r2, #0
1a0075d8:	bf18      	it	ne
1a0075da:	2001      	movne	r0, #1
1a0075dc:	b002      	add	sp, #8
1a0075de:	4770      	bx	lr
1a0075e0:	a901      	add	r1, sp, #4
1a0075e2:	2a00      	cmp	r2, #0
1a0075e4:	d1f3      	bne.n	1a0075ce <__ascii_mbtowc+0x6>
1a0075e6:	4610      	mov	r0, r2
1a0075e8:	b002      	add	sp, #8
1a0075ea:	4770      	bx	lr
1a0075ec:	f06f 0001 	mvn.w	r0, #1
1a0075f0:	e7f4      	b.n	1a0075dc <__ascii_mbtowc+0x14>
1a0075f2:	bf00      	nop

1a0075f4 <__ascii_wctomb>:
1a0075f4:	b149      	cbz	r1, 1a00760a <__ascii_wctomb+0x16>
1a0075f6:	2aff      	cmp	r2, #255	; 0xff
1a0075f8:	d802      	bhi.n	1a007600 <__ascii_wctomb+0xc>
1a0075fa:	700a      	strb	r2, [r1, #0]
1a0075fc:	2001      	movs	r0, #1
1a0075fe:	4770      	bx	lr
1a007600:	238a      	movs	r3, #138	; 0x8a
1a007602:	6003      	str	r3, [r0, #0]
1a007604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007608:	4770      	bx	lr
1a00760a:	4608      	mov	r0, r1
1a00760c:	4770      	bx	lr
1a00760e:	bf00      	nop

1a007610 <__aeabi_dcmpun>:
1a007610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007618:	d102      	bne.n	1a007620 <__aeabi_dcmpun+0x10>
1a00761a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00761e:	d10a      	bne.n	1a007636 <__aeabi_dcmpun+0x26>
1a007620:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007628:	d102      	bne.n	1a007630 <__aeabi_dcmpun+0x20>
1a00762a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00762e:	d102      	bne.n	1a007636 <__aeabi_dcmpun+0x26>
1a007630:	f04f 0000 	mov.w	r0, #0
1a007634:	4770      	bx	lr
1a007636:	f04f 0001 	mov.w	r0, #1
1a00763a:	4770      	bx	lr

1a00763c <__aeabi_d2iz>:
1a00763c:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a007640:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a007644:	d215      	bcs.n	1a007672 <__aeabi_d2iz+0x36>
1a007646:	d511      	bpl.n	1a00766c <__aeabi_d2iz+0x30>
1a007648:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a00764c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a007650:	d912      	bls.n	1a007678 <__aeabi_d2iz+0x3c>
1a007652:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a007656:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a00765a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a00765e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a007662:	fa23 f002 	lsr.w	r0, r3, r2
1a007666:	bf18      	it	ne
1a007668:	4240      	negne	r0, r0
1a00766a:	4770      	bx	lr
1a00766c:	f04f 0000 	mov.w	r0, #0
1a007670:	4770      	bx	lr
1a007672:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a007676:	d105      	bne.n	1a007684 <__aeabi_d2iz+0x48>
1a007678:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a00767c:	bf08      	it	eq
1a00767e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a007682:	4770      	bx	lr
1a007684:	f04f 0000 	mov.w	r0, #0
1a007688:	4770      	bx	lr
1a00768a:	bf00      	nop
1a00768c:	20433249 	.word	0x20433249
1a007690:	74696e69 	.word	0x74696e69
1a007694:	696c6169 	.word	0x696c6169
1a007698:	6974617a 	.word	0x6974617a
1a00769c:	63206e6f 	.word	0x63206e6f
1a0076a0:	6c706d6f 	.word	0x6c706d6f
1a0076a4:	2e657465 	.word	0x2e657465
1a0076a8:	00000000 	.word	0x00000000
1a0076ac:	52504545 	.word	0x52504545
1a0076b0:	69204d4f 	.word	0x69204d4f
1a0076b4:	6974696e 	.word	0x6974696e
1a0076b8:	7a696c61 	.word	0x7a696c61
1a0076bc:	6f697461 	.word	0x6f697461
1a0076c0:	6f63206e 	.word	0x6f63206e
1a0076c4:	656c706d 	.word	0x656c706d
1a0076c8:	002e6574 	.word	0x002e6574
1a0076cc:	706d6554 	.word	0x706d6554
1a0076d0:	74617265 	.word	0x74617265
1a0076d4:	20657275 	.word	0x20657275
1a0076d8:	736e6573 	.word	0x736e6573
1a0076dc:	6920726f 	.word	0x6920726f
1a0076e0:	6974696e 	.word	0x6974696e
1a0076e4:	7a696c61 	.word	0x7a696c61
1a0076e8:	6f697461 	.word	0x6f697461
1a0076ec:	6f63206e 	.word	0x6f63206e
1a0076f0:	656c706d 	.word	0x656c706d
1a0076f4:	002e6574 	.word	0x002e6574
1a0076f8:	414c4120 	.word	0x414c4120
1a0076fc:	20414d52 	.word	0x20414d52
1a007700:	00202121 	.word	0x00202121
1a007704:	0000003a 	.word	0x0000003a
1a007708:	72756320 	.word	0x72756320
1a00770c:	746e6572 	.word	0x746e6572
1a007710:	64646120 	.word	0x64646120
1a007714:	73736572 	.word	0x73736572
1a007718:	0000203a 	.word	0x0000203a
1a00771c:	3a635420 	.word	0x3a635420
1a007720:	00000020 	.word	0x00000020
1a007724:	252e6425 	.word	0x252e6425
1a007728:	00643430 	.word	0x00643430
1a00772c:	3a645420 	.word	0x3a645420
1a007730:	00000020 	.word	0x00000020
1a007734:	696f5320 	.word	0x696f5320
1a007738:	00203a6c 	.word	0x00203a6c
1a00773c:	3a634920 	.word	0x3a634920
1a007740:	00000020 	.word	0x00000020
1a007744:	3a644920 	.word	0x3a644920
1a007748:	00000020 	.word	0x00000020
1a00774c:	00002020 	.word	0x00002020
1a007750:	ffff002f 	.word	0xffff002f

1a007754 <ExtRateIn>:
1a007754:	00000000                                ....

1a007758 <GpioButtons>:
1a007758:	08000400 09010900                       ........

1a007760 <GpioLeds>:
1a007760:	01050005 0e000205 0c010b01              ............

1a00776c <GpioPorts>:
1a00776c:	03030003 0f050403 05031005 07030603     ................
1a00777c:	ffff0802                                ....

1a007780 <OscRateIn>:
1a007780:	00b71b00                                ....

1a007784 <InitClkStates>:
1a007784:	01010f01                                ....

1a007788 <pinmuxing>:
1a007788:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a007798:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0077a8:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0077b8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0077c8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0077d8:	00d50301 00d50401 00160107 00560207     ..............V.
1a0077e8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0077f8:	00570206                                ..W.

1a0077fc <UART_BClock>:
1a0077fc:	01a201c2 01620182                       ......b.

1a007804 <UART_PClock>:
1a007804:	00820081 00a200a1 08040201 0f0f0f03     ................
1a007814:	ffff00ff                                ....

1a007818 <periph_to_base>:
1a007818:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a007828:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a007838:	000100e0 01000100 01200003 00060120     .......... . ...
1a007848:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a007858:	01820013 00120182 01a201a2 01c20011     ................
1a007868:	001001c2 01e201e2 0202000f 000e0202     ................
1a007878:	02220222 0223000d 001c0223              "."...#.#...

1a007884 <InitClkStates>:
1a007884:	00010100 00010909 0001090a 01010701     ................
1a007894:	00010902 00010906 0101090c 0001090d     ................
1a0078a4:	0001090e 0001090f 00010910 00010911     ................
1a0078b4:	00010912 00010913 00011114 00011119     ................
1a0078c4:	0001111a 0001111b                       ........

1a0078cc <lpcUarts>:
1a0078cc:	40081000 06020406 00180205 40081000     ...@...........@
1a0078dc:	09070509 00180706 40082000 00000000     ......... .@....
1a0078ec:	00190000 400c1000 07060107 001a0602     .......@........
1a0078fc:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a00790c:	02020302 001b0204                       ........

1a007914 <gpioPinsInit>:
1a007914:	02000104 00050701 05010d03 04080100     ................
1a007924:	02020002 02000304 00000403 04070002     ................
1a007934:	030c0300 09050402 05040103 04030208     ................
1a007944:	04020305 06040504 0802000c 03000b06     ................
1a007954:	00090607 07060503 060f0504 03030004     ................
1a007964:	02000404 00050404 06040502 04060200     ................
1a007974:	0c050408 05040a04 0003010e 14010a00     ................
1a007984:	010f0000 0d000012 00001101 0010010c     ................
1a007994:	07070300 000f0300 01000001 00000000     ................
1a0079a4:	000a0600 08060603 06100504 04030005     ................
1a0079b4:	03000106 04090400 04010d05 010b0000     ................
1a0079c4:	0200000f 00000001 00010104 02010800     ................
1a0079d4:	01090000 09010006 05040002 04010200     ................
1a0079e4:	02020105 02020504 0e00000a 01000b02     ................
1a0079f4:	000c020b ffff0c01 ff000a0d 7778797a     ............zyxw
1a007a04:	73747576 6f707172 6b6c6d6e 6768696a     vutsrqponmlkjihg
1a007a14:	63646566 38396162 34353637 30313233     fedcba9876543210
1a007a24:	34333231 38373635 63626139 67666564     123456789abcdefg
1a007a34:	6b6a6968 6f6e6d6c 73727170 77767574     hijklmnopqrstuvw
1a007a44:	007a7978 33323130 37363534 42413938     xyz.0123456789AB
1a007a54:	46454443 ffffff00                       CDEF....

1a007a5c <_ctype_>:
1a007a5c:	20202000 20202020 28282020 20282828     .         ((((( 
1a007a6c:	20202020 20202020 20202020 20202020                     
1a007a7c:	10108820 10101010 10101010 10101010      ...............
1a007a8c:	04040410 04040404 10040404 10101010     ................
1a007a9c:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a007aac:	01010101 01010101 01010101 10101010     ................
1a007abc:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a007acc:	02020202 02020202 02020202 10101010     ................
1a007adc:	00000020 00000000 00000000 00000000      ...............
	...
1a007b5c:	ffffff00 00464e49 00666e69 004e414e     ....INF.inf.NAN.
1a007b6c:	006e616e 33323130 37363534 62613938     nan.0123456789ab
1a007b7c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
1a007b8c:	ffff0030                                0...

1a007b90 <blanks.8678>:
1a007b90:	20202020 20202020 20202020 20202020                     

1a007ba0 <zeroes.8679>:
1a007ba0:	30303030 30303030 30303030 30303030     0000000000000000
1a007bb0:	004e614e 69666e49 7974696e ffffff00     NaN.Infinity....

1a007bc0 <__mprec_bigtens>:
1a007bc0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a007bd0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a007be0:	7f73bf3c 75154fdd                       <.s..O.u

1a007be8 <__mprec_tens>:
1a007be8:	00000000 3ff00000 00000000 40240000     .......?......$@
1a007bf8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a007c08:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a007c18:	00000000 412e8480 00000000 416312d0     .......A......cA
1a007c28:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a007c38:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a007c48:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a007c58:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a007c68:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a007c78:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a007c88:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a007c98:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a007ca8:	79d99db4 44ea7843                       ...yCx.D

1a007cb0 <p05.7442>:
1a007cb0:	00000005 00000019 0000007d 00000043     ........}...C...
1a007cc0:	49534f50 ffff0058 0000002e              POSIX.......
